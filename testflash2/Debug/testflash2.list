
testflash2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004218  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08004328  08004328  00014328  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004370  08004370  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08004370  08004370  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004370  08004370  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004370  08004370  00014370  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004374  08004374  00014374  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08004378  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000360  20000078  080043f0  00020078  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200003d8  080043f0  000203d8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001268c  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d58  00000000  00000000  0003272d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fa8  00000000  00000000  00035488  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e60  00000000  00000000  00036430  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019faf  00000000  00000000  00037290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011820  00000000  00000000  0005123f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091509  00000000  00000000  00062a5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f3f68  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004204  00000000  00000000  000f3fbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000078 	.word	0x20000078
 800012c:	00000000 	.word	0x00000000
 8000130:	08004310 	.word	0x08004310

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000007c 	.word	0x2000007c
 800014c:	08004310 	.word	0x08004310

08000150 <GetPage>:
 * Some STM32F103C8 have 64 KB FLASH Memory, so I guess they have Page 0 to Page 63 only.
 */

/* FLASH_PAGE_SIZE should be able to get the size of the Page according to the controller */
static uint32_t GetPage(uint32_t Address)
{
 8000150:	b480      	push	{r7}
 8000152:	b085      	sub	sp, #20
 8000154:	af00      	add	r7, sp, #0
 8000156:	6078      	str	r0, [r7, #4]
  for (int indx=0; indx<128; indx++)
 8000158:	2300      	movs	r3, #0
 800015a:	60fb      	str	r3, [r7, #12]
 800015c:	e016      	b.n	800018c <GetPage+0x3c>
  {
	  if((Address < (0x08000000 + (FLASH_PAGE_SIZE *(indx+1))) ) && (Address >= (0x08000000 + FLASH_PAGE_SIZE*indx)))
 800015e:	68fb      	ldr	r3, [r7, #12]
 8000160:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8000164:	3301      	adds	r3, #1
 8000166:	029b      	lsls	r3, r3, #10
 8000168:	687a      	ldr	r2, [r7, #4]
 800016a:	429a      	cmp	r2, r3
 800016c:	d20b      	bcs.n	8000186 <GetPage+0x36>
 800016e:	68fb      	ldr	r3, [r7, #12]
 8000170:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8000174:	029b      	lsls	r3, r3, #10
 8000176:	687a      	ldr	r2, [r7, #4]
 8000178:	429a      	cmp	r2, r3
 800017a:	d304      	bcc.n	8000186 <GetPage+0x36>
	  {
		  return (0x08000000 + FLASH_PAGE_SIZE*indx);
 800017c:	68fb      	ldr	r3, [r7, #12]
 800017e:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8000182:	029b      	lsls	r3, r3, #10
 8000184:	e006      	b.n	8000194 <GetPage+0x44>
  for (int indx=0; indx<128; indx++)
 8000186:	68fb      	ldr	r3, [r7, #12]
 8000188:	3301      	adds	r3, #1
 800018a:	60fb      	str	r3, [r7, #12]
 800018c:	68fb      	ldr	r3, [r7, #12]
 800018e:	2b7f      	cmp	r3, #127	; 0x7f
 8000190:	dde5      	ble.n	800015e <GetPage+0xe>
	  }
  }

  return 0;
 8000192:	2300      	movs	r3, #0
}
 8000194:	4618      	mov	r0, r3
 8000196:	3714      	adds	r7, #20
 8000198:	46bd      	mov	sp, r7
 800019a:	bc80      	pop	{r7}
 800019c:	4770      	bx	lr
	...

080001a0 <Flash_Write_Data>:
   float float_variable =  thing.a;
   return float_variable;
}

uint32_t Flash_Write_Data (uint32_t StartPageAddress, uint32_t *Data, uint16_t numberofwords)
{
 80001a0:	b580      	push	{r7, lr}
 80001a2:	b08a      	sub	sp, #40	; 0x28
 80001a4:	af00      	add	r7, sp, #0
 80001a6:	60f8      	str	r0, [r7, #12]
 80001a8:	60b9      	str	r1, [r7, #8]
 80001aa:	4613      	mov	r3, r2
 80001ac:	80fb      	strh	r3, [r7, #6]

	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t PAGEError;
	int sofar=0;
 80001ae:	2300      	movs	r3, #0
 80001b0:	627b      	str	r3, [r7, #36]	; 0x24

	  /* Unlock the Flash to enable the flash control register access *************/
	   HAL_FLASH_Unlock();
 80001b2:	f000 fc45 	bl	8000a40 <HAL_FLASH_Unlock>

	   /* Erase the user Flash area*/

	  uint32_t StartPage = GetPage(StartPageAddress);
 80001b6:	68f8      	ldr	r0, [r7, #12]
 80001b8:	f7ff ffca 	bl	8000150 <GetPage>
 80001bc:	6238      	str	r0, [r7, #32]
	  uint32_t EndPageAdress = StartPageAddress + numberofwords*4;
 80001be:	88fb      	ldrh	r3, [r7, #6]
 80001c0:	009b      	lsls	r3, r3, #2
 80001c2:	461a      	mov	r2, r3
 80001c4:	68fb      	ldr	r3, [r7, #12]
 80001c6:	4413      	add	r3, r2
 80001c8:	61fb      	str	r3, [r7, #28]
	  uint32_t EndPage = GetPage(EndPageAdress);
 80001ca:	69f8      	ldr	r0, [r7, #28]
 80001cc:	f7ff ffc0 	bl	8000150 <GetPage>
 80001d0:	61b8      	str	r0, [r7, #24]

	   /* Fill EraseInit structure*/
	   EraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
 80001d2:	4b1f      	ldr	r3, [pc, #124]	; (8000250 <Flash_Write_Data+0xb0>)
 80001d4:	2200      	movs	r2, #0
 80001d6:	601a      	str	r2, [r3, #0]
	   EraseInitStruct.PageAddress = StartPage;
 80001d8:	4a1d      	ldr	r2, [pc, #116]	; (8000250 <Flash_Write_Data+0xb0>)
 80001da:	6a3b      	ldr	r3, [r7, #32]
 80001dc:	6093      	str	r3, [r2, #8]
	   EraseInitStruct.NbPages     = ((EndPage - StartPage)/FLASH_PAGE_SIZE) +1;
 80001de:	69ba      	ldr	r2, [r7, #24]
 80001e0:	6a3b      	ldr	r3, [r7, #32]
 80001e2:	1ad3      	subs	r3, r2, r3
 80001e4:	0a9b      	lsrs	r3, r3, #10
 80001e6:	3301      	adds	r3, #1
 80001e8:	4a19      	ldr	r2, [pc, #100]	; (8000250 <Flash_Write_Data+0xb0>)
 80001ea:	60d3      	str	r3, [r2, #12]

	   if (HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) != HAL_OK)
 80001ec:	f107 0314 	add.w	r3, r7, #20
 80001f0:	4619      	mov	r1, r3
 80001f2:	4817      	ldr	r0, [pc, #92]	; (8000250 <Flash_Write_Data+0xb0>)
 80001f4:	f000 fd16 	bl	8000c24 <HAL_FLASHEx_Erase>
 80001f8:	4603      	mov	r3, r0
 80001fa:	2b00      	cmp	r3, #0
 80001fc:	d01d      	beq.n	800023a <Flash_Write_Data+0x9a>
	   {
	     /*Error occurred while page erase.*/
		  return HAL_FLASH_GetError ();
 80001fe:	f000 fc55 	bl	8000aac <HAL_FLASH_GetError>
 8000202:	4603      	mov	r3, r0
 8000204:	e020      	b.n	8000248 <Flash_Write_Data+0xa8>

	   /* Program the user Flash area word by word*/

	   while (sofar<numberofwords)
	   {
	     if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, StartPageAddress, Data[sofar]) == HAL_OK)
 8000206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000208:	009b      	lsls	r3, r3, #2
 800020a:	68ba      	ldr	r2, [r7, #8]
 800020c:	4413      	add	r3, r2
 800020e:	681b      	ldr	r3, [r3, #0]
 8000210:	461a      	mov	r2, r3
 8000212:	f04f 0300 	mov.w	r3, #0
 8000216:	68f9      	ldr	r1, [r7, #12]
 8000218:	2002      	movs	r0, #2
 800021a:	f000 fba1 	bl	8000960 <HAL_FLASH_Program>
 800021e:	4603      	mov	r3, r0
 8000220:	2b00      	cmp	r3, #0
 8000222:	d106      	bne.n	8000232 <Flash_Write_Data+0x92>
	     {
	    	 StartPageAddress += 4;  // use StartPageAddress += 2 for half word and 8 for double word
 8000224:	68fb      	ldr	r3, [r7, #12]
 8000226:	3304      	adds	r3, #4
 8000228:	60fb      	str	r3, [r7, #12]
	    	 sofar++;
 800022a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800022c:	3301      	adds	r3, #1
 800022e:	627b      	str	r3, [r7, #36]	; 0x24
 8000230:	e003      	b.n	800023a <Flash_Write_Data+0x9a>
	     }
	     else
	     {
	       /* Error occurred while writing data in Flash memory*/
	    	 return HAL_FLASH_GetError ();
 8000232:	f000 fc3b 	bl	8000aac <HAL_FLASH_GetError>
 8000236:	4603      	mov	r3, r0
 8000238:	e006      	b.n	8000248 <Flash_Write_Data+0xa8>
	   while (sofar<numberofwords)
 800023a:	88fb      	ldrh	r3, [r7, #6]
 800023c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800023e:	429a      	cmp	r2, r3
 8000240:	dbe1      	blt.n	8000206 <Flash_Write_Data+0x66>
	     }
	   }

	   /* Lock the Flash to disable the flash control register access (recommended
	      to protect the FLASH memory against possible unwanted operation) *********/
	   HAL_FLASH_Lock();
 8000242:	f000 fc23 	bl	8000a8c <HAL_FLASH_Lock>

	   return 0;
 8000246:	2300      	movs	r3, #0
}
 8000248:	4618      	mov	r0, r3
 800024a:	3728      	adds	r7, #40	; 0x28
 800024c:	46bd      	mov	sp, r7
 800024e:	bd80      	pop	{r7, pc}
 8000250:	20000094 	.word	0x20000094

08000254 <Flash_Read_Data>:


void Flash_Read_Data (uint32_t StartPageAddress, uint32_t *RxBuf, uint16_t numberofwords)
{
 8000254:	b480      	push	{r7}
 8000256:	b085      	sub	sp, #20
 8000258:	af00      	add	r7, sp, #0
 800025a:	60f8      	str	r0, [r7, #12]
 800025c:	60b9      	str	r1, [r7, #8]
 800025e:	4613      	mov	r3, r2
 8000260:	80fb      	strh	r3, [r7, #6]
	while (1)
	{

		*RxBuf = *(__IO uint32_t *)StartPageAddress;
 8000262:	68fb      	ldr	r3, [r7, #12]
 8000264:	681a      	ldr	r2, [r3, #0]
 8000266:	68bb      	ldr	r3, [r7, #8]
 8000268:	601a      	str	r2, [r3, #0]
		StartPageAddress += 4;
 800026a:	68fb      	ldr	r3, [r7, #12]
 800026c:	3304      	adds	r3, #4
 800026e:	60fb      	str	r3, [r7, #12]
		RxBuf++;
 8000270:	68bb      	ldr	r3, [r7, #8]
 8000272:	3304      	adds	r3, #4
 8000274:	60bb      	str	r3, [r7, #8]
		if (!(numberofwords--)) break;
 8000276:	88fb      	ldrh	r3, [r7, #6]
 8000278:	1e5a      	subs	r2, r3, #1
 800027a:	80fa      	strh	r2, [r7, #6]
 800027c:	2b00      	cmp	r3, #0
 800027e:	d000      	beq.n	8000282 <Flash_Read_Data+0x2e>
		*RxBuf = *(__IO uint32_t *)StartPageAddress;
 8000280:	e7ef      	b.n	8000262 <Flash_Read_Data+0xe>
		if (!(numberofwords--)) break;
 8000282:	bf00      	nop
	}
}
 8000284:	bf00      	nop
 8000286:	3714      	adds	r7, #20
 8000288:	46bd      	mov	sp, r7
 800028a:	bc80      	pop	{r7}
 800028c:	4770      	bx	lr
	...

08000290 <t_flashtask>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

static void t_flashtask(void *pvParameters){
 8000290:	b580      	push	{r7, lr}
 8000292:	b088      	sub	sp, #32
 8000294:	af00      	add	r7, sp, #0
 8000296:	6078      	str	r0, [r7, #4]

	uint32_t aux_ADDR=PAGE_ADDR_1;
 8000298:	4b26      	ldr	r3, [pc, #152]	; (8000334 <t_flashtask+0xa4>)
 800029a:	61fb      	str	r3, [r7, #28]
	uint32_t index=0;
 800029c:	2300      	movs	r3, #0
 800029e:	61bb      	str	r3, [r7, #24]
	usuario value;
	//flashdata response;

	while(1){
		xQueueReceive(cmd, &value, portMAX_DELAY);
 80002a0:	4b25      	ldr	r3, [pc, #148]	; (8000338 <t_flashtask+0xa8>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	f107 0108 	add.w	r1, r7, #8
 80002a8:	f04f 32ff 	mov.w	r2, #4294967295
 80002ac:	4618      	mov	r0, r3
 80002ae:	f001 fdd5 	bl	8001e5c <xQueueReceive>
		switch(value.accion){
 80002b2:	68bb      	ldr	r3, [r7, #8]
 80002b4:	2b02      	cmp	r3, #2
 80002b6:	d020      	beq.n	80002fa <t_flashtask+0x6a>
 80002b8:	2b02      	cmp	r3, #2
 80002ba:	d836      	bhi.n	800032a <t_flashtask+0x9a>
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d036      	beq.n	800032e <t_flashtask+0x9e>
 80002c0:	2b01      	cmp	r3, #1
 80002c2:	d000      	beq.n	80002c6 <t_flashtask+0x36>
			buffer[value.nroUsusario*2]=value.nroUsusario;
			buffer[value.nroUsusario*2+1]=value.clave;
			Flash_Write_Data(PAGE_ADDR_1, buffer, FLASH_BUFFER_SIZE);
			break;
		default:
			break;
 80002c4:	e031      	b.n	800032a <t_flashtask+0x9a>
			index=(2*value.nroUsusario)+1;
 80002c6:	68fb      	ldr	r3, [r7, #12]
 80002c8:	005b      	lsls	r3, r3, #1
 80002ca:	3301      	adds	r3, #1
 80002cc:	61bb      	str	r3, [r7, #24]
			Flash_Read_Data(aux_ADDR, buffer, FLASH_BUFFER_SIZE); //cambiar a 5 el numero de palabras en caso que se desee cambiar por datos en char
 80002ce:	2240      	movs	r2, #64	; 0x40
 80002d0:	491a      	ldr	r1, [pc, #104]	; (800033c <t_flashtask+0xac>)
 80002d2:	69f8      	ldr	r0, [r7, #28]
 80002d4:	f7ff ffbe 	bl	8000254 <Flash_Read_Data>
			value.clave = buffer[index];
 80002d8:	4a18      	ldr	r2, [pc, #96]	; (800033c <t_flashtask+0xac>)
 80002da:	69bb      	ldr	r3, [r7, #24]
 80002dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002e0:	613b      	str	r3, [r7, #16]
			value.nroIntentos = 0;
 80002e2:	2300      	movs	r3, #0
 80002e4:	617b      	str	r3, [r7, #20]
			xQueueSend(data,&value,portMAX_DELAY);
 80002e6:	4b16      	ldr	r3, [pc, #88]	; (8000340 <t_flashtask+0xb0>)
 80002e8:	6818      	ldr	r0, [r3, #0]
 80002ea:	f107 0108 	add.w	r1, r7, #8
 80002ee:	2300      	movs	r3, #0
 80002f0:	f04f 32ff 	mov.w	r2, #4294967295
 80002f4:	f001 fcb4 	bl	8001c60 <xQueueGenericSend>
			break;
 80002f8:	e01a      	b.n	8000330 <t_flashtask+0xa0>
			Flash_Read_Data(PAGE_ADDR_1, buffer, FLASH_BUFFER_SIZE);
 80002fa:	2240      	movs	r2, #64	; 0x40
 80002fc:	490f      	ldr	r1, [pc, #60]	; (800033c <t_flashtask+0xac>)
 80002fe:	480d      	ldr	r0, [pc, #52]	; (8000334 <t_flashtask+0xa4>)
 8000300:	f7ff ffa8 	bl	8000254 <Flash_Read_Data>
			buffer[value.nroUsusario*2]=value.nroUsusario;
 8000304:	68fb      	ldr	r3, [r7, #12]
 8000306:	005b      	lsls	r3, r3, #1
 8000308:	68fa      	ldr	r2, [r7, #12]
 800030a:	490c      	ldr	r1, [pc, #48]	; (800033c <t_flashtask+0xac>)
 800030c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			buffer[value.nroUsusario*2+1]=value.clave;
 8000310:	68fb      	ldr	r3, [r7, #12]
 8000312:	005b      	lsls	r3, r3, #1
 8000314:	3301      	adds	r3, #1
 8000316:	693a      	ldr	r2, [r7, #16]
 8000318:	4908      	ldr	r1, [pc, #32]	; (800033c <t_flashtask+0xac>)
 800031a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			Flash_Write_Data(PAGE_ADDR_1, buffer, FLASH_BUFFER_SIZE);
 800031e:	2240      	movs	r2, #64	; 0x40
 8000320:	4906      	ldr	r1, [pc, #24]	; (800033c <t_flashtask+0xac>)
 8000322:	4804      	ldr	r0, [pc, #16]	; (8000334 <t_flashtask+0xa4>)
 8000324:	f7ff ff3c 	bl	80001a0 <Flash_Write_Data>
			break;
 8000328:	e002      	b.n	8000330 <t_flashtask+0xa0>
			break;
 800032a:	bf00      	nop
 800032c:	e7b8      	b.n	80002a0 <t_flashtask+0x10>
			break;
 800032e:	bf00      	nop
		xQueueReceive(cmd, &value, portMAX_DELAY);
 8000330:	e7b6      	b.n	80002a0 <t_flashtask+0x10>
 8000332:	bf00      	nop
 8000334:	0801fc00 	.word	0x0801fc00
 8000338:	20000318 	.word	0x20000318
 800033c:	20000214 	.word	0x20000214
 8000340:	20000314 	.word	0x20000314

08000344 <auxtask>:
		}
	}
}


static void auxtask(void *pvParameters){
 8000344:	b580      	push	{r7, lr}
 8000346:	b088      	sub	sp, #32
 8000348:	af00      	add	r7, sp, #0
 800034a:	6078      	str	r0, [r7, #4]
	usuario a;
	a.nroUsusario=0;
 800034c:	2300      	movs	r3, #0
 800034e:	613b      	str	r3, [r7, #16]
	uint8_t i;
	a.clave=9999;
 8000350:	f242 730f 	movw	r3, #9999	; 0x270f
 8000354:	617b      	str	r3, [r7, #20]
	a.nroIntentos=0;
 8000356:	2300      	movs	r3, #0
 8000358:	61bb      	str	r3, [r7, #24]
	while(1){
		/*a.accion=2;
		xQueueSendToBack(flash_cmd_queue, &a, portMAX_DELAY);
		//vTaskDelay(5);*/
		a.accion=1;
 800035a:	2301      	movs	r3, #1
 800035c:	60fb      	str	r3, [r7, #12]
		for(i=0;i<4;i++){
 800035e:	2300      	movs	r3, #0
 8000360:	77fb      	strb	r3, [r7, #31]
 8000362:	e01d      	b.n	80003a0 <auxtask+0x5c>

			xQueueSend(cmd, &a, portMAX_DELAY);
 8000364:	4b10      	ldr	r3, [pc, #64]	; (80003a8 <auxtask+0x64>)
 8000366:	6818      	ldr	r0, [r3, #0]
 8000368:	f107 010c 	add.w	r1, r7, #12
 800036c:	2300      	movs	r3, #0
 800036e:	f04f 32ff 	mov.w	r2, #4294967295
 8000372:	f001 fc75 	bl	8001c60 <xQueueGenericSend>
			//taskYIELD();
			vTaskDelay(5/portTICK_PERIOD_MS);
 8000376:	2005      	movs	r0, #5
 8000378:	f002 f94e 	bl	8002618 <vTaskDelay>
			xQueueReceive(data, &a, portMAX_DELAY);
 800037c:	4b0b      	ldr	r3, [pc, #44]	; (80003ac <auxtask+0x68>)
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	f107 010c 	add.w	r1, r7, #12
 8000384:	f04f 32ff 	mov.w	r2, #4294967295
 8000388:	4618      	mov	r0, r3
 800038a:	f001 fd67 	bl	8001e5c <xQueueReceive>
			a.nroUsusario++;
 800038e:	693b      	ldr	r3, [r7, #16]
 8000390:	3301      	adds	r3, #1
 8000392:	613b      	str	r3, [r7, #16]

			vTaskDelay(5/portTICK_PERIOD_MS);
 8000394:	2005      	movs	r0, #5
 8000396:	f002 f93f 	bl	8002618 <vTaskDelay>
		for(i=0;i<4;i++){
 800039a:	7ffb      	ldrb	r3, [r7, #31]
 800039c:	3301      	adds	r3, #1
 800039e:	77fb      	strb	r3, [r7, #31]
 80003a0:	7ffb      	ldrb	r3, [r7, #31]
 80003a2:	2b03      	cmp	r3, #3
 80003a4:	d9de      	bls.n	8000364 <auxtask+0x20>
		a.accion=1;
 80003a6:	e7d8      	b.n	800035a <auxtask+0x16>
 80003a8:	20000318 	.word	0x20000318
 80003ac:	20000314 	.word	0x20000314

080003b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b086      	sub	sp, #24
 80003b4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003b6:	f000 f9c1 	bl	800073c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003ba:	f000 f835 	bl	8000428 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003be:	f000 f879 	bl	80004b4 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */


  cmd = xQueueCreate(1,sizeof(value));
 80003c2:	2200      	movs	r2, #0
 80003c4:	2110      	movs	r1, #16
 80003c6:	2001      	movs	r0, #1
 80003c8:	f001 fbd8 	bl	8001b7c <xQueueGenericCreate>
 80003cc:	4603      	mov	r3, r0
 80003ce:	4a11      	ldr	r2, [pc, #68]	; (8000414 <main+0x64>)
 80003d0:	6013      	str	r3, [r2, #0]
    data = xQueueCreate(1,sizeof(value));
 80003d2:	2200      	movs	r2, #0
 80003d4:	2110      	movs	r1, #16
 80003d6:	2001      	movs	r0, #1
 80003d8:	f001 fbd0 	bl	8001b7c <xQueueGenericCreate>
 80003dc:	4603      	mov	r3, r0
 80003de:	4a0e      	ldr	r2, [pc, #56]	; (8000418 <main+0x68>)
 80003e0:	6013      	str	r3, [r2, #0]

    xTaskCreate(t_flashtask, "", 256, NULL, 2, NULL);
 80003e2:	2300      	movs	r3, #0
 80003e4:	9301      	str	r3, [sp, #4]
 80003e6:	2302      	movs	r3, #2
 80003e8:	9300      	str	r3, [sp, #0]
 80003ea:	2300      	movs	r3, #0
 80003ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80003f0:	490a      	ldr	r1, [pc, #40]	; (800041c <main+0x6c>)
 80003f2:	480b      	ldr	r0, [pc, #44]	; (8000420 <main+0x70>)
 80003f4:	f001 ffa4 	bl	8002340 <xTaskCreate>
    xTaskCreate(auxtask, "", 256, NULL, 1, NULL);
 80003f8:	2300      	movs	r3, #0
 80003fa:	9301      	str	r3, [sp, #4]
 80003fc:	2301      	movs	r3, #1
 80003fe:	9300      	str	r3, [sp, #0]
 8000400:	2300      	movs	r3, #0
 8000402:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000406:	4905      	ldr	r1, [pc, #20]	; (800041c <main+0x6c>)
 8000408:	4806      	ldr	r0, [pc, #24]	; (8000424 <main+0x74>)
 800040a:	f001 ff99 	bl	8002340 <xTaskCreate>

    vTaskStartScheduler();
 800040e:	f002 f937 	bl	8002680 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000412:	e7fe      	b.n	8000412 <main+0x62>
 8000414:	20000318 	.word	0x20000318
 8000418:	20000314 	.word	0x20000314
 800041c:	08004328 	.word	0x08004328
 8000420:	08000291 	.word	0x08000291
 8000424:	08000345 	.word	0x08000345

08000428 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b090      	sub	sp, #64	; 0x40
 800042c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800042e:	f107 0318 	add.w	r3, r7, #24
 8000432:	2228      	movs	r2, #40	; 0x28
 8000434:	2100      	movs	r1, #0
 8000436:	4618      	mov	r0, r3
 8000438:	f003 fe9e 	bl	8004178 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800043c:	1d3b      	adds	r3, r7, #4
 800043e:	2200      	movs	r2, #0
 8000440:	601a      	str	r2, [r3, #0]
 8000442:	605a      	str	r2, [r3, #4]
 8000444:	609a      	str	r2, [r3, #8]
 8000446:	60da      	str	r2, [r3, #12]
 8000448:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800044a:	2301      	movs	r3, #1
 800044c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800044e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000452:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000454:	2300      	movs	r3, #0
 8000456:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000458:	2301      	movs	r3, #1
 800045a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800045c:	2302      	movs	r3, #2
 800045e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000460:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000464:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000466:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800046a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800046c:	f107 0318 	add.w	r3, r7, #24
 8000470:	4618      	mov	r0, r3
 8000472:	f000 fc7f 	bl	8000d74 <HAL_RCC_OscConfig>
 8000476:	4603      	mov	r3, r0
 8000478:	2b00      	cmp	r3, #0
 800047a:	d001      	beq.n	8000480 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800047c:	f000 f84e 	bl	800051c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000480:	230f      	movs	r3, #15
 8000482:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000484:	2302      	movs	r3, #2
 8000486:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000488:	2300      	movs	r3, #0
 800048a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800048c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000490:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000492:	2300      	movs	r3, #0
 8000494:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000496:	1d3b      	adds	r3, r7, #4
 8000498:	2102      	movs	r1, #2
 800049a:	4618      	mov	r0, r3
 800049c:	f000 feea 	bl	8001274 <HAL_RCC_ClockConfig>
 80004a0:	4603      	mov	r3, r0
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d001      	beq.n	80004aa <SystemClock_Config+0x82>
  {
    Error_Handler();
 80004a6:	f000 f839 	bl	800051c <Error_Handler>
  }
}
 80004aa:	bf00      	nop
 80004ac:	3740      	adds	r7, #64	; 0x40
 80004ae:	46bd      	mov	sp, r7
 80004b0:	bd80      	pop	{r7, pc}
	...

080004b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004b4:	b480      	push	{r7}
 80004b6:	b083      	sub	sp, #12
 80004b8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80004ba:	4b0e      	ldr	r3, [pc, #56]	; (80004f4 <MX_GPIO_Init+0x40>)
 80004bc:	699b      	ldr	r3, [r3, #24]
 80004be:	4a0d      	ldr	r2, [pc, #52]	; (80004f4 <MX_GPIO_Init+0x40>)
 80004c0:	f043 0320 	orr.w	r3, r3, #32
 80004c4:	6193      	str	r3, [r2, #24]
 80004c6:	4b0b      	ldr	r3, [pc, #44]	; (80004f4 <MX_GPIO_Init+0x40>)
 80004c8:	699b      	ldr	r3, [r3, #24]
 80004ca:	f003 0320 	and.w	r3, r3, #32
 80004ce:	607b      	str	r3, [r7, #4]
 80004d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004d2:	4b08      	ldr	r3, [pc, #32]	; (80004f4 <MX_GPIO_Init+0x40>)
 80004d4:	699b      	ldr	r3, [r3, #24]
 80004d6:	4a07      	ldr	r2, [pc, #28]	; (80004f4 <MX_GPIO_Init+0x40>)
 80004d8:	f043 0304 	orr.w	r3, r3, #4
 80004dc:	6193      	str	r3, [r2, #24]
 80004de:	4b05      	ldr	r3, [pc, #20]	; (80004f4 <MX_GPIO_Init+0x40>)
 80004e0:	699b      	ldr	r3, [r3, #24]
 80004e2:	f003 0304 	and.w	r3, r3, #4
 80004e6:	603b      	str	r3, [r7, #0]
 80004e8:	683b      	ldr	r3, [r7, #0]

}
 80004ea:	bf00      	nop
 80004ec:	370c      	adds	r7, #12
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bc80      	pop	{r7}
 80004f2:	4770      	bx	lr
 80004f4:	40021000 	.word	0x40021000

080004f8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b082      	sub	sp, #8
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	4a04      	ldr	r2, [pc, #16]	; (8000518 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000506:	4293      	cmp	r3, r2
 8000508:	d101      	bne.n	800050e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800050a:	f000 f92d 	bl	8000768 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800050e:	bf00      	nop
 8000510:	3708      	adds	r7, #8
 8000512:	46bd      	mov	sp, r7
 8000514:	bd80      	pop	{r7, pc}
 8000516:	bf00      	nop
 8000518:	40012c00 	.word	0x40012c00

0800051c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800051c:	b480      	push	{r7}
 800051e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000520:	b672      	cpsid	i
}
 8000522:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000524:	e7fe      	b.n	8000524 <Error_Handler+0x8>
	...

08000528 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000528:	b480      	push	{r7}
 800052a:	b085      	sub	sp, #20
 800052c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800052e:	4b15      	ldr	r3, [pc, #84]	; (8000584 <HAL_MspInit+0x5c>)
 8000530:	699b      	ldr	r3, [r3, #24]
 8000532:	4a14      	ldr	r2, [pc, #80]	; (8000584 <HAL_MspInit+0x5c>)
 8000534:	f043 0301 	orr.w	r3, r3, #1
 8000538:	6193      	str	r3, [r2, #24]
 800053a:	4b12      	ldr	r3, [pc, #72]	; (8000584 <HAL_MspInit+0x5c>)
 800053c:	699b      	ldr	r3, [r3, #24]
 800053e:	f003 0301 	and.w	r3, r3, #1
 8000542:	60bb      	str	r3, [r7, #8]
 8000544:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000546:	4b0f      	ldr	r3, [pc, #60]	; (8000584 <HAL_MspInit+0x5c>)
 8000548:	69db      	ldr	r3, [r3, #28]
 800054a:	4a0e      	ldr	r2, [pc, #56]	; (8000584 <HAL_MspInit+0x5c>)
 800054c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000550:	61d3      	str	r3, [r2, #28]
 8000552:	4b0c      	ldr	r3, [pc, #48]	; (8000584 <HAL_MspInit+0x5c>)
 8000554:	69db      	ldr	r3, [r3, #28]
 8000556:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800055a:	607b      	str	r3, [r7, #4]
 800055c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800055e:	4b0a      	ldr	r3, [pc, #40]	; (8000588 <HAL_MspInit+0x60>)
 8000560:	685b      	ldr	r3, [r3, #4]
 8000562:	60fb      	str	r3, [r7, #12]
 8000564:	68fb      	ldr	r3, [r7, #12]
 8000566:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800056a:	60fb      	str	r3, [r7, #12]
 800056c:	68fb      	ldr	r3, [r7, #12]
 800056e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000572:	60fb      	str	r3, [r7, #12]
 8000574:	4a04      	ldr	r2, [pc, #16]	; (8000588 <HAL_MspInit+0x60>)
 8000576:	68fb      	ldr	r3, [r7, #12]
 8000578:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800057a:	bf00      	nop
 800057c:	3714      	adds	r7, #20
 800057e:	46bd      	mov	sp, r7
 8000580:	bc80      	pop	{r7}
 8000582:	4770      	bx	lr
 8000584:	40021000 	.word	0x40021000
 8000588:	40010000 	.word	0x40010000

0800058c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b08c      	sub	sp, #48	; 0x30
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000594:	2300      	movs	r3, #0
 8000596:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000598:	2300      	movs	r3, #0
 800059a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 800059c:	2200      	movs	r2, #0
 800059e:	6879      	ldr	r1, [r7, #4]
 80005a0:	2019      	movs	r0, #25
 80005a2:	f000 f9b2 	bl	800090a <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80005a6:	2019      	movs	r0, #25
 80005a8:	f000 f9cb 	bl	8000942 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80005ac:	4b1e      	ldr	r3, [pc, #120]	; (8000628 <HAL_InitTick+0x9c>)
 80005ae:	699b      	ldr	r3, [r3, #24]
 80005b0:	4a1d      	ldr	r2, [pc, #116]	; (8000628 <HAL_InitTick+0x9c>)
 80005b2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80005b6:	6193      	str	r3, [r2, #24]
 80005b8:	4b1b      	ldr	r3, [pc, #108]	; (8000628 <HAL_InitTick+0x9c>)
 80005ba:	699b      	ldr	r3, [r3, #24]
 80005bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80005c0:	60fb      	str	r3, [r7, #12]
 80005c2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80005c4:	f107 0210 	add.w	r2, r7, #16
 80005c8:	f107 0314 	add.w	r3, r7, #20
 80005cc:	4611      	mov	r1, r2
 80005ce:	4618      	mov	r0, r3
 80005d0:	f000 ffac 	bl	800152c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80005d4:	f000 ff96 	bl	8001504 <HAL_RCC_GetPCLK2Freq>
 80005d8:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80005da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005dc:	4a13      	ldr	r2, [pc, #76]	; (800062c <HAL_InitTick+0xa0>)
 80005de:	fba2 2303 	umull	r2, r3, r2, r3
 80005e2:	0c9b      	lsrs	r3, r3, #18
 80005e4:	3b01      	subs	r3, #1
 80005e6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80005e8:	4b11      	ldr	r3, [pc, #68]	; (8000630 <HAL_InitTick+0xa4>)
 80005ea:	4a12      	ldr	r2, [pc, #72]	; (8000634 <HAL_InitTick+0xa8>)
 80005ec:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80005ee:	4b10      	ldr	r3, [pc, #64]	; (8000630 <HAL_InitTick+0xa4>)
 80005f0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80005f4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80005f6:	4a0e      	ldr	r2, [pc, #56]	; (8000630 <HAL_InitTick+0xa4>)
 80005f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80005fa:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80005fc:	4b0c      	ldr	r3, [pc, #48]	; (8000630 <HAL_InitTick+0xa4>)
 80005fe:	2200      	movs	r2, #0
 8000600:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000602:	4b0b      	ldr	r3, [pc, #44]	; (8000630 <HAL_InitTick+0xa4>)
 8000604:	2200      	movs	r2, #0
 8000606:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000608:	4809      	ldr	r0, [pc, #36]	; (8000630 <HAL_InitTick+0xa4>)
 800060a:	f000 ffdd 	bl	80015c8 <HAL_TIM_Base_Init>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d104      	bne.n	800061e <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000614:	4806      	ldr	r0, [pc, #24]	; (8000630 <HAL_InitTick+0xa4>)
 8000616:	f001 f82f 	bl	8001678 <HAL_TIM_Base_Start_IT>
 800061a:	4603      	mov	r3, r0
 800061c:	e000      	b.n	8000620 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 800061e:	2301      	movs	r3, #1
}
 8000620:	4618      	mov	r0, r3
 8000622:	3730      	adds	r7, #48	; 0x30
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	40021000 	.word	0x40021000
 800062c:	431bde83 	.word	0x431bde83
 8000630:	2000031c 	.word	0x2000031c
 8000634:	40012c00 	.word	0x40012c00

08000638 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800063c:	e7fe      	b.n	800063c <NMI_Handler+0x4>

0800063e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800063e:	b480      	push	{r7}
 8000640:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000642:	e7fe      	b.n	8000642 <HardFault_Handler+0x4>

08000644 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000648:	e7fe      	b.n	8000648 <MemManage_Handler+0x4>

0800064a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800064a:	b480      	push	{r7}
 800064c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800064e:	e7fe      	b.n	800064e <BusFault_Handler+0x4>

08000650 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000650:	b480      	push	{r7}
 8000652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000654:	e7fe      	b.n	8000654 <UsageFault_Handler+0x4>

08000656 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000656:	b480      	push	{r7}
 8000658:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800065a:	bf00      	nop
 800065c:	46bd      	mov	sp, r7
 800065e:	bc80      	pop	{r7}
 8000660:	4770      	bx	lr
	...

08000664 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000668:	4802      	ldr	r0, [pc, #8]	; (8000674 <TIM1_UP_IRQHandler+0x10>)
 800066a:	f001 f857 	bl	800171c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800066e:	bf00      	nop
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	2000031c 	.word	0x2000031c

08000678 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b086      	sub	sp, #24
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000680:	4a14      	ldr	r2, [pc, #80]	; (80006d4 <_sbrk+0x5c>)
 8000682:	4b15      	ldr	r3, [pc, #84]	; (80006d8 <_sbrk+0x60>)
 8000684:	1ad3      	subs	r3, r2, r3
 8000686:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000688:	697b      	ldr	r3, [r7, #20]
 800068a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800068c:	4b13      	ldr	r3, [pc, #76]	; (80006dc <_sbrk+0x64>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	2b00      	cmp	r3, #0
 8000692:	d102      	bne.n	800069a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000694:	4b11      	ldr	r3, [pc, #68]	; (80006dc <_sbrk+0x64>)
 8000696:	4a12      	ldr	r2, [pc, #72]	; (80006e0 <_sbrk+0x68>)
 8000698:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800069a:	4b10      	ldr	r3, [pc, #64]	; (80006dc <_sbrk+0x64>)
 800069c:	681a      	ldr	r2, [r3, #0]
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	4413      	add	r3, r2
 80006a2:	693a      	ldr	r2, [r7, #16]
 80006a4:	429a      	cmp	r2, r3
 80006a6:	d207      	bcs.n	80006b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80006a8:	f003 fd1e 	bl	80040e8 <__errno>
 80006ac:	4603      	mov	r3, r0
 80006ae:	220c      	movs	r2, #12
 80006b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80006b2:	f04f 33ff 	mov.w	r3, #4294967295
 80006b6:	e009      	b.n	80006cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80006b8:	4b08      	ldr	r3, [pc, #32]	; (80006dc <_sbrk+0x64>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80006be:	4b07      	ldr	r3, [pc, #28]	; (80006dc <_sbrk+0x64>)
 80006c0:	681a      	ldr	r2, [r3, #0]
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	4413      	add	r3, r2
 80006c6:	4a05      	ldr	r2, [pc, #20]	; (80006dc <_sbrk+0x64>)
 80006c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80006ca:	68fb      	ldr	r3, [r7, #12]
}
 80006cc:	4618      	mov	r0, r3
 80006ce:	3718      	adds	r7, #24
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	20005000 	.word	0x20005000
 80006d8:	00000400 	.word	0x00000400
 80006dc:	200000a4 	.word	0x200000a4
 80006e0:	200003d8 	.word	0x200003d8

080006e4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006e4:	b480      	push	{r7}
 80006e6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006e8:	bf00      	nop
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bc80      	pop	{r7}
 80006ee:	4770      	bx	lr

080006f0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80006f0:	f7ff fff8 	bl	80006e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006f4:	480b      	ldr	r0, [pc, #44]	; (8000724 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80006f6:	490c      	ldr	r1, [pc, #48]	; (8000728 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80006f8:	4a0c      	ldr	r2, [pc, #48]	; (800072c <LoopFillZerobss+0x16>)
  movs r3, #0
 80006fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006fc:	e002      	b.n	8000704 <LoopCopyDataInit>

080006fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000700:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000702:	3304      	adds	r3, #4

08000704 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000704:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000706:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000708:	d3f9      	bcc.n	80006fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800070a:	4a09      	ldr	r2, [pc, #36]	; (8000730 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800070c:	4c09      	ldr	r4, [pc, #36]	; (8000734 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800070e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000710:	e001      	b.n	8000716 <LoopFillZerobss>

08000712 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000712:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000714:	3204      	adds	r2, #4

08000716 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000716:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000718:	d3fb      	bcc.n	8000712 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800071a:	f003 fceb 	bl	80040f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800071e:	f7ff fe47 	bl	80003b0 <main>
  bx lr
 8000722:	4770      	bx	lr
  ldr r0, =_sdata
 8000724:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000728:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 800072c:	08004378 	.word	0x08004378
  ldr r2, =_sbss
 8000730:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000734:	200003d8 	.word	0x200003d8

08000738 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000738:	e7fe      	b.n	8000738 <ADC1_2_IRQHandler>
	...

0800073c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000740:	4b08      	ldr	r3, [pc, #32]	; (8000764 <HAL_Init+0x28>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	4a07      	ldr	r2, [pc, #28]	; (8000764 <HAL_Init+0x28>)
 8000746:	f043 0310 	orr.w	r3, r3, #16
 800074a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800074c:	2003      	movs	r0, #3
 800074e:	f000 f8d1 	bl	80008f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000752:	2000      	movs	r0, #0
 8000754:	f7ff ff1a 	bl	800058c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000758:	f7ff fee6 	bl	8000528 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800075c:	2300      	movs	r3, #0
}
 800075e:	4618      	mov	r0, r3
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	40022000 	.word	0x40022000

08000768 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800076c:	4b05      	ldr	r3, [pc, #20]	; (8000784 <HAL_IncTick+0x1c>)
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	461a      	mov	r2, r3
 8000772:	4b05      	ldr	r3, [pc, #20]	; (8000788 <HAL_IncTick+0x20>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	4413      	add	r3, r2
 8000778:	4a03      	ldr	r2, [pc, #12]	; (8000788 <HAL_IncTick+0x20>)
 800077a:	6013      	str	r3, [r2, #0]
}
 800077c:	bf00      	nop
 800077e:	46bd      	mov	sp, r7
 8000780:	bc80      	pop	{r7}
 8000782:	4770      	bx	lr
 8000784:	20000008 	.word	0x20000008
 8000788:	20000364 	.word	0x20000364

0800078c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0
  return uwTick;
 8000790:	4b02      	ldr	r3, [pc, #8]	; (800079c <HAL_GetTick+0x10>)
 8000792:	681b      	ldr	r3, [r3, #0]
}
 8000794:	4618      	mov	r0, r3
 8000796:	46bd      	mov	sp, r7
 8000798:	bc80      	pop	{r7}
 800079a:	4770      	bx	lr
 800079c:	20000364 	.word	0x20000364

080007a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007a0:	b480      	push	{r7}
 80007a2:	b085      	sub	sp, #20
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	f003 0307 	and.w	r3, r3, #7
 80007ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007b0:	4b0c      	ldr	r3, [pc, #48]	; (80007e4 <__NVIC_SetPriorityGrouping+0x44>)
 80007b2:	68db      	ldr	r3, [r3, #12]
 80007b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007b6:	68ba      	ldr	r2, [r7, #8]
 80007b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80007bc:	4013      	ands	r3, r2
 80007be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80007c0:	68fb      	ldr	r3, [r7, #12]
 80007c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007c4:	68bb      	ldr	r3, [r7, #8]
 80007c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007d2:	4a04      	ldr	r2, [pc, #16]	; (80007e4 <__NVIC_SetPriorityGrouping+0x44>)
 80007d4:	68bb      	ldr	r3, [r7, #8]
 80007d6:	60d3      	str	r3, [r2, #12]
}
 80007d8:	bf00      	nop
 80007da:	3714      	adds	r7, #20
 80007dc:	46bd      	mov	sp, r7
 80007de:	bc80      	pop	{r7}
 80007e0:	4770      	bx	lr
 80007e2:	bf00      	nop
 80007e4:	e000ed00 	.word	0xe000ed00

080007e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007ec:	4b04      	ldr	r3, [pc, #16]	; (8000800 <__NVIC_GetPriorityGrouping+0x18>)
 80007ee:	68db      	ldr	r3, [r3, #12]
 80007f0:	0a1b      	lsrs	r3, r3, #8
 80007f2:	f003 0307 	and.w	r3, r3, #7
}
 80007f6:	4618      	mov	r0, r3
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bc80      	pop	{r7}
 80007fc:	4770      	bx	lr
 80007fe:	bf00      	nop
 8000800:	e000ed00 	.word	0xe000ed00

08000804 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000804:	b480      	push	{r7}
 8000806:	b083      	sub	sp, #12
 8000808:	af00      	add	r7, sp, #0
 800080a:	4603      	mov	r3, r0
 800080c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800080e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000812:	2b00      	cmp	r3, #0
 8000814:	db0b      	blt.n	800082e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000816:	79fb      	ldrb	r3, [r7, #7]
 8000818:	f003 021f 	and.w	r2, r3, #31
 800081c:	4906      	ldr	r1, [pc, #24]	; (8000838 <__NVIC_EnableIRQ+0x34>)
 800081e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000822:	095b      	lsrs	r3, r3, #5
 8000824:	2001      	movs	r0, #1
 8000826:	fa00 f202 	lsl.w	r2, r0, r2
 800082a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800082e:	bf00      	nop
 8000830:	370c      	adds	r7, #12
 8000832:	46bd      	mov	sp, r7
 8000834:	bc80      	pop	{r7}
 8000836:	4770      	bx	lr
 8000838:	e000e100 	.word	0xe000e100

0800083c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800083c:	b480      	push	{r7}
 800083e:	b083      	sub	sp, #12
 8000840:	af00      	add	r7, sp, #0
 8000842:	4603      	mov	r3, r0
 8000844:	6039      	str	r1, [r7, #0]
 8000846:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000848:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800084c:	2b00      	cmp	r3, #0
 800084e:	db0a      	blt.n	8000866 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000850:	683b      	ldr	r3, [r7, #0]
 8000852:	b2da      	uxtb	r2, r3
 8000854:	490c      	ldr	r1, [pc, #48]	; (8000888 <__NVIC_SetPriority+0x4c>)
 8000856:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800085a:	0112      	lsls	r2, r2, #4
 800085c:	b2d2      	uxtb	r2, r2
 800085e:	440b      	add	r3, r1
 8000860:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000864:	e00a      	b.n	800087c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000866:	683b      	ldr	r3, [r7, #0]
 8000868:	b2da      	uxtb	r2, r3
 800086a:	4908      	ldr	r1, [pc, #32]	; (800088c <__NVIC_SetPriority+0x50>)
 800086c:	79fb      	ldrb	r3, [r7, #7]
 800086e:	f003 030f 	and.w	r3, r3, #15
 8000872:	3b04      	subs	r3, #4
 8000874:	0112      	lsls	r2, r2, #4
 8000876:	b2d2      	uxtb	r2, r2
 8000878:	440b      	add	r3, r1
 800087a:	761a      	strb	r2, [r3, #24]
}
 800087c:	bf00      	nop
 800087e:	370c      	adds	r7, #12
 8000880:	46bd      	mov	sp, r7
 8000882:	bc80      	pop	{r7}
 8000884:	4770      	bx	lr
 8000886:	bf00      	nop
 8000888:	e000e100 	.word	0xe000e100
 800088c:	e000ed00 	.word	0xe000ed00

08000890 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000890:	b480      	push	{r7}
 8000892:	b089      	sub	sp, #36	; 0x24
 8000894:	af00      	add	r7, sp, #0
 8000896:	60f8      	str	r0, [r7, #12]
 8000898:	60b9      	str	r1, [r7, #8]
 800089a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	f003 0307 	and.w	r3, r3, #7
 80008a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008a4:	69fb      	ldr	r3, [r7, #28]
 80008a6:	f1c3 0307 	rsb	r3, r3, #7
 80008aa:	2b04      	cmp	r3, #4
 80008ac:	bf28      	it	cs
 80008ae:	2304      	movcs	r3, #4
 80008b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008b2:	69fb      	ldr	r3, [r7, #28]
 80008b4:	3304      	adds	r3, #4
 80008b6:	2b06      	cmp	r3, #6
 80008b8:	d902      	bls.n	80008c0 <NVIC_EncodePriority+0x30>
 80008ba:	69fb      	ldr	r3, [r7, #28]
 80008bc:	3b03      	subs	r3, #3
 80008be:	e000      	b.n	80008c2 <NVIC_EncodePriority+0x32>
 80008c0:	2300      	movs	r3, #0
 80008c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008c4:	f04f 32ff 	mov.w	r2, #4294967295
 80008c8:	69bb      	ldr	r3, [r7, #24]
 80008ca:	fa02 f303 	lsl.w	r3, r2, r3
 80008ce:	43da      	mvns	r2, r3
 80008d0:	68bb      	ldr	r3, [r7, #8]
 80008d2:	401a      	ands	r2, r3
 80008d4:	697b      	ldr	r3, [r7, #20]
 80008d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008d8:	f04f 31ff 	mov.w	r1, #4294967295
 80008dc:	697b      	ldr	r3, [r7, #20]
 80008de:	fa01 f303 	lsl.w	r3, r1, r3
 80008e2:	43d9      	mvns	r1, r3
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008e8:	4313      	orrs	r3, r2
         );
}
 80008ea:	4618      	mov	r0, r3
 80008ec:	3724      	adds	r7, #36	; 0x24
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bc80      	pop	{r7}
 80008f2:	4770      	bx	lr

080008f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008fc:	6878      	ldr	r0, [r7, #4]
 80008fe:	f7ff ff4f 	bl	80007a0 <__NVIC_SetPriorityGrouping>
}
 8000902:	bf00      	nop
 8000904:	3708      	adds	r7, #8
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}

0800090a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800090a:	b580      	push	{r7, lr}
 800090c:	b086      	sub	sp, #24
 800090e:	af00      	add	r7, sp, #0
 8000910:	4603      	mov	r3, r0
 8000912:	60b9      	str	r1, [r7, #8]
 8000914:	607a      	str	r2, [r7, #4]
 8000916:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000918:	2300      	movs	r3, #0
 800091a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800091c:	f7ff ff64 	bl	80007e8 <__NVIC_GetPriorityGrouping>
 8000920:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000922:	687a      	ldr	r2, [r7, #4]
 8000924:	68b9      	ldr	r1, [r7, #8]
 8000926:	6978      	ldr	r0, [r7, #20]
 8000928:	f7ff ffb2 	bl	8000890 <NVIC_EncodePriority>
 800092c:	4602      	mov	r2, r0
 800092e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000932:	4611      	mov	r1, r2
 8000934:	4618      	mov	r0, r3
 8000936:	f7ff ff81 	bl	800083c <__NVIC_SetPriority>
}
 800093a:	bf00      	nop
 800093c:	3718      	adds	r7, #24
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}

08000942 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000942:	b580      	push	{r7, lr}
 8000944:	b082      	sub	sp, #8
 8000946:	af00      	add	r7, sp, #0
 8000948:	4603      	mov	r3, r0
 800094a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800094c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000950:	4618      	mov	r0, r3
 8000952:	f7ff ff57 	bl	8000804 <__NVIC_EnableIRQ>
}
 8000956:	bf00      	nop
 8000958:	3708      	adds	r7, #8
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
	...

08000960 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8000960:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000962:	b087      	sub	sp, #28
 8000964:	af00      	add	r7, sp, #0
 8000966:	60f8      	str	r0, [r7, #12]
 8000968:	60b9      	str	r1, [r7, #8]
 800096a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800096e:	2301      	movs	r3, #1
 8000970:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8000972:	2300      	movs	r3, #0
 8000974:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8000976:	2300      	movs	r3, #0
 8000978:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800097a:	4b2f      	ldr	r3, [pc, #188]	; (8000a38 <HAL_FLASH_Program+0xd8>)
 800097c:	7e1b      	ldrb	r3, [r3, #24]
 800097e:	2b01      	cmp	r3, #1
 8000980:	d101      	bne.n	8000986 <HAL_FLASH_Program+0x26>
 8000982:	2302      	movs	r3, #2
 8000984:	e054      	b.n	8000a30 <HAL_FLASH_Program+0xd0>
 8000986:	4b2c      	ldr	r3, [pc, #176]	; (8000a38 <HAL_FLASH_Program+0xd8>)
 8000988:	2201      	movs	r2, #1
 800098a:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800098c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000990:	f000 f8b2 	bl	8000af8 <FLASH_WaitForLastOperation>
 8000994:	4603      	mov	r3, r0
 8000996:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8000998:	7dfb      	ldrb	r3, [r7, #23]
 800099a:	2b00      	cmp	r3, #0
 800099c:	d144      	bne.n	8000a28 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800099e:	68fb      	ldr	r3, [r7, #12]
 80009a0:	2b01      	cmp	r3, #1
 80009a2:	d102      	bne.n	80009aa <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 80009a4:	2301      	movs	r3, #1
 80009a6:	757b      	strb	r3, [r7, #21]
 80009a8:	e007      	b.n	80009ba <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80009aa:	68fb      	ldr	r3, [r7, #12]
 80009ac:	2b02      	cmp	r3, #2
 80009ae:	d102      	bne.n	80009b6 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 80009b0:	2302      	movs	r3, #2
 80009b2:	757b      	strb	r3, [r7, #21]
 80009b4:	e001      	b.n	80009ba <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 80009b6:	2304      	movs	r3, #4
 80009b8:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 80009ba:	2300      	movs	r3, #0
 80009bc:	75bb      	strb	r3, [r7, #22]
 80009be:	e02d      	b.n	8000a1c <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80009c0:	7dbb      	ldrb	r3, [r7, #22]
 80009c2:	005a      	lsls	r2, r3, #1
 80009c4:	68bb      	ldr	r3, [r7, #8]
 80009c6:	eb02 0c03 	add.w	ip, r2, r3
 80009ca:	7dbb      	ldrb	r3, [r7, #22]
 80009cc:	0119      	lsls	r1, r3, #4
 80009ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 80009d2:	f1c1 0620 	rsb	r6, r1, #32
 80009d6:	f1a1 0020 	sub.w	r0, r1, #32
 80009da:	fa22 f401 	lsr.w	r4, r2, r1
 80009de:	fa03 f606 	lsl.w	r6, r3, r6
 80009e2:	4334      	orrs	r4, r6
 80009e4:	fa23 f000 	lsr.w	r0, r3, r0
 80009e8:	4304      	orrs	r4, r0
 80009ea:	fa23 f501 	lsr.w	r5, r3, r1
 80009ee:	b2a3      	uxth	r3, r4
 80009f0:	4619      	mov	r1, r3
 80009f2:	4660      	mov	r0, ip
 80009f4:	f000 f864 	bl	8000ac0 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80009f8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80009fc:	f000 f87c 	bl	8000af8 <FLASH_WaitForLastOperation>
 8000a00:	4603      	mov	r3, r0
 8000a02:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8000a04:	4b0d      	ldr	r3, [pc, #52]	; (8000a3c <HAL_FLASH_Program+0xdc>)
 8000a06:	691b      	ldr	r3, [r3, #16]
 8000a08:	4a0c      	ldr	r2, [pc, #48]	; (8000a3c <HAL_FLASH_Program+0xdc>)
 8000a0a:	f023 0301 	bic.w	r3, r3, #1
 8000a0e:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8000a10:	7dfb      	ldrb	r3, [r7, #23]
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d107      	bne.n	8000a26 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8000a16:	7dbb      	ldrb	r3, [r7, #22]
 8000a18:	3301      	adds	r3, #1
 8000a1a:	75bb      	strb	r3, [r7, #22]
 8000a1c:	7dba      	ldrb	r2, [r7, #22]
 8000a1e:	7d7b      	ldrb	r3, [r7, #21]
 8000a20:	429a      	cmp	r2, r3
 8000a22:	d3cd      	bcc.n	80009c0 <HAL_FLASH_Program+0x60>
 8000a24:	e000      	b.n	8000a28 <HAL_FLASH_Program+0xc8>
      {
        break;
 8000a26:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8000a28:	4b03      	ldr	r3, [pc, #12]	; (8000a38 <HAL_FLASH_Program+0xd8>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	761a      	strb	r2, [r3, #24]

  return status;
 8000a2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000a30:	4618      	mov	r0, r3
 8000a32:	371c      	adds	r7, #28
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a38:	20000368 	.word	0x20000368
 8000a3c:	40022000 	.word	0x40022000

08000a40 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	b083      	sub	sp, #12
 8000a44:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8000a46:	2300      	movs	r3, #0
 8000a48:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000a4a:	4b0d      	ldr	r3, [pc, #52]	; (8000a80 <HAL_FLASH_Unlock+0x40>)
 8000a4c:	691b      	ldr	r3, [r3, #16]
 8000a4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d00d      	beq.n	8000a72 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8000a56:	4b0a      	ldr	r3, [pc, #40]	; (8000a80 <HAL_FLASH_Unlock+0x40>)
 8000a58:	4a0a      	ldr	r2, [pc, #40]	; (8000a84 <HAL_FLASH_Unlock+0x44>)
 8000a5a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8000a5c:	4b08      	ldr	r3, [pc, #32]	; (8000a80 <HAL_FLASH_Unlock+0x40>)
 8000a5e:	4a0a      	ldr	r2, [pc, #40]	; (8000a88 <HAL_FLASH_Unlock+0x48>)
 8000a60:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000a62:	4b07      	ldr	r3, [pc, #28]	; (8000a80 <HAL_FLASH_Unlock+0x40>)
 8000a64:	691b      	ldr	r3, [r3, #16]
 8000a66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8000a6e:	2301      	movs	r3, #1
 8000a70:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8000a72:	79fb      	ldrb	r3, [r7, #7]
}
 8000a74:	4618      	mov	r0, r3
 8000a76:	370c      	adds	r7, #12
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bc80      	pop	{r7}
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop
 8000a80:	40022000 	.word	0x40022000
 8000a84:	45670123 	.word	0x45670123
 8000a88:	cdef89ab 	.word	0xcdef89ab

08000a8c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8000a90:	4b05      	ldr	r3, [pc, #20]	; (8000aa8 <HAL_FLASH_Lock+0x1c>)
 8000a92:	691b      	ldr	r3, [r3, #16]
 8000a94:	4a04      	ldr	r2, [pc, #16]	; (8000aa8 <HAL_FLASH_Lock+0x1c>)
 8000a96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a9a:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8000a9c:	2300      	movs	r3, #0
}
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bc80      	pop	{r7}
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop
 8000aa8:	40022000 	.word	0x40022000

08000aac <HAL_FLASH_GetError>:
  * @brief  Get the specific FLASH error flag.
  * @retval FLASH_ErrorCode The returned value can be:
  *            @ref FLASH_Error_Codes
  */
uint32_t HAL_FLASH_GetError(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 8000ab0:	4b02      	ldr	r3, [pc, #8]	; (8000abc <HAL_FLASH_GetError+0x10>)
 8000ab2:	69db      	ldr	r3, [r3, #28]
}
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bc80      	pop	{r7}
 8000aba:	4770      	bx	lr
 8000abc:	20000368 	.word	0x20000368

08000ac0 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b083      	sub	sp, #12
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
 8000ac8:	460b      	mov	r3, r1
 8000aca:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000acc:	4b08      	ldr	r3, [pc, #32]	; (8000af0 <FLASH_Program_HalfWord+0x30>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8000ad2:	4b08      	ldr	r3, [pc, #32]	; (8000af4 <FLASH_Program_HalfWord+0x34>)
 8000ad4:	691b      	ldr	r3, [r3, #16]
 8000ad6:	4a07      	ldr	r2, [pc, #28]	; (8000af4 <FLASH_Program_HalfWord+0x34>)
 8000ad8:	f043 0301 	orr.w	r3, r3, #1
 8000adc:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	887a      	ldrh	r2, [r7, #2]
 8000ae2:	801a      	strh	r2, [r3, #0]
}
 8000ae4:	bf00      	nop
 8000ae6:	370c      	adds	r7, #12
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bc80      	pop	{r7}
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop
 8000af0:	20000368 	.word	0x20000368
 8000af4:	40022000 	.word	0x40022000

08000af8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b084      	sub	sp, #16
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8000b00:	f7ff fe44 	bl	800078c <HAL_GetTick>
 8000b04:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000b06:	e010      	b.n	8000b2a <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b0e:	d00c      	beq.n	8000b2a <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d007      	beq.n	8000b26 <FLASH_WaitForLastOperation+0x2e>
 8000b16:	f7ff fe39 	bl	800078c <HAL_GetTick>
 8000b1a:	4602      	mov	r2, r0
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	1ad3      	subs	r3, r2, r3
 8000b20:	687a      	ldr	r2, [r7, #4]
 8000b22:	429a      	cmp	r2, r3
 8000b24:	d201      	bcs.n	8000b2a <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8000b26:	2303      	movs	r3, #3
 8000b28:	e025      	b.n	8000b76 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000b2a:	4b15      	ldr	r3, [pc, #84]	; (8000b80 <FLASH_WaitForLastOperation+0x88>)
 8000b2c:	68db      	ldr	r3, [r3, #12]
 8000b2e:	f003 0301 	and.w	r3, r3, #1
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d1e8      	bne.n	8000b08 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8000b36:	4b12      	ldr	r3, [pc, #72]	; (8000b80 <FLASH_WaitForLastOperation+0x88>)
 8000b38:	68db      	ldr	r3, [r3, #12]
 8000b3a:	f003 0320 	and.w	r3, r3, #32
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d002      	beq.n	8000b48 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8000b42:	4b0f      	ldr	r3, [pc, #60]	; (8000b80 <FLASH_WaitForLastOperation+0x88>)
 8000b44:	2220      	movs	r2, #32
 8000b46:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000b48:	4b0d      	ldr	r3, [pc, #52]	; (8000b80 <FLASH_WaitForLastOperation+0x88>)
 8000b4a:	68db      	ldr	r3, [r3, #12]
 8000b4c:	f003 0310 	and.w	r3, r3, #16
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d10b      	bne.n	8000b6c <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8000b54:	4b0a      	ldr	r3, [pc, #40]	; (8000b80 <FLASH_WaitForLastOperation+0x88>)
 8000b56:	69db      	ldr	r3, [r3, #28]
 8000b58:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d105      	bne.n	8000b6c <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000b60:	4b07      	ldr	r3, [pc, #28]	; (8000b80 <FLASH_WaitForLastOperation+0x88>)
 8000b62:	68db      	ldr	r3, [r3, #12]
 8000b64:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d003      	beq.n	8000b74 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8000b6c:	f000 f80a 	bl	8000b84 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8000b70:	2301      	movs	r3, #1
 8000b72:	e000      	b.n	8000b76 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8000b74:	2300      	movs	r3, #0
}
 8000b76:	4618      	mov	r0, r3
 8000b78:	3710      	adds	r7, #16
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	40022000 	.word	0x40022000

08000b84 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b083      	sub	sp, #12
 8000b88:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8000b8e:	4b23      	ldr	r3, [pc, #140]	; (8000c1c <FLASH_SetErrorCode+0x98>)
 8000b90:	68db      	ldr	r3, [r3, #12]
 8000b92:	f003 0310 	and.w	r3, r3, #16
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d009      	beq.n	8000bae <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8000b9a:	4b21      	ldr	r3, [pc, #132]	; (8000c20 <FLASH_SetErrorCode+0x9c>)
 8000b9c:	69db      	ldr	r3, [r3, #28]
 8000b9e:	f043 0302 	orr.w	r3, r3, #2
 8000ba2:	4a1f      	ldr	r2, [pc, #124]	; (8000c20 <FLASH_SetErrorCode+0x9c>)
 8000ba4:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	f043 0310 	orr.w	r3, r3, #16
 8000bac:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000bae:	4b1b      	ldr	r3, [pc, #108]	; (8000c1c <FLASH_SetErrorCode+0x98>)
 8000bb0:	68db      	ldr	r3, [r3, #12]
 8000bb2:	f003 0304 	and.w	r3, r3, #4
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d009      	beq.n	8000bce <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8000bba:	4b19      	ldr	r3, [pc, #100]	; (8000c20 <FLASH_SetErrorCode+0x9c>)
 8000bbc:	69db      	ldr	r3, [r3, #28]
 8000bbe:	f043 0301 	orr.w	r3, r3, #1
 8000bc2:	4a17      	ldr	r2, [pc, #92]	; (8000c20 <FLASH_SetErrorCode+0x9c>)
 8000bc4:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	f043 0304 	orr.w	r3, r3, #4
 8000bcc:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8000bce:	4b13      	ldr	r3, [pc, #76]	; (8000c1c <FLASH_SetErrorCode+0x98>)
 8000bd0:	69db      	ldr	r3, [r3, #28]
 8000bd2:	f003 0301 	and.w	r3, r3, #1
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d00b      	beq.n	8000bf2 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8000bda:	4b11      	ldr	r3, [pc, #68]	; (8000c20 <FLASH_SetErrorCode+0x9c>)
 8000bdc:	69db      	ldr	r3, [r3, #28]
 8000bde:	f043 0304 	orr.w	r3, r3, #4
 8000be2:	4a0f      	ldr	r2, [pc, #60]	; (8000c20 <FLASH_SetErrorCode+0x9c>)
 8000be4:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8000be6:	4b0d      	ldr	r3, [pc, #52]	; (8000c1c <FLASH_SetErrorCode+0x98>)
 8000be8:	69db      	ldr	r3, [r3, #28]
 8000bea:	4a0c      	ldr	r2, [pc, #48]	; (8000c1c <FLASH_SetErrorCode+0x98>)
 8000bec:	f023 0301 	bic.w	r3, r3, #1
 8000bf0:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	f240 1201 	movw	r2, #257	; 0x101
 8000bf8:	4293      	cmp	r3, r2
 8000bfa:	d106      	bne.n	8000c0a <FLASH_SetErrorCode+0x86>
 8000bfc:	4b07      	ldr	r3, [pc, #28]	; (8000c1c <FLASH_SetErrorCode+0x98>)
 8000bfe:	69db      	ldr	r3, [r3, #28]
 8000c00:	4a06      	ldr	r2, [pc, #24]	; (8000c1c <FLASH_SetErrorCode+0x98>)
 8000c02:	f023 0301 	bic.w	r3, r3, #1
 8000c06:	61d3      	str	r3, [r2, #28]
}  
 8000c08:	e002      	b.n	8000c10 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8000c0a:	4a04      	ldr	r2, [pc, #16]	; (8000c1c <FLASH_SetErrorCode+0x98>)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	60d3      	str	r3, [r2, #12]
}  
 8000c10:	bf00      	nop
 8000c12:	370c      	adds	r7, #12
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bc80      	pop	{r7}
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop
 8000c1c:	40022000 	.word	0x40022000
 8000c20:	20000368 	.word	0x20000368

08000c24 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b084      	sub	sp, #16
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
 8000c2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000c2e:	2301      	movs	r3, #1
 8000c30:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8000c32:	2300      	movs	r3, #0
 8000c34:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000c36:	4b2f      	ldr	r3, [pc, #188]	; (8000cf4 <HAL_FLASHEx_Erase+0xd0>)
 8000c38:	7e1b      	ldrb	r3, [r3, #24]
 8000c3a:	2b01      	cmp	r3, #1
 8000c3c:	d101      	bne.n	8000c42 <HAL_FLASHEx_Erase+0x1e>
 8000c3e:	2302      	movs	r3, #2
 8000c40:	e053      	b.n	8000cea <HAL_FLASHEx_Erase+0xc6>
 8000c42:	4b2c      	ldr	r3, [pc, #176]	; (8000cf4 <HAL_FLASHEx_Erase+0xd0>)
 8000c44:	2201      	movs	r2, #1
 8000c46:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	2b02      	cmp	r3, #2
 8000c4e:	d116      	bne.n	8000c7e <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8000c50:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000c54:	f7ff ff50 	bl	8000af8 <FLASH_WaitForLastOperation>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d141      	bne.n	8000ce2 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8000c5e:	2001      	movs	r0, #1
 8000c60:	f000 f84c 	bl	8000cfc <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000c64:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000c68:	f7ff ff46 	bl	8000af8 <FLASH_WaitForLastOperation>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8000c70:	4b21      	ldr	r3, [pc, #132]	; (8000cf8 <HAL_FLASHEx_Erase+0xd4>)
 8000c72:	691b      	ldr	r3, [r3, #16]
 8000c74:	4a20      	ldr	r2, [pc, #128]	; (8000cf8 <HAL_FLASHEx_Erase+0xd4>)
 8000c76:	f023 0304 	bic.w	r3, r3, #4
 8000c7a:	6113      	str	r3, [r2, #16]
 8000c7c:	e031      	b.n	8000ce2 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8000c7e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000c82:	f7ff ff39 	bl	8000af8 <FLASH_WaitForLastOperation>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d12a      	bne.n	8000ce2 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	f04f 32ff 	mov.w	r2, #4294967295
 8000c92:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	689b      	ldr	r3, [r3, #8]
 8000c98:	60bb      	str	r3, [r7, #8]
 8000c9a:	e019      	b.n	8000cd0 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8000c9c:	68b8      	ldr	r0, [r7, #8]
 8000c9e:	f000 f849 	bl	8000d34 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000ca2:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000ca6:	f7ff ff27 	bl	8000af8 <FLASH_WaitForLastOperation>
 8000caa:	4603      	mov	r3, r0
 8000cac:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8000cae:	4b12      	ldr	r3, [pc, #72]	; (8000cf8 <HAL_FLASHEx_Erase+0xd4>)
 8000cb0:	691b      	ldr	r3, [r3, #16]
 8000cb2:	4a11      	ldr	r2, [pc, #68]	; (8000cf8 <HAL_FLASHEx_Erase+0xd4>)
 8000cb4:	f023 0302 	bic.w	r3, r3, #2
 8000cb8:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8000cba:	7bfb      	ldrb	r3, [r7, #15]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d003      	beq.n	8000cc8 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	68ba      	ldr	r2, [r7, #8]
 8000cc4:	601a      	str	r2, [r3, #0]
            break;
 8000cc6:	e00c      	b.n	8000ce2 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8000cc8:	68bb      	ldr	r3, [r7, #8]
 8000cca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000cce:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	68db      	ldr	r3, [r3, #12]
 8000cd4:	029a      	lsls	r2, r3, #10
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	689b      	ldr	r3, [r3, #8]
 8000cda:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 8000cdc:	68ba      	ldr	r2, [r7, #8]
 8000cde:	429a      	cmp	r2, r3
 8000ce0:	d3dc      	bcc.n	8000c9c <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8000ce2:	4b04      	ldr	r3, [pc, #16]	; (8000cf4 <HAL_FLASHEx_Erase+0xd0>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	761a      	strb	r2, [r3, #24]

  return status;
 8000ce8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	3710      	adds	r7, #16
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	20000368 	.word	0x20000368
 8000cf8:	40022000 	.word	0x40022000

08000cfc <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b083      	sub	sp, #12
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000d04:	4b09      	ldr	r3, [pc, #36]	; (8000d2c <FLASH_MassErase+0x30>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8000d0a:	4b09      	ldr	r3, [pc, #36]	; (8000d30 <FLASH_MassErase+0x34>)
 8000d0c:	691b      	ldr	r3, [r3, #16]
 8000d0e:	4a08      	ldr	r2, [pc, #32]	; (8000d30 <FLASH_MassErase+0x34>)
 8000d10:	f043 0304 	orr.w	r3, r3, #4
 8000d14:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8000d16:	4b06      	ldr	r3, [pc, #24]	; (8000d30 <FLASH_MassErase+0x34>)
 8000d18:	691b      	ldr	r3, [r3, #16]
 8000d1a:	4a05      	ldr	r2, [pc, #20]	; (8000d30 <FLASH_MassErase+0x34>)
 8000d1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d20:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8000d22:	bf00      	nop
 8000d24:	370c      	adds	r7, #12
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bc80      	pop	{r7}
 8000d2a:	4770      	bx	lr
 8000d2c:	20000368 	.word	0x20000368
 8000d30:	40022000 	.word	0x40022000

08000d34 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b083      	sub	sp, #12
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000d3c:	4b0b      	ldr	r3, [pc, #44]	; (8000d6c <FLASH_PageErase+0x38>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8000d42:	4b0b      	ldr	r3, [pc, #44]	; (8000d70 <FLASH_PageErase+0x3c>)
 8000d44:	691b      	ldr	r3, [r3, #16]
 8000d46:	4a0a      	ldr	r2, [pc, #40]	; (8000d70 <FLASH_PageErase+0x3c>)
 8000d48:	f043 0302 	orr.w	r3, r3, #2
 8000d4c:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8000d4e:	4a08      	ldr	r2, [pc, #32]	; (8000d70 <FLASH_PageErase+0x3c>)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8000d54:	4b06      	ldr	r3, [pc, #24]	; (8000d70 <FLASH_PageErase+0x3c>)
 8000d56:	691b      	ldr	r3, [r3, #16]
 8000d58:	4a05      	ldr	r2, [pc, #20]	; (8000d70 <FLASH_PageErase+0x3c>)
 8000d5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d5e:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8000d60:	bf00      	nop
 8000d62:	370c      	adds	r7, #12
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bc80      	pop	{r7}
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	20000368 	.word	0x20000368
 8000d70:	40022000 	.word	0x40022000

08000d74 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b086      	sub	sp, #24
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d101      	bne.n	8000d86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000d82:	2301      	movs	r3, #1
 8000d84:	e26c      	b.n	8001260 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	f003 0301 	and.w	r3, r3, #1
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	f000 8087 	beq.w	8000ea2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000d94:	4b92      	ldr	r3, [pc, #584]	; (8000fe0 <HAL_RCC_OscConfig+0x26c>)
 8000d96:	685b      	ldr	r3, [r3, #4]
 8000d98:	f003 030c 	and.w	r3, r3, #12
 8000d9c:	2b04      	cmp	r3, #4
 8000d9e:	d00c      	beq.n	8000dba <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000da0:	4b8f      	ldr	r3, [pc, #572]	; (8000fe0 <HAL_RCC_OscConfig+0x26c>)
 8000da2:	685b      	ldr	r3, [r3, #4]
 8000da4:	f003 030c 	and.w	r3, r3, #12
 8000da8:	2b08      	cmp	r3, #8
 8000daa:	d112      	bne.n	8000dd2 <HAL_RCC_OscConfig+0x5e>
 8000dac:	4b8c      	ldr	r3, [pc, #560]	; (8000fe0 <HAL_RCC_OscConfig+0x26c>)
 8000dae:	685b      	ldr	r3, [r3, #4]
 8000db0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000db4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000db8:	d10b      	bne.n	8000dd2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000dba:	4b89      	ldr	r3, [pc, #548]	; (8000fe0 <HAL_RCC_OscConfig+0x26c>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d06c      	beq.n	8000ea0 <HAL_RCC_OscConfig+0x12c>
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	685b      	ldr	r3, [r3, #4]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d168      	bne.n	8000ea0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000dce:	2301      	movs	r3, #1
 8000dd0:	e246      	b.n	8001260 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000dda:	d106      	bne.n	8000dea <HAL_RCC_OscConfig+0x76>
 8000ddc:	4b80      	ldr	r3, [pc, #512]	; (8000fe0 <HAL_RCC_OscConfig+0x26c>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4a7f      	ldr	r2, [pc, #508]	; (8000fe0 <HAL_RCC_OscConfig+0x26c>)
 8000de2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000de6:	6013      	str	r3, [r2, #0]
 8000de8:	e02e      	b.n	8000e48 <HAL_RCC_OscConfig+0xd4>
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	685b      	ldr	r3, [r3, #4]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d10c      	bne.n	8000e0c <HAL_RCC_OscConfig+0x98>
 8000df2:	4b7b      	ldr	r3, [pc, #492]	; (8000fe0 <HAL_RCC_OscConfig+0x26c>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	4a7a      	ldr	r2, [pc, #488]	; (8000fe0 <HAL_RCC_OscConfig+0x26c>)
 8000df8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000dfc:	6013      	str	r3, [r2, #0]
 8000dfe:	4b78      	ldr	r3, [pc, #480]	; (8000fe0 <HAL_RCC_OscConfig+0x26c>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	4a77      	ldr	r2, [pc, #476]	; (8000fe0 <HAL_RCC_OscConfig+0x26c>)
 8000e04:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e08:	6013      	str	r3, [r2, #0]
 8000e0a:	e01d      	b.n	8000e48 <HAL_RCC_OscConfig+0xd4>
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000e14:	d10c      	bne.n	8000e30 <HAL_RCC_OscConfig+0xbc>
 8000e16:	4b72      	ldr	r3, [pc, #456]	; (8000fe0 <HAL_RCC_OscConfig+0x26c>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	4a71      	ldr	r2, [pc, #452]	; (8000fe0 <HAL_RCC_OscConfig+0x26c>)
 8000e1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e20:	6013      	str	r3, [r2, #0]
 8000e22:	4b6f      	ldr	r3, [pc, #444]	; (8000fe0 <HAL_RCC_OscConfig+0x26c>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	4a6e      	ldr	r2, [pc, #440]	; (8000fe0 <HAL_RCC_OscConfig+0x26c>)
 8000e28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e2c:	6013      	str	r3, [r2, #0]
 8000e2e:	e00b      	b.n	8000e48 <HAL_RCC_OscConfig+0xd4>
 8000e30:	4b6b      	ldr	r3, [pc, #428]	; (8000fe0 <HAL_RCC_OscConfig+0x26c>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a6a      	ldr	r2, [pc, #424]	; (8000fe0 <HAL_RCC_OscConfig+0x26c>)
 8000e36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e3a:	6013      	str	r3, [r2, #0]
 8000e3c:	4b68      	ldr	r3, [pc, #416]	; (8000fe0 <HAL_RCC_OscConfig+0x26c>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4a67      	ldr	r2, [pc, #412]	; (8000fe0 <HAL_RCC_OscConfig+0x26c>)
 8000e42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e46:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d013      	beq.n	8000e78 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e50:	f7ff fc9c 	bl	800078c <HAL_GetTick>
 8000e54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e56:	e008      	b.n	8000e6a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e58:	f7ff fc98 	bl	800078c <HAL_GetTick>
 8000e5c:	4602      	mov	r2, r0
 8000e5e:	693b      	ldr	r3, [r7, #16]
 8000e60:	1ad3      	subs	r3, r2, r3
 8000e62:	2b64      	cmp	r3, #100	; 0x64
 8000e64:	d901      	bls.n	8000e6a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000e66:	2303      	movs	r3, #3
 8000e68:	e1fa      	b.n	8001260 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e6a:	4b5d      	ldr	r3, [pc, #372]	; (8000fe0 <HAL_RCC_OscConfig+0x26c>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d0f0      	beq.n	8000e58 <HAL_RCC_OscConfig+0xe4>
 8000e76:	e014      	b.n	8000ea2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e78:	f7ff fc88 	bl	800078c <HAL_GetTick>
 8000e7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e7e:	e008      	b.n	8000e92 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e80:	f7ff fc84 	bl	800078c <HAL_GetTick>
 8000e84:	4602      	mov	r2, r0
 8000e86:	693b      	ldr	r3, [r7, #16]
 8000e88:	1ad3      	subs	r3, r2, r3
 8000e8a:	2b64      	cmp	r3, #100	; 0x64
 8000e8c:	d901      	bls.n	8000e92 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000e8e:	2303      	movs	r3, #3
 8000e90:	e1e6      	b.n	8001260 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e92:	4b53      	ldr	r3, [pc, #332]	; (8000fe0 <HAL_RCC_OscConfig+0x26c>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d1f0      	bne.n	8000e80 <HAL_RCC_OscConfig+0x10c>
 8000e9e:	e000      	b.n	8000ea2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ea0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	f003 0302 	and.w	r3, r3, #2
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d063      	beq.n	8000f76 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000eae:	4b4c      	ldr	r3, [pc, #304]	; (8000fe0 <HAL_RCC_OscConfig+0x26c>)
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	f003 030c 	and.w	r3, r3, #12
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d00b      	beq.n	8000ed2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000eba:	4b49      	ldr	r3, [pc, #292]	; (8000fe0 <HAL_RCC_OscConfig+0x26c>)
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	f003 030c 	and.w	r3, r3, #12
 8000ec2:	2b08      	cmp	r3, #8
 8000ec4:	d11c      	bne.n	8000f00 <HAL_RCC_OscConfig+0x18c>
 8000ec6:	4b46      	ldr	r3, [pc, #280]	; (8000fe0 <HAL_RCC_OscConfig+0x26c>)
 8000ec8:	685b      	ldr	r3, [r3, #4]
 8000eca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d116      	bne.n	8000f00 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ed2:	4b43      	ldr	r3, [pc, #268]	; (8000fe0 <HAL_RCC_OscConfig+0x26c>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	f003 0302 	and.w	r3, r3, #2
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d005      	beq.n	8000eea <HAL_RCC_OscConfig+0x176>
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	691b      	ldr	r3, [r3, #16]
 8000ee2:	2b01      	cmp	r3, #1
 8000ee4:	d001      	beq.n	8000eea <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	e1ba      	b.n	8001260 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000eea:	4b3d      	ldr	r3, [pc, #244]	; (8000fe0 <HAL_RCC_OscConfig+0x26c>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	695b      	ldr	r3, [r3, #20]
 8000ef6:	00db      	lsls	r3, r3, #3
 8000ef8:	4939      	ldr	r1, [pc, #228]	; (8000fe0 <HAL_RCC_OscConfig+0x26c>)
 8000efa:	4313      	orrs	r3, r2
 8000efc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000efe:	e03a      	b.n	8000f76 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	691b      	ldr	r3, [r3, #16]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d020      	beq.n	8000f4a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f08:	4b36      	ldr	r3, [pc, #216]	; (8000fe4 <HAL_RCC_OscConfig+0x270>)
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f0e:	f7ff fc3d 	bl	800078c <HAL_GetTick>
 8000f12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f14:	e008      	b.n	8000f28 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f16:	f7ff fc39 	bl	800078c <HAL_GetTick>
 8000f1a:	4602      	mov	r2, r0
 8000f1c:	693b      	ldr	r3, [r7, #16]
 8000f1e:	1ad3      	subs	r3, r2, r3
 8000f20:	2b02      	cmp	r3, #2
 8000f22:	d901      	bls.n	8000f28 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000f24:	2303      	movs	r3, #3
 8000f26:	e19b      	b.n	8001260 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f28:	4b2d      	ldr	r3, [pc, #180]	; (8000fe0 <HAL_RCC_OscConfig+0x26c>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f003 0302 	and.w	r3, r3, #2
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d0f0      	beq.n	8000f16 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f34:	4b2a      	ldr	r3, [pc, #168]	; (8000fe0 <HAL_RCC_OscConfig+0x26c>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	695b      	ldr	r3, [r3, #20]
 8000f40:	00db      	lsls	r3, r3, #3
 8000f42:	4927      	ldr	r1, [pc, #156]	; (8000fe0 <HAL_RCC_OscConfig+0x26c>)
 8000f44:	4313      	orrs	r3, r2
 8000f46:	600b      	str	r3, [r1, #0]
 8000f48:	e015      	b.n	8000f76 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f4a:	4b26      	ldr	r3, [pc, #152]	; (8000fe4 <HAL_RCC_OscConfig+0x270>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f50:	f7ff fc1c 	bl	800078c <HAL_GetTick>
 8000f54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f56:	e008      	b.n	8000f6a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f58:	f7ff fc18 	bl	800078c <HAL_GetTick>
 8000f5c:	4602      	mov	r2, r0
 8000f5e:	693b      	ldr	r3, [r7, #16]
 8000f60:	1ad3      	subs	r3, r2, r3
 8000f62:	2b02      	cmp	r3, #2
 8000f64:	d901      	bls.n	8000f6a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000f66:	2303      	movs	r3, #3
 8000f68:	e17a      	b.n	8001260 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f6a:	4b1d      	ldr	r3, [pc, #116]	; (8000fe0 <HAL_RCC_OscConfig+0x26c>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f003 0302 	and.w	r3, r3, #2
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d1f0      	bne.n	8000f58 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	f003 0308 	and.w	r3, r3, #8
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d03a      	beq.n	8000ff8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	699b      	ldr	r3, [r3, #24]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d019      	beq.n	8000fbe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f8a:	4b17      	ldr	r3, [pc, #92]	; (8000fe8 <HAL_RCC_OscConfig+0x274>)
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f90:	f7ff fbfc 	bl	800078c <HAL_GetTick>
 8000f94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f96:	e008      	b.n	8000faa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f98:	f7ff fbf8 	bl	800078c <HAL_GetTick>
 8000f9c:	4602      	mov	r2, r0
 8000f9e:	693b      	ldr	r3, [r7, #16]
 8000fa0:	1ad3      	subs	r3, r2, r3
 8000fa2:	2b02      	cmp	r3, #2
 8000fa4:	d901      	bls.n	8000faa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000fa6:	2303      	movs	r3, #3
 8000fa8:	e15a      	b.n	8001260 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000faa:	4b0d      	ldr	r3, [pc, #52]	; (8000fe0 <HAL_RCC_OscConfig+0x26c>)
 8000fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fae:	f003 0302 	and.w	r3, r3, #2
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d0f0      	beq.n	8000f98 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000fb6:	2001      	movs	r0, #1
 8000fb8:	f000 fae8 	bl	800158c <RCC_Delay>
 8000fbc:	e01c      	b.n	8000ff8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000fbe:	4b0a      	ldr	r3, [pc, #40]	; (8000fe8 <HAL_RCC_OscConfig+0x274>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fc4:	f7ff fbe2 	bl	800078c <HAL_GetTick>
 8000fc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fca:	e00f      	b.n	8000fec <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000fcc:	f7ff fbde 	bl	800078c <HAL_GetTick>
 8000fd0:	4602      	mov	r2, r0
 8000fd2:	693b      	ldr	r3, [r7, #16]
 8000fd4:	1ad3      	subs	r3, r2, r3
 8000fd6:	2b02      	cmp	r3, #2
 8000fd8:	d908      	bls.n	8000fec <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000fda:	2303      	movs	r3, #3
 8000fdc:	e140      	b.n	8001260 <HAL_RCC_OscConfig+0x4ec>
 8000fde:	bf00      	nop
 8000fe0:	40021000 	.word	0x40021000
 8000fe4:	42420000 	.word	0x42420000
 8000fe8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fec:	4b9e      	ldr	r3, [pc, #632]	; (8001268 <HAL_RCC_OscConfig+0x4f4>)
 8000fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ff0:	f003 0302 	and.w	r3, r3, #2
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d1e9      	bne.n	8000fcc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f003 0304 	and.w	r3, r3, #4
 8001000:	2b00      	cmp	r3, #0
 8001002:	f000 80a6 	beq.w	8001152 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001006:	2300      	movs	r3, #0
 8001008:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800100a:	4b97      	ldr	r3, [pc, #604]	; (8001268 <HAL_RCC_OscConfig+0x4f4>)
 800100c:	69db      	ldr	r3, [r3, #28]
 800100e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001012:	2b00      	cmp	r3, #0
 8001014:	d10d      	bne.n	8001032 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001016:	4b94      	ldr	r3, [pc, #592]	; (8001268 <HAL_RCC_OscConfig+0x4f4>)
 8001018:	69db      	ldr	r3, [r3, #28]
 800101a:	4a93      	ldr	r2, [pc, #588]	; (8001268 <HAL_RCC_OscConfig+0x4f4>)
 800101c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001020:	61d3      	str	r3, [r2, #28]
 8001022:	4b91      	ldr	r3, [pc, #580]	; (8001268 <HAL_RCC_OscConfig+0x4f4>)
 8001024:	69db      	ldr	r3, [r3, #28]
 8001026:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800102a:	60bb      	str	r3, [r7, #8]
 800102c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800102e:	2301      	movs	r3, #1
 8001030:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001032:	4b8e      	ldr	r3, [pc, #568]	; (800126c <HAL_RCC_OscConfig+0x4f8>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800103a:	2b00      	cmp	r3, #0
 800103c:	d118      	bne.n	8001070 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800103e:	4b8b      	ldr	r3, [pc, #556]	; (800126c <HAL_RCC_OscConfig+0x4f8>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	4a8a      	ldr	r2, [pc, #552]	; (800126c <HAL_RCC_OscConfig+0x4f8>)
 8001044:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001048:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800104a:	f7ff fb9f 	bl	800078c <HAL_GetTick>
 800104e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001050:	e008      	b.n	8001064 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001052:	f7ff fb9b 	bl	800078c <HAL_GetTick>
 8001056:	4602      	mov	r2, r0
 8001058:	693b      	ldr	r3, [r7, #16]
 800105a:	1ad3      	subs	r3, r2, r3
 800105c:	2b64      	cmp	r3, #100	; 0x64
 800105e:	d901      	bls.n	8001064 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001060:	2303      	movs	r3, #3
 8001062:	e0fd      	b.n	8001260 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001064:	4b81      	ldr	r3, [pc, #516]	; (800126c <HAL_RCC_OscConfig+0x4f8>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800106c:	2b00      	cmp	r3, #0
 800106e:	d0f0      	beq.n	8001052 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	68db      	ldr	r3, [r3, #12]
 8001074:	2b01      	cmp	r3, #1
 8001076:	d106      	bne.n	8001086 <HAL_RCC_OscConfig+0x312>
 8001078:	4b7b      	ldr	r3, [pc, #492]	; (8001268 <HAL_RCC_OscConfig+0x4f4>)
 800107a:	6a1b      	ldr	r3, [r3, #32]
 800107c:	4a7a      	ldr	r2, [pc, #488]	; (8001268 <HAL_RCC_OscConfig+0x4f4>)
 800107e:	f043 0301 	orr.w	r3, r3, #1
 8001082:	6213      	str	r3, [r2, #32]
 8001084:	e02d      	b.n	80010e2 <HAL_RCC_OscConfig+0x36e>
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	68db      	ldr	r3, [r3, #12]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d10c      	bne.n	80010a8 <HAL_RCC_OscConfig+0x334>
 800108e:	4b76      	ldr	r3, [pc, #472]	; (8001268 <HAL_RCC_OscConfig+0x4f4>)
 8001090:	6a1b      	ldr	r3, [r3, #32]
 8001092:	4a75      	ldr	r2, [pc, #468]	; (8001268 <HAL_RCC_OscConfig+0x4f4>)
 8001094:	f023 0301 	bic.w	r3, r3, #1
 8001098:	6213      	str	r3, [r2, #32]
 800109a:	4b73      	ldr	r3, [pc, #460]	; (8001268 <HAL_RCC_OscConfig+0x4f4>)
 800109c:	6a1b      	ldr	r3, [r3, #32]
 800109e:	4a72      	ldr	r2, [pc, #456]	; (8001268 <HAL_RCC_OscConfig+0x4f4>)
 80010a0:	f023 0304 	bic.w	r3, r3, #4
 80010a4:	6213      	str	r3, [r2, #32]
 80010a6:	e01c      	b.n	80010e2 <HAL_RCC_OscConfig+0x36e>
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	68db      	ldr	r3, [r3, #12]
 80010ac:	2b05      	cmp	r3, #5
 80010ae:	d10c      	bne.n	80010ca <HAL_RCC_OscConfig+0x356>
 80010b0:	4b6d      	ldr	r3, [pc, #436]	; (8001268 <HAL_RCC_OscConfig+0x4f4>)
 80010b2:	6a1b      	ldr	r3, [r3, #32]
 80010b4:	4a6c      	ldr	r2, [pc, #432]	; (8001268 <HAL_RCC_OscConfig+0x4f4>)
 80010b6:	f043 0304 	orr.w	r3, r3, #4
 80010ba:	6213      	str	r3, [r2, #32]
 80010bc:	4b6a      	ldr	r3, [pc, #424]	; (8001268 <HAL_RCC_OscConfig+0x4f4>)
 80010be:	6a1b      	ldr	r3, [r3, #32]
 80010c0:	4a69      	ldr	r2, [pc, #420]	; (8001268 <HAL_RCC_OscConfig+0x4f4>)
 80010c2:	f043 0301 	orr.w	r3, r3, #1
 80010c6:	6213      	str	r3, [r2, #32]
 80010c8:	e00b      	b.n	80010e2 <HAL_RCC_OscConfig+0x36e>
 80010ca:	4b67      	ldr	r3, [pc, #412]	; (8001268 <HAL_RCC_OscConfig+0x4f4>)
 80010cc:	6a1b      	ldr	r3, [r3, #32]
 80010ce:	4a66      	ldr	r2, [pc, #408]	; (8001268 <HAL_RCC_OscConfig+0x4f4>)
 80010d0:	f023 0301 	bic.w	r3, r3, #1
 80010d4:	6213      	str	r3, [r2, #32]
 80010d6:	4b64      	ldr	r3, [pc, #400]	; (8001268 <HAL_RCC_OscConfig+0x4f4>)
 80010d8:	6a1b      	ldr	r3, [r3, #32]
 80010da:	4a63      	ldr	r2, [pc, #396]	; (8001268 <HAL_RCC_OscConfig+0x4f4>)
 80010dc:	f023 0304 	bic.w	r3, r3, #4
 80010e0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	68db      	ldr	r3, [r3, #12]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d015      	beq.n	8001116 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010ea:	f7ff fb4f 	bl	800078c <HAL_GetTick>
 80010ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010f0:	e00a      	b.n	8001108 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010f2:	f7ff fb4b 	bl	800078c <HAL_GetTick>
 80010f6:	4602      	mov	r2, r0
 80010f8:	693b      	ldr	r3, [r7, #16]
 80010fa:	1ad3      	subs	r3, r2, r3
 80010fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001100:	4293      	cmp	r3, r2
 8001102:	d901      	bls.n	8001108 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001104:	2303      	movs	r3, #3
 8001106:	e0ab      	b.n	8001260 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001108:	4b57      	ldr	r3, [pc, #348]	; (8001268 <HAL_RCC_OscConfig+0x4f4>)
 800110a:	6a1b      	ldr	r3, [r3, #32]
 800110c:	f003 0302 	and.w	r3, r3, #2
 8001110:	2b00      	cmp	r3, #0
 8001112:	d0ee      	beq.n	80010f2 <HAL_RCC_OscConfig+0x37e>
 8001114:	e014      	b.n	8001140 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001116:	f7ff fb39 	bl	800078c <HAL_GetTick>
 800111a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800111c:	e00a      	b.n	8001134 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800111e:	f7ff fb35 	bl	800078c <HAL_GetTick>
 8001122:	4602      	mov	r2, r0
 8001124:	693b      	ldr	r3, [r7, #16]
 8001126:	1ad3      	subs	r3, r2, r3
 8001128:	f241 3288 	movw	r2, #5000	; 0x1388
 800112c:	4293      	cmp	r3, r2
 800112e:	d901      	bls.n	8001134 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001130:	2303      	movs	r3, #3
 8001132:	e095      	b.n	8001260 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001134:	4b4c      	ldr	r3, [pc, #304]	; (8001268 <HAL_RCC_OscConfig+0x4f4>)
 8001136:	6a1b      	ldr	r3, [r3, #32]
 8001138:	f003 0302 	and.w	r3, r3, #2
 800113c:	2b00      	cmp	r3, #0
 800113e:	d1ee      	bne.n	800111e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001140:	7dfb      	ldrb	r3, [r7, #23]
 8001142:	2b01      	cmp	r3, #1
 8001144:	d105      	bne.n	8001152 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001146:	4b48      	ldr	r3, [pc, #288]	; (8001268 <HAL_RCC_OscConfig+0x4f4>)
 8001148:	69db      	ldr	r3, [r3, #28]
 800114a:	4a47      	ldr	r2, [pc, #284]	; (8001268 <HAL_RCC_OscConfig+0x4f4>)
 800114c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001150:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	69db      	ldr	r3, [r3, #28]
 8001156:	2b00      	cmp	r3, #0
 8001158:	f000 8081 	beq.w	800125e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800115c:	4b42      	ldr	r3, [pc, #264]	; (8001268 <HAL_RCC_OscConfig+0x4f4>)
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	f003 030c 	and.w	r3, r3, #12
 8001164:	2b08      	cmp	r3, #8
 8001166:	d061      	beq.n	800122c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	69db      	ldr	r3, [r3, #28]
 800116c:	2b02      	cmp	r3, #2
 800116e:	d146      	bne.n	80011fe <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001170:	4b3f      	ldr	r3, [pc, #252]	; (8001270 <HAL_RCC_OscConfig+0x4fc>)
 8001172:	2200      	movs	r2, #0
 8001174:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001176:	f7ff fb09 	bl	800078c <HAL_GetTick>
 800117a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800117c:	e008      	b.n	8001190 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800117e:	f7ff fb05 	bl	800078c <HAL_GetTick>
 8001182:	4602      	mov	r2, r0
 8001184:	693b      	ldr	r3, [r7, #16]
 8001186:	1ad3      	subs	r3, r2, r3
 8001188:	2b02      	cmp	r3, #2
 800118a:	d901      	bls.n	8001190 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800118c:	2303      	movs	r3, #3
 800118e:	e067      	b.n	8001260 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001190:	4b35      	ldr	r3, [pc, #212]	; (8001268 <HAL_RCC_OscConfig+0x4f4>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001198:	2b00      	cmp	r3, #0
 800119a:	d1f0      	bne.n	800117e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6a1b      	ldr	r3, [r3, #32]
 80011a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011a4:	d108      	bne.n	80011b8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80011a6:	4b30      	ldr	r3, [pc, #192]	; (8001268 <HAL_RCC_OscConfig+0x4f4>)
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	689b      	ldr	r3, [r3, #8]
 80011b2:	492d      	ldr	r1, [pc, #180]	; (8001268 <HAL_RCC_OscConfig+0x4f4>)
 80011b4:	4313      	orrs	r3, r2
 80011b6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80011b8:	4b2b      	ldr	r3, [pc, #172]	; (8001268 <HAL_RCC_OscConfig+0x4f4>)
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	6a19      	ldr	r1, [r3, #32]
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011c8:	430b      	orrs	r3, r1
 80011ca:	4927      	ldr	r1, [pc, #156]	; (8001268 <HAL_RCC_OscConfig+0x4f4>)
 80011cc:	4313      	orrs	r3, r2
 80011ce:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80011d0:	4b27      	ldr	r3, [pc, #156]	; (8001270 <HAL_RCC_OscConfig+0x4fc>)
 80011d2:	2201      	movs	r2, #1
 80011d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011d6:	f7ff fad9 	bl	800078c <HAL_GetTick>
 80011da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80011dc:	e008      	b.n	80011f0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011de:	f7ff fad5 	bl	800078c <HAL_GetTick>
 80011e2:	4602      	mov	r2, r0
 80011e4:	693b      	ldr	r3, [r7, #16]
 80011e6:	1ad3      	subs	r3, r2, r3
 80011e8:	2b02      	cmp	r3, #2
 80011ea:	d901      	bls.n	80011f0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80011ec:	2303      	movs	r3, #3
 80011ee:	e037      	b.n	8001260 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80011f0:	4b1d      	ldr	r3, [pc, #116]	; (8001268 <HAL_RCC_OscConfig+0x4f4>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d0f0      	beq.n	80011de <HAL_RCC_OscConfig+0x46a>
 80011fc:	e02f      	b.n	800125e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011fe:	4b1c      	ldr	r3, [pc, #112]	; (8001270 <HAL_RCC_OscConfig+0x4fc>)
 8001200:	2200      	movs	r2, #0
 8001202:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001204:	f7ff fac2 	bl	800078c <HAL_GetTick>
 8001208:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800120a:	e008      	b.n	800121e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800120c:	f7ff fabe 	bl	800078c <HAL_GetTick>
 8001210:	4602      	mov	r2, r0
 8001212:	693b      	ldr	r3, [r7, #16]
 8001214:	1ad3      	subs	r3, r2, r3
 8001216:	2b02      	cmp	r3, #2
 8001218:	d901      	bls.n	800121e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800121a:	2303      	movs	r3, #3
 800121c:	e020      	b.n	8001260 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800121e:	4b12      	ldr	r3, [pc, #72]	; (8001268 <HAL_RCC_OscConfig+0x4f4>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001226:	2b00      	cmp	r3, #0
 8001228:	d1f0      	bne.n	800120c <HAL_RCC_OscConfig+0x498>
 800122a:	e018      	b.n	800125e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	69db      	ldr	r3, [r3, #28]
 8001230:	2b01      	cmp	r3, #1
 8001232:	d101      	bne.n	8001238 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001234:	2301      	movs	r3, #1
 8001236:	e013      	b.n	8001260 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001238:	4b0b      	ldr	r3, [pc, #44]	; (8001268 <HAL_RCC_OscConfig+0x4f4>)
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	6a1b      	ldr	r3, [r3, #32]
 8001248:	429a      	cmp	r2, r3
 800124a:	d106      	bne.n	800125a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001256:	429a      	cmp	r2, r3
 8001258:	d001      	beq.n	800125e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800125a:	2301      	movs	r3, #1
 800125c:	e000      	b.n	8001260 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800125e:	2300      	movs	r3, #0
}
 8001260:	4618      	mov	r0, r3
 8001262:	3718      	adds	r7, #24
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	40021000 	.word	0x40021000
 800126c:	40007000 	.word	0x40007000
 8001270:	42420060 	.word	0x42420060

08001274 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b084      	sub	sp, #16
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
 800127c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d101      	bne.n	8001288 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001284:	2301      	movs	r3, #1
 8001286:	e0d0      	b.n	800142a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001288:	4b6a      	ldr	r3, [pc, #424]	; (8001434 <HAL_RCC_ClockConfig+0x1c0>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f003 0307 	and.w	r3, r3, #7
 8001290:	683a      	ldr	r2, [r7, #0]
 8001292:	429a      	cmp	r2, r3
 8001294:	d910      	bls.n	80012b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001296:	4b67      	ldr	r3, [pc, #412]	; (8001434 <HAL_RCC_ClockConfig+0x1c0>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f023 0207 	bic.w	r2, r3, #7
 800129e:	4965      	ldr	r1, [pc, #404]	; (8001434 <HAL_RCC_ClockConfig+0x1c0>)
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	4313      	orrs	r3, r2
 80012a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80012a6:	4b63      	ldr	r3, [pc, #396]	; (8001434 <HAL_RCC_ClockConfig+0x1c0>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f003 0307 	and.w	r3, r3, #7
 80012ae:	683a      	ldr	r2, [r7, #0]
 80012b0:	429a      	cmp	r2, r3
 80012b2:	d001      	beq.n	80012b8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80012b4:	2301      	movs	r3, #1
 80012b6:	e0b8      	b.n	800142a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f003 0302 	and.w	r3, r3, #2
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d020      	beq.n	8001306 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f003 0304 	and.w	r3, r3, #4
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d005      	beq.n	80012dc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80012d0:	4b59      	ldr	r3, [pc, #356]	; (8001438 <HAL_RCC_ClockConfig+0x1c4>)
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	4a58      	ldr	r2, [pc, #352]	; (8001438 <HAL_RCC_ClockConfig+0x1c4>)
 80012d6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80012da:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f003 0308 	and.w	r3, r3, #8
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d005      	beq.n	80012f4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80012e8:	4b53      	ldr	r3, [pc, #332]	; (8001438 <HAL_RCC_ClockConfig+0x1c4>)
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	4a52      	ldr	r2, [pc, #328]	; (8001438 <HAL_RCC_ClockConfig+0x1c4>)
 80012ee:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80012f2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80012f4:	4b50      	ldr	r3, [pc, #320]	; (8001438 <HAL_RCC_ClockConfig+0x1c4>)
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	689b      	ldr	r3, [r3, #8]
 8001300:	494d      	ldr	r1, [pc, #308]	; (8001438 <HAL_RCC_ClockConfig+0x1c4>)
 8001302:	4313      	orrs	r3, r2
 8001304:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f003 0301 	and.w	r3, r3, #1
 800130e:	2b00      	cmp	r3, #0
 8001310:	d040      	beq.n	8001394 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	2b01      	cmp	r3, #1
 8001318:	d107      	bne.n	800132a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800131a:	4b47      	ldr	r3, [pc, #284]	; (8001438 <HAL_RCC_ClockConfig+0x1c4>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001322:	2b00      	cmp	r3, #0
 8001324:	d115      	bne.n	8001352 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001326:	2301      	movs	r3, #1
 8001328:	e07f      	b.n	800142a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	2b02      	cmp	r3, #2
 8001330:	d107      	bne.n	8001342 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001332:	4b41      	ldr	r3, [pc, #260]	; (8001438 <HAL_RCC_ClockConfig+0x1c4>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800133a:	2b00      	cmp	r3, #0
 800133c:	d109      	bne.n	8001352 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800133e:	2301      	movs	r3, #1
 8001340:	e073      	b.n	800142a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001342:	4b3d      	ldr	r3, [pc, #244]	; (8001438 <HAL_RCC_ClockConfig+0x1c4>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f003 0302 	and.w	r3, r3, #2
 800134a:	2b00      	cmp	r3, #0
 800134c:	d101      	bne.n	8001352 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800134e:	2301      	movs	r3, #1
 8001350:	e06b      	b.n	800142a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001352:	4b39      	ldr	r3, [pc, #228]	; (8001438 <HAL_RCC_ClockConfig+0x1c4>)
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	f023 0203 	bic.w	r2, r3, #3
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	4936      	ldr	r1, [pc, #216]	; (8001438 <HAL_RCC_ClockConfig+0x1c4>)
 8001360:	4313      	orrs	r3, r2
 8001362:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001364:	f7ff fa12 	bl	800078c <HAL_GetTick>
 8001368:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800136a:	e00a      	b.n	8001382 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800136c:	f7ff fa0e 	bl	800078c <HAL_GetTick>
 8001370:	4602      	mov	r2, r0
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	1ad3      	subs	r3, r2, r3
 8001376:	f241 3288 	movw	r2, #5000	; 0x1388
 800137a:	4293      	cmp	r3, r2
 800137c:	d901      	bls.n	8001382 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800137e:	2303      	movs	r3, #3
 8001380:	e053      	b.n	800142a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001382:	4b2d      	ldr	r3, [pc, #180]	; (8001438 <HAL_RCC_ClockConfig+0x1c4>)
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	f003 020c 	and.w	r2, r3, #12
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	009b      	lsls	r3, r3, #2
 8001390:	429a      	cmp	r2, r3
 8001392:	d1eb      	bne.n	800136c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001394:	4b27      	ldr	r3, [pc, #156]	; (8001434 <HAL_RCC_ClockConfig+0x1c0>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f003 0307 	and.w	r3, r3, #7
 800139c:	683a      	ldr	r2, [r7, #0]
 800139e:	429a      	cmp	r2, r3
 80013a0:	d210      	bcs.n	80013c4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013a2:	4b24      	ldr	r3, [pc, #144]	; (8001434 <HAL_RCC_ClockConfig+0x1c0>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f023 0207 	bic.w	r2, r3, #7
 80013aa:	4922      	ldr	r1, [pc, #136]	; (8001434 <HAL_RCC_ClockConfig+0x1c0>)
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	4313      	orrs	r3, r2
 80013b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80013b2:	4b20      	ldr	r3, [pc, #128]	; (8001434 <HAL_RCC_ClockConfig+0x1c0>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f003 0307 	and.w	r3, r3, #7
 80013ba:	683a      	ldr	r2, [r7, #0]
 80013bc:	429a      	cmp	r2, r3
 80013be:	d001      	beq.n	80013c4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80013c0:	2301      	movs	r3, #1
 80013c2:	e032      	b.n	800142a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f003 0304 	and.w	r3, r3, #4
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d008      	beq.n	80013e2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80013d0:	4b19      	ldr	r3, [pc, #100]	; (8001438 <HAL_RCC_ClockConfig+0x1c4>)
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	68db      	ldr	r3, [r3, #12]
 80013dc:	4916      	ldr	r1, [pc, #88]	; (8001438 <HAL_RCC_ClockConfig+0x1c4>)
 80013de:	4313      	orrs	r3, r2
 80013e0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f003 0308 	and.w	r3, r3, #8
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d009      	beq.n	8001402 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80013ee:	4b12      	ldr	r3, [pc, #72]	; (8001438 <HAL_RCC_ClockConfig+0x1c4>)
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	691b      	ldr	r3, [r3, #16]
 80013fa:	00db      	lsls	r3, r3, #3
 80013fc:	490e      	ldr	r1, [pc, #56]	; (8001438 <HAL_RCC_ClockConfig+0x1c4>)
 80013fe:	4313      	orrs	r3, r2
 8001400:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001402:	f000 f821 	bl	8001448 <HAL_RCC_GetSysClockFreq>
 8001406:	4602      	mov	r2, r0
 8001408:	4b0b      	ldr	r3, [pc, #44]	; (8001438 <HAL_RCC_ClockConfig+0x1c4>)
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	091b      	lsrs	r3, r3, #4
 800140e:	f003 030f 	and.w	r3, r3, #15
 8001412:	490a      	ldr	r1, [pc, #40]	; (800143c <HAL_RCC_ClockConfig+0x1c8>)
 8001414:	5ccb      	ldrb	r3, [r1, r3]
 8001416:	fa22 f303 	lsr.w	r3, r2, r3
 800141a:	4a09      	ldr	r2, [pc, #36]	; (8001440 <HAL_RCC_ClockConfig+0x1cc>)
 800141c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800141e:	4b09      	ldr	r3, [pc, #36]	; (8001444 <HAL_RCC_ClockConfig+0x1d0>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4618      	mov	r0, r3
 8001424:	f7ff f8b2 	bl	800058c <HAL_InitTick>

  return HAL_OK;
 8001428:	2300      	movs	r3, #0
}
 800142a:	4618      	mov	r0, r3
 800142c:	3710      	adds	r7, #16
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	40022000 	.word	0x40022000
 8001438:	40021000 	.word	0x40021000
 800143c:	08004344 	.word	0x08004344
 8001440:	20000000 	.word	0x20000000
 8001444:	20000004 	.word	0x20000004

08001448 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001448:	b480      	push	{r7}
 800144a:	b087      	sub	sp, #28
 800144c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800144e:	2300      	movs	r3, #0
 8001450:	60fb      	str	r3, [r7, #12]
 8001452:	2300      	movs	r3, #0
 8001454:	60bb      	str	r3, [r7, #8]
 8001456:	2300      	movs	r3, #0
 8001458:	617b      	str	r3, [r7, #20]
 800145a:	2300      	movs	r3, #0
 800145c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800145e:	2300      	movs	r3, #0
 8001460:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001462:	4b1e      	ldr	r3, [pc, #120]	; (80014dc <HAL_RCC_GetSysClockFreq+0x94>)
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	f003 030c 	and.w	r3, r3, #12
 800146e:	2b04      	cmp	r3, #4
 8001470:	d002      	beq.n	8001478 <HAL_RCC_GetSysClockFreq+0x30>
 8001472:	2b08      	cmp	r3, #8
 8001474:	d003      	beq.n	800147e <HAL_RCC_GetSysClockFreq+0x36>
 8001476:	e027      	b.n	80014c8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001478:	4b19      	ldr	r3, [pc, #100]	; (80014e0 <HAL_RCC_GetSysClockFreq+0x98>)
 800147a:	613b      	str	r3, [r7, #16]
      break;
 800147c:	e027      	b.n	80014ce <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	0c9b      	lsrs	r3, r3, #18
 8001482:	f003 030f 	and.w	r3, r3, #15
 8001486:	4a17      	ldr	r2, [pc, #92]	; (80014e4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001488:	5cd3      	ldrb	r3, [r2, r3]
 800148a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001492:	2b00      	cmp	r3, #0
 8001494:	d010      	beq.n	80014b8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001496:	4b11      	ldr	r3, [pc, #68]	; (80014dc <HAL_RCC_GetSysClockFreq+0x94>)
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	0c5b      	lsrs	r3, r3, #17
 800149c:	f003 0301 	and.w	r3, r3, #1
 80014a0:	4a11      	ldr	r2, [pc, #68]	; (80014e8 <HAL_RCC_GetSysClockFreq+0xa0>)
 80014a2:	5cd3      	ldrb	r3, [r2, r3]
 80014a4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	4a0d      	ldr	r2, [pc, #52]	; (80014e0 <HAL_RCC_GetSysClockFreq+0x98>)
 80014aa:	fb02 f203 	mul.w	r2, r2, r3
 80014ae:	68bb      	ldr	r3, [r7, #8]
 80014b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80014b4:	617b      	str	r3, [r7, #20]
 80014b6:	e004      	b.n	80014c2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	4a0c      	ldr	r2, [pc, #48]	; (80014ec <HAL_RCC_GetSysClockFreq+0xa4>)
 80014bc:	fb02 f303 	mul.w	r3, r2, r3
 80014c0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	613b      	str	r3, [r7, #16]
      break;
 80014c6:	e002      	b.n	80014ce <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80014c8:	4b05      	ldr	r3, [pc, #20]	; (80014e0 <HAL_RCC_GetSysClockFreq+0x98>)
 80014ca:	613b      	str	r3, [r7, #16]
      break;
 80014cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80014ce:	693b      	ldr	r3, [r7, #16]
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	371c      	adds	r7, #28
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bc80      	pop	{r7}
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop
 80014dc:	40021000 	.word	0x40021000
 80014e0:	007a1200 	.word	0x007a1200
 80014e4:	0800435c 	.word	0x0800435c
 80014e8:	0800436c 	.word	0x0800436c
 80014ec:	003d0900 	.word	0x003d0900

080014f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80014f4:	4b02      	ldr	r3, [pc, #8]	; (8001500 <HAL_RCC_GetHCLKFreq+0x10>)
 80014f6:	681b      	ldr	r3, [r3, #0]
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bc80      	pop	{r7}
 80014fe:	4770      	bx	lr
 8001500:	20000000 	.word	0x20000000

08001504 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001508:	f7ff fff2 	bl	80014f0 <HAL_RCC_GetHCLKFreq>
 800150c:	4602      	mov	r2, r0
 800150e:	4b05      	ldr	r3, [pc, #20]	; (8001524 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	0adb      	lsrs	r3, r3, #11
 8001514:	f003 0307 	and.w	r3, r3, #7
 8001518:	4903      	ldr	r1, [pc, #12]	; (8001528 <HAL_RCC_GetPCLK2Freq+0x24>)
 800151a:	5ccb      	ldrb	r3, [r1, r3]
 800151c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001520:	4618      	mov	r0, r3
 8001522:	bd80      	pop	{r7, pc}
 8001524:	40021000 	.word	0x40021000
 8001528:	08004354 	.word	0x08004354

0800152c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800152c:	b480      	push	{r7}
 800152e:	b083      	sub	sp, #12
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
 8001534:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	220f      	movs	r2, #15
 800153a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800153c:	4b11      	ldr	r3, [pc, #68]	; (8001584 <HAL_RCC_GetClockConfig+0x58>)
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	f003 0203 	and.w	r2, r3, #3
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001548:	4b0e      	ldr	r3, [pc, #56]	; (8001584 <HAL_RCC_GetClockConfig+0x58>)
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001554:	4b0b      	ldr	r3, [pc, #44]	; (8001584 <HAL_RCC_GetClockConfig+0x58>)
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001560:	4b08      	ldr	r3, [pc, #32]	; (8001584 <HAL_RCC_GetClockConfig+0x58>)
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	08db      	lsrs	r3, r3, #3
 8001566:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800156e:	4b06      	ldr	r3, [pc, #24]	; (8001588 <HAL_RCC_GetClockConfig+0x5c>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f003 0207 	and.w	r2, r3, #7
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800157a:	bf00      	nop
 800157c:	370c      	adds	r7, #12
 800157e:	46bd      	mov	sp, r7
 8001580:	bc80      	pop	{r7}
 8001582:	4770      	bx	lr
 8001584:	40021000 	.word	0x40021000
 8001588:	40022000 	.word	0x40022000

0800158c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800158c:	b480      	push	{r7}
 800158e:	b085      	sub	sp, #20
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001594:	4b0a      	ldr	r3, [pc, #40]	; (80015c0 <RCC_Delay+0x34>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a0a      	ldr	r2, [pc, #40]	; (80015c4 <RCC_Delay+0x38>)
 800159a:	fba2 2303 	umull	r2, r3, r2, r3
 800159e:	0a5b      	lsrs	r3, r3, #9
 80015a0:	687a      	ldr	r2, [r7, #4]
 80015a2:	fb02 f303 	mul.w	r3, r2, r3
 80015a6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80015a8:	bf00      	nop
  }
  while (Delay --);
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	1e5a      	subs	r2, r3, #1
 80015ae:	60fa      	str	r2, [r7, #12]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d1f9      	bne.n	80015a8 <RCC_Delay+0x1c>
}
 80015b4:	bf00      	nop
 80015b6:	bf00      	nop
 80015b8:	3714      	adds	r7, #20
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bc80      	pop	{r7}
 80015be:	4770      	bx	lr
 80015c0:	20000000 	.word	0x20000000
 80015c4:	10624dd3 	.word	0x10624dd3

080015c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d101      	bne.n	80015da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80015d6:	2301      	movs	r3, #1
 80015d8:	e041      	b.n	800165e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80015e0:	b2db      	uxtb	r3, r3
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d106      	bne.n	80015f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2200      	movs	r2, #0
 80015ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80015ee:	6878      	ldr	r0, [r7, #4]
 80015f0:	f000 f839 	bl	8001666 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2202      	movs	r2, #2
 80015f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	3304      	adds	r3, #4
 8001604:	4619      	mov	r1, r3
 8001606:	4610      	mov	r0, r2
 8001608:	f000 f9b4 	bl	8001974 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2201      	movs	r2, #1
 8001610:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2201      	movs	r2, #1
 8001618:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2201      	movs	r2, #1
 8001620:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2201      	movs	r2, #1
 8001628:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2201      	movs	r2, #1
 8001630:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2201      	movs	r2, #1
 8001638:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2201      	movs	r2, #1
 8001640:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2201      	movs	r2, #1
 8001648:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2201      	movs	r2, #1
 8001650:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2201      	movs	r2, #1
 8001658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800165c:	2300      	movs	r3, #0
}
 800165e:	4618      	mov	r0, r3
 8001660:	3708      	adds	r7, #8
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}

08001666 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001666:	b480      	push	{r7}
 8001668:	b083      	sub	sp, #12
 800166a:	af00      	add	r7, sp, #0
 800166c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800166e:	bf00      	nop
 8001670:	370c      	adds	r7, #12
 8001672:	46bd      	mov	sp, r7
 8001674:	bc80      	pop	{r7}
 8001676:	4770      	bx	lr

08001678 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001678:	b480      	push	{r7}
 800167a:	b085      	sub	sp, #20
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001686:	b2db      	uxtb	r3, r3
 8001688:	2b01      	cmp	r3, #1
 800168a:	d001      	beq.n	8001690 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800168c:	2301      	movs	r3, #1
 800168e:	e03a      	b.n	8001706 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2202      	movs	r2, #2
 8001694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	68da      	ldr	r2, [r3, #12]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f042 0201 	orr.w	r2, r2, #1
 80016a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a18      	ldr	r2, [pc, #96]	; (8001710 <HAL_TIM_Base_Start_IT+0x98>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d00e      	beq.n	80016d0 <HAL_TIM_Base_Start_IT+0x58>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016ba:	d009      	beq.n	80016d0 <HAL_TIM_Base_Start_IT+0x58>
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a14      	ldr	r2, [pc, #80]	; (8001714 <HAL_TIM_Base_Start_IT+0x9c>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d004      	beq.n	80016d0 <HAL_TIM_Base_Start_IT+0x58>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4a13      	ldr	r2, [pc, #76]	; (8001718 <HAL_TIM_Base_Start_IT+0xa0>)
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d111      	bne.n	80016f4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	689b      	ldr	r3, [r3, #8]
 80016d6:	f003 0307 	and.w	r3, r3, #7
 80016da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	2b06      	cmp	r3, #6
 80016e0:	d010      	beq.n	8001704 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f042 0201 	orr.w	r2, r2, #1
 80016f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80016f2:	e007      	b.n	8001704 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	681a      	ldr	r2, [r3, #0]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f042 0201 	orr.w	r2, r2, #1
 8001702:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001704:	2300      	movs	r3, #0
}
 8001706:	4618      	mov	r0, r3
 8001708:	3714      	adds	r7, #20
 800170a:	46bd      	mov	sp, r7
 800170c:	bc80      	pop	{r7}
 800170e:	4770      	bx	lr
 8001710:	40012c00 	.word	0x40012c00
 8001714:	40000400 	.word	0x40000400
 8001718:	40000800 	.word	0x40000800

0800171c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	691b      	ldr	r3, [r3, #16]
 800172a:	f003 0302 	and.w	r3, r3, #2
 800172e:	2b02      	cmp	r3, #2
 8001730:	d122      	bne.n	8001778 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	68db      	ldr	r3, [r3, #12]
 8001738:	f003 0302 	and.w	r3, r3, #2
 800173c:	2b02      	cmp	r3, #2
 800173e:	d11b      	bne.n	8001778 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f06f 0202 	mvn.w	r2, #2
 8001748:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2201      	movs	r2, #1
 800174e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	699b      	ldr	r3, [r3, #24]
 8001756:	f003 0303 	and.w	r3, r3, #3
 800175a:	2b00      	cmp	r3, #0
 800175c:	d003      	beq.n	8001766 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800175e:	6878      	ldr	r0, [r7, #4]
 8001760:	f000 f8ed 	bl	800193e <HAL_TIM_IC_CaptureCallback>
 8001764:	e005      	b.n	8001772 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001766:	6878      	ldr	r0, [r7, #4]
 8001768:	f000 f8e0 	bl	800192c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800176c:	6878      	ldr	r0, [r7, #4]
 800176e:	f000 f8ef 	bl	8001950 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2200      	movs	r2, #0
 8001776:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	691b      	ldr	r3, [r3, #16]
 800177e:	f003 0304 	and.w	r3, r3, #4
 8001782:	2b04      	cmp	r3, #4
 8001784:	d122      	bne.n	80017cc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	68db      	ldr	r3, [r3, #12]
 800178c:	f003 0304 	and.w	r3, r3, #4
 8001790:	2b04      	cmp	r3, #4
 8001792:	d11b      	bne.n	80017cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f06f 0204 	mvn.w	r2, #4
 800179c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2202      	movs	r2, #2
 80017a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	699b      	ldr	r3, [r3, #24]
 80017aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d003      	beq.n	80017ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80017b2:	6878      	ldr	r0, [r7, #4]
 80017b4:	f000 f8c3 	bl	800193e <HAL_TIM_IC_CaptureCallback>
 80017b8:	e005      	b.n	80017c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80017ba:	6878      	ldr	r0, [r7, #4]
 80017bc:	f000 f8b6 	bl	800192c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80017c0:	6878      	ldr	r0, [r7, #4]
 80017c2:	f000 f8c5 	bl	8001950 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2200      	movs	r2, #0
 80017ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	691b      	ldr	r3, [r3, #16]
 80017d2:	f003 0308 	and.w	r3, r3, #8
 80017d6:	2b08      	cmp	r3, #8
 80017d8:	d122      	bne.n	8001820 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	68db      	ldr	r3, [r3, #12]
 80017e0:	f003 0308 	and.w	r3, r3, #8
 80017e4:	2b08      	cmp	r3, #8
 80017e6:	d11b      	bne.n	8001820 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f06f 0208 	mvn.w	r2, #8
 80017f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2204      	movs	r2, #4
 80017f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	69db      	ldr	r3, [r3, #28]
 80017fe:	f003 0303 	and.w	r3, r3, #3
 8001802:	2b00      	cmp	r3, #0
 8001804:	d003      	beq.n	800180e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001806:	6878      	ldr	r0, [r7, #4]
 8001808:	f000 f899 	bl	800193e <HAL_TIM_IC_CaptureCallback>
 800180c:	e005      	b.n	800181a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800180e:	6878      	ldr	r0, [r7, #4]
 8001810:	f000 f88c 	bl	800192c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001814:	6878      	ldr	r0, [r7, #4]
 8001816:	f000 f89b 	bl	8001950 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2200      	movs	r2, #0
 800181e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	691b      	ldr	r3, [r3, #16]
 8001826:	f003 0310 	and.w	r3, r3, #16
 800182a:	2b10      	cmp	r3, #16
 800182c:	d122      	bne.n	8001874 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	68db      	ldr	r3, [r3, #12]
 8001834:	f003 0310 	and.w	r3, r3, #16
 8001838:	2b10      	cmp	r3, #16
 800183a:	d11b      	bne.n	8001874 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f06f 0210 	mvn.w	r2, #16
 8001844:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2208      	movs	r2, #8
 800184a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	69db      	ldr	r3, [r3, #28]
 8001852:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001856:	2b00      	cmp	r3, #0
 8001858:	d003      	beq.n	8001862 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800185a:	6878      	ldr	r0, [r7, #4]
 800185c:	f000 f86f 	bl	800193e <HAL_TIM_IC_CaptureCallback>
 8001860:	e005      	b.n	800186e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001862:	6878      	ldr	r0, [r7, #4]
 8001864:	f000 f862 	bl	800192c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001868:	6878      	ldr	r0, [r7, #4]
 800186a:	f000 f871 	bl	8001950 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2200      	movs	r2, #0
 8001872:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	691b      	ldr	r3, [r3, #16]
 800187a:	f003 0301 	and.w	r3, r3, #1
 800187e:	2b01      	cmp	r3, #1
 8001880:	d10e      	bne.n	80018a0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	68db      	ldr	r3, [r3, #12]
 8001888:	f003 0301 	and.w	r3, r3, #1
 800188c:	2b01      	cmp	r3, #1
 800188e:	d107      	bne.n	80018a0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f06f 0201 	mvn.w	r2, #1
 8001898:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800189a:	6878      	ldr	r0, [r7, #4]
 800189c:	f7fe fe2c 	bl	80004f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	691b      	ldr	r3, [r3, #16]
 80018a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018aa:	2b80      	cmp	r3, #128	; 0x80
 80018ac:	d10e      	bne.n	80018cc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	68db      	ldr	r3, [r3, #12]
 80018b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018b8:	2b80      	cmp	r3, #128	; 0x80
 80018ba:	d107      	bne.n	80018cc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80018c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80018c6:	6878      	ldr	r0, [r7, #4]
 80018c8:	f000 f8bf 	bl	8001a4a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	691b      	ldr	r3, [r3, #16]
 80018d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018d6:	2b40      	cmp	r3, #64	; 0x40
 80018d8:	d10e      	bne.n	80018f8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	68db      	ldr	r3, [r3, #12]
 80018e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018e4:	2b40      	cmp	r3, #64	; 0x40
 80018e6:	d107      	bne.n	80018f8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80018f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80018f2:	6878      	ldr	r0, [r7, #4]
 80018f4:	f000 f835 	bl	8001962 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	691b      	ldr	r3, [r3, #16]
 80018fe:	f003 0320 	and.w	r3, r3, #32
 8001902:	2b20      	cmp	r3, #32
 8001904:	d10e      	bne.n	8001924 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	68db      	ldr	r3, [r3, #12]
 800190c:	f003 0320 	and.w	r3, r3, #32
 8001910:	2b20      	cmp	r3, #32
 8001912:	d107      	bne.n	8001924 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f06f 0220 	mvn.w	r2, #32
 800191c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800191e:	6878      	ldr	r0, [r7, #4]
 8001920:	f000 f88a 	bl	8001a38 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001924:	bf00      	nop
 8001926:	3708      	adds	r7, #8
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}

0800192c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800192c:	b480      	push	{r7}
 800192e:	b083      	sub	sp, #12
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001934:	bf00      	nop
 8001936:	370c      	adds	r7, #12
 8001938:	46bd      	mov	sp, r7
 800193a:	bc80      	pop	{r7}
 800193c:	4770      	bx	lr

0800193e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800193e:	b480      	push	{r7}
 8001940:	b083      	sub	sp, #12
 8001942:	af00      	add	r7, sp, #0
 8001944:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001946:	bf00      	nop
 8001948:	370c      	adds	r7, #12
 800194a:	46bd      	mov	sp, r7
 800194c:	bc80      	pop	{r7}
 800194e:	4770      	bx	lr

08001950 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001950:	b480      	push	{r7}
 8001952:	b083      	sub	sp, #12
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001958:	bf00      	nop
 800195a:	370c      	adds	r7, #12
 800195c:	46bd      	mov	sp, r7
 800195e:	bc80      	pop	{r7}
 8001960:	4770      	bx	lr

08001962 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001962:	b480      	push	{r7}
 8001964:	b083      	sub	sp, #12
 8001966:	af00      	add	r7, sp, #0
 8001968:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800196a:	bf00      	nop
 800196c:	370c      	adds	r7, #12
 800196e:	46bd      	mov	sp, r7
 8001970:	bc80      	pop	{r7}
 8001972:	4770      	bx	lr

08001974 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001974:	b480      	push	{r7}
 8001976:	b085      	sub	sp, #20
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
 800197c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	4a29      	ldr	r2, [pc, #164]	; (8001a2c <TIM_Base_SetConfig+0xb8>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d00b      	beq.n	80019a4 <TIM_Base_SetConfig+0x30>
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001992:	d007      	beq.n	80019a4 <TIM_Base_SetConfig+0x30>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	4a26      	ldr	r2, [pc, #152]	; (8001a30 <TIM_Base_SetConfig+0xbc>)
 8001998:	4293      	cmp	r3, r2
 800199a:	d003      	beq.n	80019a4 <TIM_Base_SetConfig+0x30>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	4a25      	ldr	r2, [pc, #148]	; (8001a34 <TIM_Base_SetConfig+0xc0>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d108      	bne.n	80019b6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80019aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	68fa      	ldr	r2, [r7, #12]
 80019b2:	4313      	orrs	r3, r2
 80019b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	4a1c      	ldr	r2, [pc, #112]	; (8001a2c <TIM_Base_SetConfig+0xb8>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d00b      	beq.n	80019d6 <TIM_Base_SetConfig+0x62>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019c4:	d007      	beq.n	80019d6 <TIM_Base_SetConfig+0x62>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	4a19      	ldr	r2, [pc, #100]	; (8001a30 <TIM_Base_SetConfig+0xbc>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d003      	beq.n	80019d6 <TIM_Base_SetConfig+0x62>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	4a18      	ldr	r2, [pc, #96]	; (8001a34 <TIM_Base_SetConfig+0xc0>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d108      	bne.n	80019e8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80019dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	68db      	ldr	r3, [r3, #12]
 80019e2:	68fa      	ldr	r2, [r7, #12]
 80019e4:	4313      	orrs	r3, r2
 80019e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	695b      	ldr	r3, [r3, #20]
 80019f2:	4313      	orrs	r3, r2
 80019f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	68fa      	ldr	r2, [r7, #12]
 80019fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	689a      	ldr	r2, [r3, #8]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	4a07      	ldr	r2, [pc, #28]	; (8001a2c <TIM_Base_SetConfig+0xb8>)
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d103      	bne.n	8001a1c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	691a      	ldr	r2, [r3, #16]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2201      	movs	r2, #1
 8001a20:	615a      	str	r2, [r3, #20]
}
 8001a22:	bf00      	nop
 8001a24:	3714      	adds	r7, #20
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bc80      	pop	{r7}
 8001a2a:	4770      	bx	lr
 8001a2c:	40012c00 	.word	0x40012c00
 8001a30:	40000400 	.word	0x40000400
 8001a34:	40000800 	.word	0x40000800

08001a38 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b083      	sub	sp, #12
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001a40:	bf00      	nop
 8001a42:	370c      	adds	r7, #12
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bc80      	pop	{r7}
 8001a48:	4770      	bx	lr

08001a4a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001a4a:	b480      	push	{r7}
 8001a4c:	b083      	sub	sp, #12
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001a52:	bf00      	nop
 8001a54:	370c      	adds	r7, #12
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bc80      	pop	{r7}
 8001a5a:	4770      	bx	lr

08001a5c <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b086      	sub	sp, #24
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
 8001a64:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8001a66:	2301      	movs	r3, #1
 8001a68:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d10a      	bne.n	8001a8a <xQueueGenericReset+0x2e>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8001a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a78:	f383 8811 	msr	BASEPRI, r3
 8001a7c:	f3bf 8f6f 	isb	sy
 8001a80:	f3bf 8f4f 	dsb	sy
 8001a84:	60fb      	str	r3, [r7, #12]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8001a86:	bf00      	nop
 8001a88:	e7fe      	b.n	8001a88 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8001a8a:	693b      	ldr	r3, [r7, #16]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d05d      	beq.n	8001b4c <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d059      	beq.n	8001b4c <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001aa0:	2100      	movs	r1, #0
 8001aa2:	fba3 2302 	umull	r2, r3, r3, r2
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d000      	beq.n	8001aac <xQueueGenericReset+0x50>
 8001aaa:	2101      	movs	r1, #1
 8001aac:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d14c      	bne.n	8001b4c <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 8001ab2:	f002 f975 	bl	8003da0 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001abe:	6939      	ldr	r1, [r7, #16]
 8001ac0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001ac2:	fb01 f303 	mul.w	r3, r1, r3
 8001ac6:	441a      	add	r2, r3
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	2200      	movs	r2, #0
 8001ad0:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	681a      	ldr	r2, [r3, #0]
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ae2:	3b01      	subs	r3, #1
 8001ae4:	6939      	ldr	r1, [r7, #16]
 8001ae6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001ae8:	fb01 f303 	mul.w	r3, r1, r3
 8001aec:	441a      	add	r2, r3
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8001af2:	693b      	ldr	r3, [r7, #16]
 8001af4:	22ff      	movs	r2, #255	; 0xff
 8001af6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	22ff      	movs	r2, #255	; 0xff
 8001afe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d114      	bne.n	8001b32 <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001b08:	693b      	ldr	r3, [r7, #16]
 8001b0a:	691b      	ldr	r3, [r3, #16]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d01a      	beq.n	8001b46 <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	3310      	adds	r3, #16
 8001b14:	4618      	mov	r0, r3
 8001b16:	f001 f98b 	bl	8002e30 <xTaskRemoveFromEventList>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d012      	beq.n	8001b46 <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8001b20:	4b15      	ldr	r3, [pc, #84]	; (8001b78 <xQueueGenericReset+0x11c>)
 8001b22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001b26:	601a      	str	r2, [r3, #0]
 8001b28:	f3bf 8f4f 	dsb	sy
 8001b2c:	f3bf 8f6f 	isb	sy
 8001b30:	e009      	b.n	8001b46 <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	3310      	adds	r3, #16
 8001b36:	4618      	mov	r0, r3
 8001b38:	f001 ffb0 	bl	8003a9c <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	3324      	adds	r3, #36	; 0x24
 8001b40:	4618      	mov	r0, r3
 8001b42:	f001 ffab 	bl	8003a9c <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8001b46:	f002 f95b 	bl	8003e00 <vPortExitCritical>
 8001b4a:	e001      	b.n	8001b50 <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d10a      	bne.n	8001b6c <xQueueGenericReset+0x110>
        __asm volatile
 8001b56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b5a:	f383 8811 	msr	BASEPRI, r3
 8001b5e:	f3bf 8f6f 	isb	sy
 8001b62:	f3bf 8f4f 	dsb	sy
 8001b66:	60bb      	str	r3, [r7, #8]
    }
 8001b68:	bf00      	nop
 8001b6a:	e7fe      	b.n	8001b6a <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8001b6c:	697b      	ldr	r3, [r7, #20]
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3718      	adds	r7, #24
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	e000ed04 	.word	0xe000ed04

08001b7c <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b08a      	sub	sp, #40	; 0x28
 8001b80:	af02      	add	r7, sp, #8
 8001b82:	60f8      	str	r0, [r7, #12]
 8001b84:	60b9      	str	r1, [r7, #8]
 8001b86:	4613      	mov	r3, r2
 8001b88:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d02e      	beq.n	8001bf2 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8001b94:	2100      	movs	r1, #0
 8001b96:	68ba      	ldr	r2, [r7, #8]
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	fba3 2302 	umull	r2, r3, r3, r2
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d000      	beq.n	8001ba4 <xQueueGenericCreate+0x28>
 8001ba2:	2101      	movs	r1, #1
 8001ba4:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d123      	bne.n	8001bf2 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	68ba      	ldr	r2, [r7, #8]
 8001bae:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8001bb2:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8001bb6:	d81c      	bhi.n	8001bf2 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	68ba      	ldr	r2, [r7, #8]
 8001bbc:	fb02 f303 	mul.w	r3, r2, r3
 8001bc0:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8001bc2:	69bb      	ldr	r3, [r7, #24]
 8001bc4:	3350      	adds	r3, #80	; 0x50
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f001 ff44 	bl	8003a54 <pvPortMalloc>
 8001bcc:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8001bce:	69fb      	ldr	r3, [r7, #28]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d01c      	beq.n	8001c0e <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8001bd4:	69fb      	ldr	r3, [r7, #28]
 8001bd6:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	3350      	adds	r3, #80	; 0x50
 8001bdc:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001bde:	79fa      	ldrb	r2, [r7, #7]
 8001be0:	69fb      	ldr	r3, [r7, #28]
 8001be2:	9300      	str	r3, [sp, #0]
 8001be4:	4613      	mov	r3, r2
 8001be6:	697a      	ldr	r2, [r7, #20]
 8001be8:	68b9      	ldr	r1, [r7, #8]
 8001bea:	68f8      	ldr	r0, [r7, #12]
 8001bec:	f000 f814 	bl	8001c18 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8001bf0:	e00d      	b.n	8001c0e <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8001bf2:	69fb      	ldr	r3, [r7, #28]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d10a      	bne.n	8001c0e <xQueueGenericCreate+0x92>
        __asm volatile
 8001bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bfc:	f383 8811 	msr	BASEPRI, r3
 8001c00:	f3bf 8f6f 	isb	sy
 8001c04:	f3bf 8f4f 	dsb	sy
 8001c08:	613b      	str	r3, [r7, #16]
    }
 8001c0a:	bf00      	nop
 8001c0c:	e7fe      	b.n	8001c0c <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8001c0e:	69fb      	ldr	r3, [r7, #28]
    }
 8001c10:	4618      	mov	r0, r3
 8001c12:	3720      	adds	r7, #32
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}

08001c18 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b084      	sub	sp, #16
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	60f8      	str	r0, [r7, #12]
 8001c20:	60b9      	str	r1, [r7, #8]
 8001c22:	607a      	str	r2, [r7, #4]
 8001c24:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8001c26:	68bb      	ldr	r3, [r7, #8]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d103      	bne.n	8001c34 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001c2c:	69bb      	ldr	r3, [r7, #24]
 8001c2e:	69ba      	ldr	r2, [r7, #24]
 8001c30:	601a      	str	r2, [r3, #0]
 8001c32:	e002      	b.n	8001c3a <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001c34:	69bb      	ldr	r3, [r7, #24]
 8001c36:	687a      	ldr	r2, [r7, #4]
 8001c38:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8001c3a:	69bb      	ldr	r3, [r7, #24]
 8001c3c:	68fa      	ldr	r2, [r7, #12]
 8001c3e:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8001c40:	69bb      	ldr	r3, [r7, #24]
 8001c42:	68ba      	ldr	r2, [r7, #8]
 8001c44:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001c46:	2101      	movs	r1, #1
 8001c48:	69b8      	ldr	r0, [r7, #24]
 8001c4a:	f7ff ff07 	bl	8001a5c <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8001c4e:	69bb      	ldr	r3, [r7, #24]
 8001c50:	78fa      	ldrb	r2, [r7, #3]
 8001c52:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8001c56:	bf00      	nop
 8001c58:	3710      	adds	r7, #16
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
	...

08001c60 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b08e      	sub	sp, #56	; 0x38
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	60f8      	str	r0, [r7, #12]
 8001c68:	60b9      	str	r1, [r7, #8]
 8001c6a:	607a      	str	r2, [r7, #4]
 8001c6c:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8001c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d10a      	bne.n	8001c92 <xQueueGenericSend+0x32>
        __asm volatile
 8001c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c80:	f383 8811 	msr	BASEPRI, r3
 8001c84:	f3bf 8f6f 	isb	sy
 8001c88:	f3bf 8f4f 	dsb	sy
 8001c8c:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8001c8e:	bf00      	nop
 8001c90:	e7fe      	b.n	8001c90 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001c92:	68bb      	ldr	r3, [r7, #8]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d103      	bne.n	8001ca0 <xQueueGenericSend+0x40>
 8001c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d101      	bne.n	8001ca4 <xQueueGenericSend+0x44>
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	e000      	b.n	8001ca6 <xQueueGenericSend+0x46>
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d10a      	bne.n	8001cc0 <xQueueGenericSend+0x60>
        __asm volatile
 8001caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cae:	f383 8811 	msr	BASEPRI, r3
 8001cb2:	f3bf 8f6f 	isb	sy
 8001cb6:	f3bf 8f4f 	dsb	sy
 8001cba:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8001cbc:	bf00      	nop
 8001cbe:	e7fe      	b.n	8001cbe <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	2b02      	cmp	r3, #2
 8001cc4:	d103      	bne.n	8001cce <xQueueGenericSend+0x6e>
 8001cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	d101      	bne.n	8001cd2 <xQueueGenericSend+0x72>
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e000      	b.n	8001cd4 <xQueueGenericSend+0x74>
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d10a      	bne.n	8001cee <xQueueGenericSend+0x8e>
        __asm volatile
 8001cd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cdc:	f383 8811 	msr	BASEPRI, r3
 8001ce0:	f3bf 8f6f 	isb	sy
 8001ce4:	f3bf 8f4f 	dsb	sy
 8001ce8:	623b      	str	r3, [r7, #32]
    }
 8001cea:	bf00      	nop
 8001cec:	e7fe      	b.n	8001cec <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001cee:	f001 fb0d 	bl	800330c <xTaskGetSchedulerState>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d102      	bne.n	8001cfe <xQueueGenericSend+0x9e>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d101      	bne.n	8001d02 <xQueueGenericSend+0xa2>
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e000      	b.n	8001d04 <xQueueGenericSend+0xa4>
 8001d02:	2300      	movs	r3, #0
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d10a      	bne.n	8001d1e <xQueueGenericSend+0xbe>
        __asm volatile
 8001d08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d0c:	f383 8811 	msr	BASEPRI, r3
 8001d10:	f3bf 8f6f 	isb	sy
 8001d14:	f3bf 8f4f 	dsb	sy
 8001d18:	61fb      	str	r3, [r7, #28]
    }
 8001d1a:	bf00      	nop
 8001d1c:	e7fe      	b.n	8001d1c <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8001d1e:	f002 f83f 	bl	8003da0 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d2a:	429a      	cmp	r2, r3
 8001d2c:	d302      	bcc.n	8001d34 <xQueueGenericSend+0xd4>
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	2b02      	cmp	r3, #2
 8001d32:	d129      	bne.n	8001d88 <xQueueGenericSend+0x128>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001d34:	683a      	ldr	r2, [r7, #0]
 8001d36:	68b9      	ldr	r1, [r7, #8]
 8001d38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001d3a:	f000 f96f 	bl	800201c <prvCopyDataToQueue>
 8001d3e:	62f8      	str	r0, [r7, #44]	; 0x2c

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d010      	beq.n	8001d6a <xQueueGenericSend+0x10a>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d4a:	3324      	adds	r3, #36	; 0x24
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f001 f86f 	bl	8002e30 <xTaskRemoveFromEventList>
 8001d52:	4603      	mov	r3, r0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d013      	beq.n	8001d80 <xQueueGenericSend+0x120>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 8001d58:	4b3f      	ldr	r3, [pc, #252]	; (8001e58 <xQueueGenericSend+0x1f8>)
 8001d5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001d5e:	601a      	str	r2, [r3, #0]
 8001d60:	f3bf 8f4f 	dsb	sy
 8001d64:	f3bf 8f6f 	isb	sy
 8001d68:	e00a      	b.n	8001d80 <xQueueGenericSend+0x120>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 8001d6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d007      	beq.n	8001d80 <xQueueGenericSend+0x120>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 8001d70:	4b39      	ldr	r3, [pc, #228]	; (8001e58 <xQueueGenericSend+0x1f8>)
 8001d72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001d76:	601a      	str	r2, [r3, #0]
 8001d78:	f3bf 8f4f 	dsb	sy
 8001d7c:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8001d80:	f002 f83e 	bl	8003e00 <vPortExitCritical>
                return pdPASS;
 8001d84:	2301      	movs	r3, #1
 8001d86:	e063      	b.n	8001e50 <xQueueGenericSend+0x1f0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d103      	bne.n	8001d96 <xQueueGenericSend+0x136>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8001d8e:	f002 f837 	bl	8003e00 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8001d92:	2300      	movs	r3, #0
 8001d94:	e05c      	b.n	8001e50 <xQueueGenericSend+0x1f0>
                }
                else if( xEntryTimeSet == pdFALSE )
 8001d96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d106      	bne.n	8001daa <xQueueGenericSend+0x14a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8001d9c:	f107 0314 	add.w	r3, r7, #20
 8001da0:	4618      	mov	r0, r3
 8001da2:	f001 f91d 	bl	8002fe0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8001da6:	2301      	movs	r3, #1
 8001da8:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8001daa:	f002 f829 	bl	8003e00 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8001dae:	f000 fcb9 	bl	8002724 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8001db2:	f001 fff5 	bl	8003da0 <vPortEnterCritical>
 8001db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001db8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001dbc:	b25b      	sxtb	r3, r3
 8001dbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dc2:	d103      	bne.n	8001dcc <xQueueGenericSend+0x16c>
 8001dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001dd2:	b25b      	sxtb	r3, r3
 8001dd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dd8:	d103      	bne.n	8001de2 <xQueueGenericSend+0x182>
 8001dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ddc:	2200      	movs	r2, #0
 8001dde:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001de2:	f002 f80d 	bl	8003e00 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001de6:	1d3a      	adds	r2, r7, #4
 8001de8:	f107 0314 	add.w	r3, r7, #20
 8001dec:	4611      	mov	r1, r2
 8001dee:	4618      	mov	r0, r3
 8001df0:	f001 f90c 	bl	800300c <xTaskCheckForTimeOut>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d124      	bne.n	8001e44 <xQueueGenericSend+0x1e4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8001dfa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001dfc:	f000 fa06 	bl	800220c <prvIsQueueFull>
 8001e00:	4603      	mov	r3, r0
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d018      	beq.n	8001e38 <xQueueGenericSend+0x1d8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8001e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e08:	3310      	adds	r3, #16
 8001e0a:	687a      	ldr	r2, [r7, #4]
 8001e0c:	4611      	mov	r1, r2
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f000 ffa4 	bl	8002d5c <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8001e14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001e16:	f000 f991 	bl	800213c <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8001e1a:	f000 fcc7 	bl	80027ac <xTaskResumeAll>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	f47f af7c 	bne.w	8001d1e <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8001e26:	4b0c      	ldr	r3, [pc, #48]	; (8001e58 <xQueueGenericSend+0x1f8>)
 8001e28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e2c:	601a      	str	r2, [r3, #0]
 8001e2e:	f3bf 8f4f 	dsb	sy
 8001e32:	f3bf 8f6f 	isb	sy
 8001e36:	e772      	b.n	8001d1e <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8001e38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001e3a:	f000 f97f 	bl	800213c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8001e3e:	f000 fcb5 	bl	80027ac <xTaskResumeAll>
 8001e42:	e76c      	b.n	8001d1e <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8001e44:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001e46:	f000 f979 	bl	800213c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8001e4a:	f000 fcaf 	bl	80027ac <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8001e4e:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	3738      	adds	r7, #56	; 0x38
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	e000ed04 	.word	0xe000ed04

08001e5c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b08c      	sub	sp, #48	; 0x30
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	60f8      	str	r0, [r7, #12]
 8001e64:	60b9      	str	r1, [r7, #8]
 8001e66:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8001e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d10a      	bne.n	8001e8c <xQueueReceive+0x30>
        __asm volatile
 8001e76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e7a:	f383 8811 	msr	BASEPRI, r3
 8001e7e:	f3bf 8f6f 	isb	sy
 8001e82:	f3bf 8f4f 	dsb	sy
 8001e86:	623b      	str	r3, [r7, #32]
    }
 8001e88:	bf00      	nop
 8001e8a:	e7fe      	b.n	8001e8a <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d103      	bne.n	8001e9a <xQueueReceive+0x3e>
 8001e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d101      	bne.n	8001e9e <xQueueReceive+0x42>
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e000      	b.n	8001ea0 <xQueueReceive+0x44>
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d10a      	bne.n	8001eba <xQueueReceive+0x5e>
        __asm volatile
 8001ea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ea8:	f383 8811 	msr	BASEPRI, r3
 8001eac:	f3bf 8f6f 	isb	sy
 8001eb0:	f3bf 8f4f 	dsb	sy
 8001eb4:	61fb      	str	r3, [r7, #28]
    }
 8001eb6:	bf00      	nop
 8001eb8:	e7fe      	b.n	8001eb8 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001eba:	f001 fa27 	bl	800330c <xTaskGetSchedulerState>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d102      	bne.n	8001eca <xQueueReceive+0x6e>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d101      	bne.n	8001ece <xQueueReceive+0x72>
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e000      	b.n	8001ed0 <xQueueReceive+0x74>
 8001ece:	2300      	movs	r3, #0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d10a      	bne.n	8001eea <xQueueReceive+0x8e>
        __asm volatile
 8001ed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ed8:	f383 8811 	msr	BASEPRI, r3
 8001edc:	f3bf 8f6f 	isb	sy
 8001ee0:	f3bf 8f4f 	dsb	sy
 8001ee4:	61bb      	str	r3, [r7, #24]
    }
 8001ee6:	bf00      	nop
 8001ee8:	e7fe      	b.n	8001ee8 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8001eea:	f001 ff59 	bl	8003da0 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ef2:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d01f      	beq.n	8001f3a <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001efa:	68b9      	ldr	r1, [r7, #8]
 8001efc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001efe:	f000 f8f7 	bl	80020f0 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8001f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f04:	1e5a      	subs	r2, r3, #1
 8001f06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f08:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f0c:	691b      	ldr	r3, [r3, #16]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d00f      	beq.n	8001f32 <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f14:	3310      	adds	r3, #16
 8001f16:	4618      	mov	r0, r3
 8001f18:	f000 ff8a 	bl	8002e30 <xTaskRemoveFromEventList>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d007      	beq.n	8001f32 <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8001f22:	4b3d      	ldr	r3, [pc, #244]	; (8002018 <xQueueReceive+0x1bc>)
 8001f24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001f28:	601a      	str	r2, [r3, #0]
 8001f2a:	f3bf 8f4f 	dsb	sy
 8001f2e:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8001f32:	f001 ff65 	bl	8003e00 <vPortExitCritical>
                return pdPASS;
 8001f36:	2301      	movs	r3, #1
 8001f38:	e069      	b.n	800200e <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d103      	bne.n	8001f48 <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8001f40:	f001 ff5e 	bl	8003e00 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8001f44:	2300      	movs	r3, #0
 8001f46:	e062      	b.n	800200e <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 8001f48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d106      	bne.n	8001f5c <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8001f4e:	f107 0310 	add.w	r3, r7, #16
 8001f52:	4618      	mov	r0, r3
 8001f54:	f001 f844 	bl	8002fe0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8001f5c:	f001 ff50 	bl	8003e00 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8001f60:	f000 fbe0 	bl	8002724 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8001f64:	f001 ff1c 	bl	8003da0 <vPortEnterCritical>
 8001f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f6a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001f6e:	b25b      	sxtb	r3, r3
 8001f70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f74:	d103      	bne.n	8001f7e <xQueueReceive+0x122>
 8001f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f78:	2200      	movs	r2, #0
 8001f7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f80:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001f84:	b25b      	sxtb	r3, r3
 8001f86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f8a:	d103      	bne.n	8001f94 <xQueueReceive+0x138>
 8001f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f8e:	2200      	movs	r2, #0
 8001f90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001f94:	f001 ff34 	bl	8003e00 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001f98:	1d3a      	adds	r2, r7, #4
 8001f9a:	f107 0310 	add.w	r3, r7, #16
 8001f9e:	4611      	mov	r1, r2
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f001 f833 	bl	800300c <xTaskCheckForTimeOut>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d123      	bne.n	8001ff4 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001fac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001fae:	f000 f917 	bl	80021e0 <prvIsQueueEmpty>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d017      	beq.n	8001fe8 <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fba:	3324      	adds	r3, #36	; 0x24
 8001fbc:	687a      	ldr	r2, [r7, #4]
 8001fbe:	4611      	mov	r1, r2
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f000 fecb 	bl	8002d5c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8001fc6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001fc8:	f000 f8b8 	bl	800213c <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8001fcc:	f000 fbee 	bl	80027ac <xTaskResumeAll>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d189      	bne.n	8001eea <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8001fd6:	4b10      	ldr	r3, [pc, #64]	; (8002018 <xQueueReceive+0x1bc>)
 8001fd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001fdc:	601a      	str	r2, [r3, #0]
 8001fde:	f3bf 8f4f 	dsb	sy
 8001fe2:	f3bf 8f6f 	isb	sy
 8001fe6:	e780      	b.n	8001eea <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8001fe8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001fea:	f000 f8a7 	bl	800213c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8001fee:	f000 fbdd 	bl	80027ac <xTaskResumeAll>
 8001ff2:	e77a      	b.n	8001eea <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8001ff4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001ff6:	f000 f8a1 	bl	800213c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8001ffa:	f000 fbd7 	bl	80027ac <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001ffe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002000:	f000 f8ee 	bl	80021e0 <prvIsQueueEmpty>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	f43f af6f 	beq.w	8001eea <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 800200c:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800200e:	4618      	mov	r0, r3
 8002010:	3730      	adds	r7, #48	; 0x30
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	e000ed04 	.word	0xe000ed04

0800201c <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b086      	sub	sp, #24
 8002020:	af00      	add	r7, sp, #0
 8002022:	60f8      	str	r0, [r7, #12]
 8002024:	60b9      	str	r1, [r7, #8]
 8002026:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8002028:	2300      	movs	r3, #0
 800202a:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002030:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002036:	2b00      	cmp	r3, #0
 8002038:	d10d      	bne.n	8002056 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d14d      	bne.n	80020de <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	689b      	ldr	r3, [r3, #8]
 8002046:	4618      	mov	r0, r3
 8002048:	f001 f97e 	bl	8003348 <xTaskPriorityDisinherit>
 800204c:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	2200      	movs	r2, #0
 8002052:	609a      	str	r2, [r3, #8]
 8002054:	e043      	b.n	80020de <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d119      	bne.n	8002090 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	6858      	ldr	r0, [r3, #4]
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002064:	461a      	mov	r2, r3
 8002066:	68b9      	ldr	r1, [r7, #8]
 8002068:	f002 f878 	bl	800415c <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	685a      	ldr	r2, [r3, #4]
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002074:	441a      	add	r2, r3
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	685a      	ldr	r2, [r3, #4]
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	429a      	cmp	r2, r3
 8002084:	d32b      	bcc.n	80020de <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	605a      	str	r2, [r3, #4]
 800208e:	e026      	b.n	80020de <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	68d8      	ldr	r0, [r3, #12]
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002098:	461a      	mov	r2, r3
 800209a:	68b9      	ldr	r1, [r7, #8]
 800209c:	f002 f85e 	bl	800415c <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	68da      	ldr	r2, [r3, #12]
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a8:	425b      	negs	r3, r3
 80020aa:	441a      	add	r2, r3
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	68da      	ldr	r2, [r3, #12]
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	429a      	cmp	r2, r3
 80020ba:	d207      	bcs.n	80020cc <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	689a      	ldr	r2, [r3, #8]
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c4:	425b      	negs	r3, r3
 80020c6:	441a      	add	r2, r3
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2b02      	cmp	r3, #2
 80020d0:	d105      	bne.n	80020de <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d002      	beq.n	80020de <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	3b01      	subs	r3, #1
 80020dc:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	1c5a      	adds	r2, r3, #1
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 80020e6:	697b      	ldr	r3, [r7, #20]
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	3718      	adds	r7, #24
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}

080020f0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b082      	sub	sp, #8
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
 80020f8:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d018      	beq.n	8002134 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	68da      	ldr	r2, [r3, #12]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210a:	441a      	add	r2, r3
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	68da      	ldr	r2, [r3, #12]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	429a      	cmp	r2, r3
 800211a:	d303      	bcc.n	8002124 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	68d9      	ldr	r1, [r3, #12]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212c:	461a      	mov	r2, r3
 800212e:	6838      	ldr	r0, [r7, #0]
 8002130:	f002 f814 	bl	800415c <memcpy>
    }
}
 8002134:	bf00      	nop
 8002136:	3708      	adds	r7, #8
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}

0800213c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b084      	sub	sp, #16
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002144:	f001 fe2c 	bl	8003da0 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800214e:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002150:	e011      	b.n	8002176 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002156:	2b00      	cmp	r3, #0
 8002158:	d012      	beq.n	8002180 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	3324      	adds	r3, #36	; 0x24
 800215e:	4618      	mov	r0, r3
 8002160:	f000 fe66 	bl	8002e30 <xTaskRemoveFromEventList>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d001      	beq.n	800216e <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 800216a:	f000 ffb5 	bl	80030d8 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800216e:	7bfb      	ldrb	r3, [r7, #15]
 8002170:	3b01      	subs	r3, #1
 8002172:	b2db      	uxtb	r3, r3
 8002174:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002176:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800217a:	2b00      	cmp	r3, #0
 800217c:	dce9      	bgt.n	8002152 <prvUnlockQueue+0x16>
 800217e:	e000      	b.n	8002182 <prvUnlockQueue+0x46>
                    break;
 8002180:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	22ff      	movs	r2, #255	; 0xff
 8002186:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 800218a:	f001 fe39 	bl	8003e00 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800218e:	f001 fe07 	bl	8003da0 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002198:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800219a:	e011      	b.n	80021c0 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	691b      	ldr	r3, [r3, #16]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d012      	beq.n	80021ca <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	3310      	adds	r3, #16
 80021a8:	4618      	mov	r0, r3
 80021aa:	f000 fe41 	bl	8002e30 <xTaskRemoveFromEventList>
 80021ae:	4603      	mov	r3, r0
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d001      	beq.n	80021b8 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80021b4:	f000 ff90 	bl	80030d8 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80021b8:	7bbb      	ldrb	r3, [r7, #14]
 80021ba:	3b01      	subs	r3, #1
 80021bc:	b2db      	uxtb	r3, r3
 80021be:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80021c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	dce9      	bgt.n	800219c <prvUnlockQueue+0x60>
 80021c8:	e000      	b.n	80021cc <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80021ca:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	22ff      	movs	r2, #255	; 0xff
 80021d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 80021d4:	f001 fe14 	bl	8003e00 <vPortExitCritical>
}
 80021d8:	bf00      	nop
 80021da:	3710      	adds	r7, #16
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}

080021e0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b084      	sub	sp, #16
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80021e8:	f001 fdda 	bl	8003da0 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d102      	bne.n	80021fa <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80021f4:	2301      	movs	r3, #1
 80021f6:	60fb      	str	r3, [r7, #12]
 80021f8:	e001      	b.n	80021fe <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80021fa:	2300      	movs	r3, #0
 80021fc:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80021fe:	f001 fdff 	bl	8003e00 <vPortExitCritical>

    return xReturn;
 8002202:	68fb      	ldr	r3, [r7, #12]
}
 8002204:	4618      	mov	r0, r3
 8002206:	3710      	adds	r7, #16
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}

0800220c <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b084      	sub	sp, #16
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002214:	f001 fdc4 	bl	8003da0 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002220:	429a      	cmp	r2, r3
 8002222:	d102      	bne.n	800222a <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8002224:	2301      	movs	r3, #1
 8002226:	60fb      	str	r3, [r7, #12]
 8002228:	e001      	b.n	800222e <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 800222a:	2300      	movs	r3, #0
 800222c:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800222e:	f001 fde7 	bl	8003e00 <vPortExitCritical>

    return xReturn;
 8002232:	68fb      	ldr	r3, [r7, #12]
}
 8002234:	4618      	mov	r0, r3
 8002236:	3710      	adds	r7, #16
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}

0800223c <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 800223c:	b480      	push	{r7}
 800223e:	b087      	sub	sp, #28
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
 8002244:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8002246:	2300      	movs	r3, #0
 8002248:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d10a      	bne.n	8002266 <vQueueAddToRegistry+0x2a>
        __asm volatile
 8002250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002254:	f383 8811 	msr	BASEPRI, r3
 8002258:	f3bf 8f6f 	isb	sy
 800225c:	f3bf 8f4f 	dsb	sy
 8002260:	60fb      	str	r3, [r7, #12]
    }
 8002262:	bf00      	nop
 8002264:	e7fe      	b.n	8002264 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d024      	beq.n	80022b6 <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800226c:	2300      	movs	r3, #0
 800226e:	617b      	str	r3, [r7, #20]
 8002270:	e01e      	b.n	80022b0 <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8002272:	4a18      	ldr	r2, [pc, #96]	; (80022d4 <vQueueAddToRegistry+0x98>)
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	00db      	lsls	r3, r3, #3
 8002278:	4413      	add	r3, r2
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	687a      	ldr	r2, [r7, #4]
 800227e:	429a      	cmp	r2, r3
 8002280:	d105      	bne.n	800228e <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	00db      	lsls	r3, r3, #3
 8002286:	4a13      	ldr	r2, [pc, #76]	; (80022d4 <vQueueAddToRegistry+0x98>)
 8002288:	4413      	add	r3, r2
 800228a:	613b      	str	r3, [r7, #16]
                    break;
 800228c:	e013      	b.n	80022b6 <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d10a      	bne.n	80022aa <vQueueAddToRegistry+0x6e>
 8002294:	4a0f      	ldr	r2, [pc, #60]	; (80022d4 <vQueueAddToRegistry+0x98>)
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d104      	bne.n	80022aa <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	00db      	lsls	r3, r3, #3
 80022a4:	4a0b      	ldr	r2, [pc, #44]	; (80022d4 <vQueueAddToRegistry+0x98>)
 80022a6:	4413      	add	r3, r2
 80022a8:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	3301      	adds	r3, #1
 80022ae:	617b      	str	r3, [r7, #20]
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	2b07      	cmp	r3, #7
 80022b4:	d9dd      	bls.n	8002272 <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d005      	beq.n	80022c8 <vQueueAddToRegistry+0x8c>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	683a      	ldr	r2, [r7, #0]
 80022c0:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	687a      	ldr	r2, [r7, #4]
 80022c6:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 80022c8:	bf00      	nop
 80022ca:	371c      	adds	r7, #28
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bc80      	pop	{r7}
 80022d0:	4770      	bx	lr
 80022d2:	bf00      	nop
 80022d4:	20000388 	.word	0x20000388

080022d8 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80022d8:	b580      	push	{r7, lr}
 80022da:	b086      	sub	sp, #24
 80022dc:	af00      	add	r7, sp, #0
 80022de:	60f8      	str	r0, [r7, #12]
 80022e0:	60b9      	str	r1, [r7, #8]
 80022e2:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80022e8:	f001 fd5a 	bl	8003da0 <vPortEnterCritical>
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80022f2:	b25b      	sxtb	r3, r3
 80022f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022f8:	d103      	bne.n	8002302 <vQueueWaitForMessageRestricted+0x2a>
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	2200      	movs	r2, #0
 80022fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002308:	b25b      	sxtb	r3, r3
 800230a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800230e:	d103      	bne.n	8002318 <vQueueWaitForMessageRestricted+0x40>
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	2200      	movs	r2, #0
 8002314:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002318:	f001 fd72 	bl	8003e00 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002320:	2b00      	cmp	r3, #0
 8002322:	d106      	bne.n	8002332 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	3324      	adds	r3, #36	; 0x24
 8002328:	687a      	ldr	r2, [r7, #4]
 800232a:	68b9      	ldr	r1, [r7, #8]
 800232c:	4618      	mov	r0, r3
 800232e:	f000 fd39 	bl	8002da4 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002332:	6978      	ldr	r0, [r7, #20]
 8002334:	f7ff ff02 	bl	800213c <prvUnlockQueue>
    }
 8002338:	bf00      	nop
 800233a:	3718      	adds	r7, #24
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}

08002340 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002340:	b580      	push	{r7, lr}
 8002342:	b08c      	sub	sp, #48	; 0x30
 8002344:	af04      	add	r7, sp, #16
 8002346:	60f8      	str	r0, [r7, #12]
 8002348:	60b9      	str	r1, [r7, #8]
 800234a:	607a      	str	r2, [r7, #4]
 800234c:	603b      	str	r3, [r7, #0]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	009b      	lsls	r3, r3, #2
 8002352:	4618      	mov	r0, r3
 8002354:	f001 fb7e 	bl	8003a54 <pvPortMalloc>
 8002358:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d013      	beq.n	8002388 <xTaskCreate+0x48>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002360:	2080      	movs	r0, #128	; 0x80
 8002362:	f001 fb77 	bl	8003a54 <pvPortMalloc>
 8002366:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8002368:	69fb      	ldr	r3, [r7, #28]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d008      	beq.n	8002380 <xTaskCreate+0x40>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 800236e:	2280      	movs	r2, #128	; 0x80
 8002370:	2100      	movs	r1, #0
 8002372:	69f8      	ldr	r0, [r7, #28]
 8002374:	f001 ff00 	bl	8004178 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8002378:	69fb      	ldr	r3, [r7, #28]
 800237a:	697a      	ldr	r2, [r7, #20]
 800237c:	631a      	str	r2, [r3, #48]	; 0x30
 800237e:	e005      	b.n	800238c <xTaskCreate+0x4c>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8002380:	6978      	ldr	r0, [r7, #20]
 8002382:	f001 fb79 	bl	8003a78 <vPortFree>
 8002386:	e001      	b.n	800238c <xTaskCreate+0x4c>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8002388:	2300      	movs	r3, #0
 800238a:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800238c:	69fb      	ldr	r3, [r7, #28]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d013      	beq.n	80023ba <xTaskCreate+0x7a>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002392:	2300      	movs	r3, #0
 8002394:	9303      	str	r3, [sp, #12]
 8002396:	69fb      	ldr	r3, [r7, #28]
 8002398:	9302      	str	r3, [sp, #8]
 800239a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800239c:	9301      	str	r3, [sp, #4]
 800239e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023a0:	9300      	str	r3, [sp, #0]
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	687a      	ldr	r2, [r7, #4]
 80023a6:	68b9      	ldr	r1, [r7, #8]
 80023a8:	68f8      	ldr	r0, [r7, #12]
 80023aa:	f000 f80e 	bl	80023ca <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80023ae:	69f8      	ldr	r0, [r7, #28]
 80023b0:	f000 f89a 	bl	80024e8 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80023b4:	2301      	movs	r3, #1
 80023b6:	61bb      	str	r3, [r7, #24]
 80023b8:	e002      	b.n	80023c0 <xTaskCreate+0x80>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80023ba:	f04f 33ff 	mov.w	r3, #4294967295
 80023be:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80023c0:	69bb      	ldr	r3, [r7, #24]
    }
 80023c2:	4618      	mov	r0, r3
 80023c4:	3720      	adds	r7, #32
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}

080023ca <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80023ca:	b580      	push	{r7, lr}
 80023cc:	b088      	sub	sp, #32
 80023ce:	af00      	add	r7, sp, #0
 80023d0:	60f8      	str	r0, [r7, #12]
 80023d2:	60b9      	str	r1, [r7, #8]
 80023d4:	607a      	str	r2, [r7, #4]
 80023d6:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80023d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023da:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	461a      	mov	r2, r3
 80023e2:	21a5      	movs	r1, #165	; 0xa5
 80023e4:	f001 fec8 	bl	8004178 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80023e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80023f2:	3b01      	subs	r3, #1
 80023f4:	009b      	lsls	r3, r3, #2
 80023f6:	4413      	add	r3, r2
 80023f8:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80023fa:	69bb      	ldr	r3, [r7, #24]
 80023fc:	f023 0307 	bic.w	r3, r3, #7
 8002400:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002402:	69bb      	ldr	r3, [r7, #24]
 8002404:	f003 0307 	and.w	r3, r3, #7
 8002408:	2b00      	cmp	r3, #0
 800240a:	d00a      	beq.n	8002422 <prvInitialiseNewTask+0x58>
        __asm volatile
 800240c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002410:	f383 8811 	msr	BASEPRI, r3
 8002414:	f3bf 8f6f 	isb	sy
 8002418:	f3bf 8f4f 	dsb	sy
 800241c:	617b      	str	r3, [r7, #20]
    }
 800241e:	bf00      	nop
 8002420:	e7fe      	b.n	8002420 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d01e      	beq.n	8002466 <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002428:	2300      	movs	r3, #0
 800242a:	61fb      	str	r3, [r7, #28]
 800242c:	e012      	b.n	8002454 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800242e:	68ba      	ldr	r2, [r7, #8]
 8002430:	69fb      	ldr	r3, [r7, #28]
 8002432:	4413      	add	r3, r2
 8002434:	7819      	ldrb	r1, [r3, #0]
 8002436:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002438:	69fb      	ldr	r3, [r7, #28]
 800243a:	4413      	add	r3, r2
 800243c:	3334      	adds	r3, #52	; 0x34
 800243e:	460a      	mov	r2, r1
 8002440:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002442:	68ba      	ldr	r2, [r7, #8]
 8002444:	69fb      	ldr	r3, [r7, #28]
 8002446:	4413      	add	r3, r2
 8002448:	781b      	ldrb	r3, [r3, #0]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d006      	beq.n	800245c <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	3301      	adds	r3, #1
 8002452:	61fb      	str	r3, [r7, #28]
 8002454:	69fb      	ldr	r3, [r7, #28]
 8002456:	2b13      	cmp	r3, #19
 8002458:	d9e9      	bls.n	800242e <prvInitialiseNewTask+0x64>
 800245a:	e000      	b.n	800245e <prvInitialiseNewTask+0x94>
            {
                break;
 800245c:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800245e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002460:	2200      	movs	r2, #0
 8002462:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
     configASSERT( uxPriority < configMAX_PRIORITIES );
 8002466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002468:	2b04      	cmp	r3, #4
 800246a:	d90a      	bls.n	8002482 <prvInitialiseNewTask+0xb8>
        __asm volatile
 800246c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002470:	f383 8811 	msr	BASEPRI, r3
 8002474:	f3bf 8f6f 	isb	sy
 8002478:	f3bf 8f4f 	dsb	sy
 800247c:	613b      	str	r3, [r7, #16]
    }
 800247e:	bf00      	nop
 8002480:	e7fe      	b.n	8002480 <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002484:	2b04      	cmp	r3, #4
 8002486:	d901      	bls.n	800248c <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002488:	2304      	movs	r3, #4
 800248a:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800248c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800248e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002490:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8002492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002494:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002496:	651a      	str	r2, [r3, #80]	; 0x50
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800249a:	3304      	adds	r3, #4
 800249c:	4618      	mov	r0, r3
 800249e:	f001 fb1c 	bl	8003ada <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80024a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024a4:	3318      	adds	r3, #24
 80024a6:	4618      	mov	r0, r3
 80024a8:	f001 fb17 	bl	8003ada <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80024ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80024b0:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80024b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024b4:	f1c3 0205 	rsb	r2, r3, #5
 80024b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024ba:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80024bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80024c0:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80024c2:	683a      	ldr	r2, [r7, #0]
 80024c4:	68f9      	ldr	r1, [r7, #12]
 80024c6:	69b8      	ldr	r0, [r7, #24]
 80024c8:	f001 fb74 	bl	8003bb4 <pxPortInitialiseStack>
 80024cc:	4602      	mov	r2, r0
 80024ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024d0:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80024d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d002      	beq.n	80024de <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80024d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80024dc:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80024de:	bf00      	nop
 80024e0:	3720      	adds	r7, #32
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
	...

080024e8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b084      	sub	sp, #16
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80024f0:	f001 fc56 	bl	8003da0 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80024f4:	4b41      	ldr	r3, [pc, #260]	; (80025fc <prvAddNewTaskToReadyList+0x114>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	3301      	adds	r3, #1
 80024fa:	4a40      	ldr	r2, [pc, #256]	; (80025fc <prvAddNewTaskToReadyList+0x114>)
 80024fc:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80024fe:	4b40      	ldr	r3, [pc, #256]	; (8002600 <prvAddNewTaskToReadyList+0x118>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d109      	bne.n	800251a <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002506:	4a3e      	ldr	r2, [pc, #248]	; (8002600 <prvAddNewTaskToReadyList+0x118>)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800250c:	4b3b      	ldr	r3, [pc, #236]	; (80025fc <prvAddNewTaskToReadyList+0x114>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	2b01      	cmp	r3, #1
 8002512:	d110      	bne.n	8002536 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002514:	f000 fe62 	bl	80031dc <prvInitialiseTaskLists>
 8002518:	e00d      	b.n	8002536 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800251a:	4b3a      	ldr	r3, [pc, #232]	; (8002604 <prvAddNewTaskToReadyList+0x11c>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d109      	bne.n	8002536 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002522:	4b37      	ldr	r3, [pc, #220]	; (8002600 <prvAddNewTaskToReadyList+0x118>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800252c:	429a      	cmp	r2, r3
 800252e:	d802      	bhi.n	8002536 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002530:	4a33      	ldr	r2, [pc, #204]	; (8002600 <prvAddNewTaskToReadyList+0x118>)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002536:	4b34      	ldr	r3, [pc, #208]	; (8002608 <prvAddNewTaskToReadyList+0x120>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	3301      	adds	r3, #1
 800253c:	4a32      	ldr	r2, [pc, #200]	; (8002608 <prvAddNewTaskToReadyList+0x120>)
 800253e:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002540:	4b31      	ldr	r3, [pc, #196]	; (8002608 <prvAddNewTaskToReadyList+0x120>)
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	649a      	str	r2, [r3, #72]	; 0x48
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800254c:	4b2f      	ldr	r3, [pc, #188]	; (800260c <prvAddNewTaskToReadyList+0x124>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	429a      	cmp	r2, r3
 8002552:	d903      	bls.n	800255c <prvAddNewTaskToReadyList+0x74>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002558:	4a2c      	ldr	r2, [pc, #176]	; (800260c <prvAddNewTaskToReadyList+0x124>)
 800255a:	6013      	str	r3, [r2, #0]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002560:	492b      	ldr	r1, [pc, #172]	; (8002610 <prvAddNewTaskToReadyList+0x128>)
 8002562:	4613      	mov	r3, r2
 8002564:	009b      	lsls	r3, r3, #2
 8002566:	4413      	add	r3, r2
 8002568:	009b      	lsls	r3, r3, #2
 800256a:	440b      	add	r3, r1
 800256c:	3304      	adds	r3, #4
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	60fb      	str	r3, [r7, #12]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	68fa      	ldr	r2, [r7, #12]
 8002576:	609a      	str	r2, [r3, #8]
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	689a      	ldr	r2, [r3, #8]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	60da      	str	r2, [r3, #12]
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	687a      	ldr	r2, [r7, #4]
 8002586:	3204      	adds	r2, #4
 8002588:	605a      	str	r2, [r3, #4]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	1d1a      	adds	r2, r3, #4
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	609a      	str	r2, [r3, #8]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002596:	4613      	mov	r3, r2
 8002598:	009b      	lsls	r3, r3, #2
 800259a:	4413      	add	r3, r2
 800259c:	009b      	lsls	r3, r3, #2
 800259e:	4a1c      	ldr	r2, [pc, #112]	; (8002610 <prvAddNewTaskToReadyList+0x128>)
 80025a0:	441a      	add	r2, r3
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	615a      	str	r2, [r3, #20]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025aa:	4919      	ldr	r1, [pc, #100]	; (8002610 <prvAddNewTaskToReadyList+0x128>)
 80025ac:	4613      	mov	r3, r2
 80025ae:	009b      	lsls	r3, r3, #2
 80025b0:	4413      	add	r3, r2
 80025b2:	009b      	lsls	r3, r3, #2
 80025b4:	440b      	add	r3, r1
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	1c59      	adds	r1, r3, #1
 80025ba:	4815      	ldr	r0, [pc, #84]	; (8002610 <prvAddNewTaskToReadyList+0x128>)
 80025bc:	4613      	mov	r3, r2
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	4413      	add	r3, r2
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	4403      	add	r3, r0
 80025c6:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80025c8:	f001 fc1a 	bl	8003e00 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80025cc:	4b0d      	ldr	r3, [pc, #52]	; (8002604 <prvAddNewTaskToReadyList+0x11c>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d00e      	beq.n	80025f2 <prvAddNewTaskToReadyList+0x10a>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80025d4:	4b0a      	ldr	r3, [pc, #40]	; (8002600 <prvAddNewTaskToReadyList+0x118>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025de:	429a      	cmp	r2, r3
 80025e0:	d207      	bcs.n	80025f2 <prvAddNewTaskToReadyList+0x10a>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80025e2:	4b0c      	ldr	r3, [pc, #48]	; (8002614 <prvAddNewTaskToReadyList+0x12c>)
 80025e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025e8:	601a      	str	r2, [r3, #0]
 80025ea:	f3bf 8f4f 	dsb	sy
 80025ee:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80025f2:	bf00      	nop
 80025f4:	3710      	adds	r7, #16
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	20000180 	.word	0x20000180
 8002600:	200000a8 	.word	0x200000a8
 8002604:	2000018c 	.word	0x2000018c
 8002608:	2000019c 	.word	0x2000019c
 800260c:	20000188 	.word	0x20000188
 8002610:	200000ac 	.word	0x200000ac
 8002614:	e000ed04 	.word	0xe000ed04

08002618 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8002618:	b580      	push	{r7, lr}
 800261a:	b084      	sub	sp, #16
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8002620:	2300      	movs	r3, #0
 8002622:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d017      	beq.n	800265a <vTaskDelay+0x42>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 800262a:	4b13      	ldr	r3, [pc, #76]	; (8002678 <vTaskDelay+0x60>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d00a      	beq.n	8002648 <vTaskDelay+0x30>
        __asm volatile
 8002632:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002636:	f383 8811 	msr	BASEPRI, r3
 800263a:	f3bf 8f6f 	isb	sy
 800263e:	f3bf 8f4f 	dsb	sy
 8002642:	60bb      	str	r3, [r7, #8]
    }
 8002644:	bf00      	nop
 8002646:	e7fe      	b.n	8002646 <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8002648:	f000 f86c 	bl	8002724 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800264c:	2100      	movs	r1, #0
 800264e:	6878      	ldr	r0, [r7, #4]
 8002650:	f000 ff10 	bl	8003474 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8002654:	f000 f8aa 	bl	80027ac <xTaskResumeAll>
 8002658:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d107      	bne.n	8002670 <vTaskDelay+0x58>
        {
            portYIELD_WITHIN_API();
 8002660:	4b06      	ldr	r3, [pc, #24]	; (800267c <vTaskDelay+0x64>)
 8002662:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002666:	601a      	str	r2, [r3, #0]
 8002668:	f3bf 8f4f 	dsb	sy
 800266c:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8002670:	bf00      	nop
 8002672:	3710      	adds	r7, #16
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}
 8002678:	200001a8 	.word	0x200001a8
 800267c:	e000ed04 	.word	0xe000ed04

08002680 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b086      	sub	sp, #24
 8002684:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8002686:	4b20      	ldr	r3, [pc, #128]	; (8002708 <vTaskStartScheduler+0x88>)
 8002688:	9301      	str	r3, [sp, #4]
 800268a:	2300      	movs	r3, #0
 800268c:	9300      	str	r3, [sp, #0]
 800268e:	2300      	movs	r3, #0
 8002690:	2280      	movs	r2, #128	; 0x80
 8002692:	491e      	ldr	r1, [pc, #120]	; (800270c <vTaskStartScheduler+0x8c>)
 8002694:	481e      	ldr	r0, [pc, #120]	; (8002710 <vTaskStartScheduler+0x90>)
 8002696:	f7ff fe53 	bl	8002340 <xTaskCreate>
 800269a:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	2b01      	cmp	r3, #1
 80026a0:	d102      	bne.n	80026a8 <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 80026a2:	f000 ff55 	bl	8003550 <xTimerCreateTimerTask>
 80026a6:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	d116      	bne.n	80026dc <vTaskStartScheduler+0x5c>
        __asm volatile
 80026ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026b2:	f383 8811 	msr	BASEPRI, r3
 80026b6:	f3bf 8f6f 	isb	sy
 80026ba:	f3bf 8f4f 	dsb	sy
 80026be:	60bb      	str	r3, [r7, #8]
    }
 80026c0:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 80026c2:	4b14      	ldr	r3, [pc, #80]	; (8002714 <vTaskStartScheduler+0x94>)
 80026c4:	f04f 32ff 	mov.w	r2, #4294967295
 80026c8:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80026ca:	4b13      	ldr	r3, [pc, #76]	; (8002718 <vTaskStartScheduler+0x98>)
 80026cc:	2201      	movs	r2, #1
 80026ce:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80026d0:	4b12      	ldr	r3, [pc, #72]	; (800271c <vTaskStartScheduler+0x9c>)
 80026d2:	2200      	movs	r2, #0
 80026d4:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 80026d6:	f001 faf1 	bl	8003cbc <xPortStartScheduler>
 80026da:	e00e      	b.n	80026fa <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026e2:	d10a      	bne.n	80026fa <vTaskStartScheduler+0x7a>
        __asm volatile
 80026e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026e8:	f383 8811 	msr	BASEPRI, r3
 80026ec:	f3bf 8f6f 	isb	sy
 80026f0:	f3bf 8f4f 	dsb	sy
 80026f4:	607b      	str	r3, [r7, #4]
    }
 80026f6:	bf00      	nop
 80026f8:	e7fe      	b.n	80026f8 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80026fa:	4b09      	ldr	r3, [pc, #36]	; (8002720 <vTaskStartScheduler+0xa0>)
 80026fc:	681b      	ldr	r3, [r3, #0]
}
 80026fe:	bf00      	nop
 8002700:	3710      	adds	r7, #16
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop
 8002708:	200001a4 	.word	0x200001a4
 800270c:	0800432c 	.word	0x0800432c
 8002710:	080030f1 	.word	0x080030f1
 8002714:	200001a0 	.word	0x200001a0
 8002718:	2000018c 	.word	0x2000018c
 800271c:	20000184 	.word	0x20000184
 8002720:	2000000c 	.word	0x2000000c

08002724 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002724:	b480      	push	{r7}
 8002726:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002728:	4b04      	ldr	r3, [pc, #16]	; (800273c <vTaskSuspendAll+0x18>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	3301      	adds	r3, #1
 800272e:	4a03      	ldr	r2, [pc, #12]	; (800273c <vTaskSuspendAll+0x18>)
 8002730:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002732:	bf00      	nop
 8002734:	46bd      	mov	sp, r7
 8002736:	bc80      	pop	{r7}
 8002738:	4770      	bx	lr
 800273a:	bf00      	nop
 800273c:	200001a8 	.word	0x200001a8

08002740 <prvGetExpectedIdleTime>:
/*----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE != 0 )

    static TickType_t prvGetExpectedIdleTime( void )
    {
 8002740:	b480      	push	{r7}
 8002742:	b083      	sub	sp, #12
 8002744:	af00      	add	r7, sp, #0
        TickType_t xReturn;
        UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
 8002746:	2300      	movs	r3, #0
 8002748:	603b      	str	r3, [r7, #0]
         * configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
         * task that are in the Ready state, even though the idle task is
         * running. */
        #if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
        {
            if( uxTopReadyPriority > tskIDLE_PRIORITY )
 800274a:	4b13      	ldr	r3, [pc, #76]	; (8002798 <prvGetExpectedIdleTime+0x58>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d001      	beq.n	8002756 <prvGetExpectedIdleTime+0x16>
            {
                uxHigherPriorityReadyTasks = pdTRUE;
 8002752:	2301      	movs	r3, #1
 8002754:	603b      	str	r3, [r7, #0]
                uxHigherPriorityReadyTasks = pdTRUE;
            }
        }
        #endif /* if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 ) */

        if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 8002756:	4b11      	ldr	r3, [pc, #68]	; (800279c <prvGetExpectedIdleTime+0x5c>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800275c:	2b00      	cmp	r3, #0
 800275e:	d002      	beq.n	8002766 <prvGetExpectedIdleTime+0x26>
        {
            xReturn = 0;
 8002760:	2300      	movs	r3, #0
 8002762:	607b      	str	r3, [r7, #4]
 8002764:	e012      	b.n	800278c <prvGetExpectedIdleTime+0x4c>
        }
        else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
 8002766:	4b0e      	ldr	r3, [pc, #56]	; (80027a0 <prvGetExpectedIdleTime+0x60>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	2b01      	cmp	r3, #1
 800276c:	d902      	bls.n	8002774 <prvGetExpectedIdleTime+0x34>
        {
            /* There are other idle priority tasks in the ready state.  If
             * time slicing is used then the very next tick interrupt must be
             * processed. */
            xReturn = 0;
 800276e:	2300      	movs	r3, #0
 8002770:	607b      	str	r3, [r7, #4]
 8002772:	e00b      	b.n	800278c <prvGetExpectedIdleTime+0x4c>
        }
        else if( uxHigherPriorityReadyTasks != pdFALSE )
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d002      	beq.n	8002780 <prvGetExpectedIdleTime+0x40>
        {
            /* There are tasks in the Ready state that have a priority above the
             * idle priority.  This path can only be reached if
             * configUSE_PREEMPTION is 0. */
            xReturn = 0;
 800277a:	2300      	movs	r3, #0
 800277c:	607b      	str	r3, [r7, #4]
 800277e:	e005      	b.n	800278c <prvGetExpectedIdleTime+0x4c>
        }
        else
        {
            xReturn = xNextTaskUnblockTime - xTickCount;
 8002780:	4b08      	ldr	r3, [pc, #32]	; (80027a4 <prvGetExpectedIdleTime+0x64>)
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	4b08      	ldr	r3, [pc, #32]	; (80027a8 <prvGetExpectedIdleTime+0x68>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	1ad3      	subs	r3, r2, r3
 800278a:	607b      	str	r3, [r7, #4]
        }

        return xReturn;
 800278c:	687b      	ldr	r3, [r7, #4]
    }
 800278e:	4618      	mov	r0, r3
 8002790:	370c      	adds	r7, #12
 8002792:	46bd      	mov	sp, r7
 8002794:	bc80      	pop	{r7}
 8002796:	4770      	bx	lr
 8002798:	20000188 	.word	0x20000188
 800279c:	200000a8 	.word	0x200000a8
 80027a0:	200000ac 	.word	0x200000ac
 80027a4:	200001a0 	.word	0x200001a0
 80027a8:	20000184 	.word	0x20000184

080027ac <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b088      	sub	sp, #32
 80027b0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80027b2:	2300      	movs	r3, #0
 80027b4:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 80027b6:	2300      	movs	r3, #0
 80027b8:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80027ba:	4b71      	ldr	r3, [pc, #452]	; (8002980 <xTaskResumeAll+0x1d4>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d10a      	bne.n	80027d8 <xTaskResumeAll+0x2c>
        __asm volatile
 80027c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027c6:	f383 8811 	msr	BASEPRI, r3
 80027ca:	f3bf 8f6f 	isb	sy
 80027ce:	f3bf 8f4f 	dsb	sy
 80027d2:	607b      	str	r3, [r7, #4]
    }
 80027d4:	bf00      	nop
 80027d6:	e7fe      	b.n	80027d6 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80027d8:	f001 fae2 	bl	8003da0 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80027dc:	4b68      	ldr	r3, [pc, #416]	; (8002980 <xTaskResumeAll+0x1d4>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	3b01      	subs	r3, #1
 80027e2:	4a67      	ldr	r2, [pc, #412]	; (8002980 <xTaskResumeAll+0x1d4>)
 80027e4:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80027e6:	4b66      	ldr	r3, [pc, #408]	; (8002980 <xTaskResumeAll+0x1d4>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	f040 80c1 	bne.w	8002972 <xTaskResumeAll+0x1c6>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80027f0:	4b64      	ldr	r3, [pc, #400]	; (8002984 <xTaskResumeAll+0x1d8>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	f000 80bc 	beq.w	8002972 <xTaskResumeAll+0x1c6>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80027fa:	e08b      	b.n	8002914 <xTaskResumeAll+0x168>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80027fc:	4b62      	ldr	r3, [pc, #392]	; (8002988 <xTaskResumeAll+0x1dc>)
 80027fe:	68db      	ldr	r3, [r3, #12]
 8002800:	68db      	ldr	r3, [r3, #12]
 8002802:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002804:	69fb      	ldr	r3, [r7, #28]
 8002806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002808:	613b      	str	r3, [r7, #16]
 800280a:	69fb      	ldr	r3, [r7, #28]
 800280c:	69db      	ldr	r3, [r3, #28]
 800280e:	69fa      	ldr	r2, [r7, #28]
 8002810:	6a12      	ldr	r2, [r2, #32]
 8002812:	609a      	str	r2, [r3, #8]
 8002814:	69fb      	ldr	r3, [r7, #28]
 8002816:	6a1b      	ldr	r3, [r3, #32]
 8002818:	69fa      	ldr	r2, [r7, #28]
 800281a:	69d2      	ldr	r2, [r2, #28]
 800281c:	605a      	str	r2, [r3, #4]
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	685a      	ldr	r2, [r3, #4]
 8002822:	69fb      	ldr	r3, [r7, #28]
 8002824:	3318      	adds	r3, #24
 8002826:	429a      	cmp	r2, r3
 8002828:	d103      	bne.n	8002832 <xTaskResumeAll+0x86>
 800282a:	69fb      	ldr	r3, [r7, #28]
 800282c:	6a1a      	ldr	r2, [r3, #32]
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	605a      	str	r2, [r3, #4]
 8002832:	69fb      	ldr	r3, [r7, #28]
 8002834:	2200      	movs	r2, #0
 8002836:	629a      	str	r2, [r3, #40]	; 0x28
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	1e5a      	subs	r2, r3, #1
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	695b      	ldr	r3, [r3, #20]
 8002846:	60fb      	str	r3, [r7, #12]
 8002848:	69fb      	ldr	r3, [r7, #28]
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	69fa      	ldr	r2, [r7, #28]
 800284e:	68d2      	ldr	r2, [r2, #12]
 8002850:	609a      	str	r2, [r3, #8]
 8002852:	69fb      	ldr	r3, [r7, #28]
 8002854:	68db      	ldr	r3, [r3, #12]
 8002856:	69fa      	ldr	r2, [r7, #28]
 8002858:	6892      	ldr	r2, [r2, #8]
 800285a:	605a      	str	r2, [r3, #4]
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	685a      	ldr	r2, [r3, #4]
 8002860:	69fb      	ldr	r3, [r7, #28]
 8002862:	3304      	adds	r3, #4
 8002864:	429a      	cmp	r2, r3
 8002866:	d103      	bne.n	8002870 <xTaskResumeAll+0xc4>
 8002868:	69fb      	ldr	r3, [r7, #28]
 800286a:	68da      	ldr	r2, [r3, #12]
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	605a      	str	r2, [r3, #4]
 8002870:	69fb      	ldr	r3, [r7, #28]
 8002872:	2200      	movs	r2, #0
 8002874:	615a      	str	r2, [r3, #20]
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	1e5a      	subs	r2, r3, #1
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8002880:	69fb      	ldr	r3, [r7, #28]
 8002882:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002884:	4b41      	ldr	r3, [pc, #260]	; (800298c <xTaskResumeAll+0x1e0>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	429a      	cmp	r2, r3
 800288a:	d903      	bls.n	8002894 <xTaskResumeAll+0xe8>
 800288c:	69fb      	ldr	r3, [r7, #28]
 800288e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002890:	4a3e      	ldr	r2, [pc, #248]	; (800298c <xTaskResumeAll+0x1e0>)
 8002892:	6013      	str	r3, [r2, #0]
 8002894:	69fb      	ldr	r3, [r7, #28]
 8002896:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002898:	493d      	ldr	r1, [pc, #244]	; (8002990 <xTaskResumeAll+0x1e4>)
 800289a:	4613      	mov	r3, r2
 800289c:	009b      	lsls	r3, r3, #2
 800289e:	4413      	add	r3, r2
 80028a0:	009b      	lsls	r3, r3, #2
 80028a2:	440b      	add	r3, r1
 80028a4:	3304      	adds	r3, #4
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	60bb      	str	r3, [r7, #8]
 80028aa:	69fb      	ldr	r3, [r7, #28]
 80028ac:	68ba      	ldr	r2, [r7, #8]
 80028ae:	609a      	str	r2, [r3, #8]
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	689a      	ldr	r2, [r3, #8]
 80028b4:	69fb      	ldr	r3, [r7, #28]
 80028b6:	60da      	str	r2, [r3, #12]
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	69fa      	ldr	r2, [r7, #28]
 80028be:	3204      	adds	r2, #4
 80028c0:	605a      	str	r2, [r3, #4]
 80028c2:	69fb      	ldr	r3, [r7, #28]
 80028c4:	1d1a      	adds	r2, r3, #4
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	609a      	str	r2, [r3, #8]
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028ce:	4613      	mov	r3, r2
 80028d0:	009b      	lsls	r3, r3, #2
 80028d2:	4413      	add	r3, r2
 80028d4:	009b      	lsls	r3, r3, #2
 80028d6:	4a2e      	ldr	r2, [pc, #184]	; (8002990 <xTaskResumeAll+0x1e4>)
 80028d8:	441a      	add	r2, r3
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	615a      	str	r2, [r3, #20]
 80028de:	69fb      	ldr	r3, [r7, #28]
 80028e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028e2:	492b      	ldr	r1, [pc, #172]	; (8002990 <xTaskResumeAll+0x1e4>)
 80028e4:	4613      	mov	r3, r2
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	4413      	add	r3, r2
 80028ea:	009b      	lsls	r3, r3, #2
 80028ec:	440b      	add	r3, r1
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	1c59      	adds	r1, r3, #1
 80028f2:	4827      	ldr	r0, [pc, #156]	; (8002990 <xTaskResumeAll+0x1e4>)
 80028f4:	4613      	mov	r3, r2
 80028f6:	009b      	lsls	r3, r3, #2
 80028f8:	4413      	add	r3, r2
 80028fa:	009b      	lsls	r3, r3, #2
 80028fc:	4403      	add	r3, r0
 80028fe:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002900:	69fb      	ldr	r3, [r7, #28]
 8002902:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002904:	4b23      	ldr	r3, [pc, #140]	; (8002994 <xTaskResumeAll+0x1e8>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800290a:	429a      	cmp	r2, r3
 800290c:	d302      	bcc.n	8002914 <xTaskResumeAll+0x168>
                    {
                        xYieldPending = pdTRUE;
 800290e:	4b22      	ldr	r3, [pc, #136]	; (8002998 <xTaskResumeAll+0x1ec>)
 8002910:	2201      	movs	r2, #1
 8002912:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002914:	4b1c      	ldr	r3, [pc, #112]	; (8002988 <xTaskResumeAll+0x1dc>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	2b00      	cmp	r3, #0
 800291a:	f47f af6f 	bne.w	80027fc <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800291e:	69fb      	ldr	r3, [r7, #28]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d001      	beq.n	8002928 <xTaskResumeAll+0x17c>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002924:	f000 fcd8 	bl	80032d8 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002928:	4b1c      	ldr	r3, [pc, #112]	; (800299c <xTaskResumeAll+0x1f0>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d010      	beq.n	8002956 <xTaskResumeAll+0x1aa>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002934:	f000 f89e 	bl	8002a74 <xTaskIncrementTick>
 8002938:	4603      	mov	r3, r0
 800293a:	2b00      	cmp	r3, #0
 800293c:	d002      	beq.n	8002944 <xTaskResumeAll+0x198>
                            {
                                xYieldPending = pdTRUE;
 800293e:	4b16      	ldr	r3, [pc, #88]	; (8002998 <xTaskResumeAll+0x1ec>)
 8002940:	2201      	movs	r2, #1
 8002942:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	3b01      	subs	r3, #1
 8002948:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d1f1      	bne.n	8002934 <xTaskResumeAll+0x188>

                        xPendedTicks = 0;
 8002950:	4b12      	ldr	r3, [pc, #72]	; (800299c <xTaskResumeAll+0x1f0>)
 8002952:	2200      	movs	r2, #0
 8002954:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002956:	4b10      	ldr	r3, [pc, #64]	; (8002998 <xTaskResumeAll+0x1ec>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d009      	beq.n	8002972 <xTaskResumeAll+0x1c6>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 800295e:	2301      	movs	r3, #1
 8002960:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8002962:	4b0f      	ldr	r3, [pc, #60]	; (80029a0 <xTaskResumeAll+0x1f4>)
 8002964:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002968:	601a      	str	r2, [r3, #0]
 800296a:	f3bf 8f4f 	dsb	sy
 800296e:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002972:	f001 fa45 	bl	8003e00 <vPortExitCritical>

    return xAlreadyYielded;
 8002976:	69bb      	ldr	r3, [r7, #24]
}
 8002978:	4618      	mov	r0, r3
 800297a:	3720      	adds	r7, #32
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}
 8002980:	200001a8 	.word	0x200001a8
 8002984:	20000180 	.word	0x20000180
 8002988:	20000140 	.word	0x20000140
 800298c:	20000188 	.word	0x20000188
 8002990:	200000ac 	.word	0x200000ac
 8002994:	200000a8 	.word	0x200000a8
 8002998:	20000194 	.word	0x20000194
 800299c:	20000190 	.word	0x20000190
 80029a0:	e000ed04 	.word	0xe000ed04

080029a4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80029a4:	b480      	push	{r7}
 80029a6:	b083      	sub	sp, #12
 80029a8:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80029aa:	4b04      	ldr	r3, [pc, #16]	; (80029bc <xTaskGetTickCount+0x18>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80029b0:	687b      	ldr	r3, [r7, #4]
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	370c      	adds	r7, #12
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bc80      	pop	{r7}
 80029ba:	4770      	bx	lr
 80029bc:	20000184 	.word	0x20000184

080029c0 <vTaskStepTick>:
 * implementations require configUSE_TICKLESS_IDLE to be set to a value other than
 * 1. */
#if ( configUSE_TICKLESS_IDLE != 0 )

    void vTaskStepTick( TickType_t xTicksToJump )
    {
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b086      	sub	sp, #24
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
        /* Correct the tick count value after a period during which the tick
         * was suppressed.  Note this does *not* call the tick hook function for
         * each stepped tick. */
        configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
 80029c8:	4b26      	ldr	r3, [pc, #152]	; (8002a64 <vTaskStepTick+0xa4>)
 80029ca:	681a      	ldr	r2, [r3, #0]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	441a      	add	r2, r3
 80029d0:	4b25      	ldr	r3, [pc, #148]	; (8002a68 <vTaskStepTick+0xa8>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	429a      	cmp	r2, r3
 80029d6:	d90a      	bls.n	80029ee <vTaskStepTick+0x2e>
        __asm volatile
 80029d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029dc:	f383 8811 	msr	BASEPRI, r3
 80029e0:	f3bf 8f6f 	isb	sy
 80029e4:	f3bf 8f4f 	dsb	sy
 80029e8:	617b      	str	r3, [r7, #20]
    }
 80029ea:	bf00      	nop
 80029ec:	e7fe      	b.n	80029ec <vTaskStepTick+0x2c>

        if( ( xTickCount + xTicksToJump ) == xNextTaskUnblockTime )
 80029ee:	4b1d      	ldr	r3, [pc, #116]	; (8002a64 <vTaskStepTick+0xa4>)
 80029f0:	681a      	ldr	r2, [r3, #0]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	441a      	add	r2, r3
 80029f6:	4b1c      	ldr	r3, [pc, #112]	; (8002a68 <vTaskStepTick+0xa8>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	429a      	cmp	r2, r3
 80029fc:	d128      	bne.n	8002a50 <vTaskStepTick+0x90>
        {
            /* Arrange for xTickCount to reach xNextTaskUnblockTime in
             * xTaskIncrementTick() when the scheduler resumes.  This ensures
             * that any delayed tasks are resumed at the correct time. */
            configASSERT( uxSchedulerSuspended );
 80029fe:	4b1b      	ldr	r3, [pc, #108]	; (8002a6c <vTaskStepTick+0xac>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d10a      	bne.n	8002a1c <vTaskStepTick+0x5c>
        __asm volatile
 8002a06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a0a:	f383 8811 	msr	BASEPRI, r3
 8002a0e:	f3bf 8f6f 	isb	sy
 8002a12:	f3bf 8f4f 	dsb	sy
 8002a16:	613b      	str	r3, [r7, #16]
    }
 8002a18:	bf00      	nop
 8002a1a:	e7fe      	b.n	8002a1a <vTaskStepTick+0x5a>
            configASSERT( xTicksToJump != ( TickType_t ) 0 );
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d10a      	bne.n	8002a38 <vTaskStepTick+0x78>
        __asm volatile
 8002a22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a26:	f383 8811 	msr	BASEPRI, r3
 8002a2a:	f3bf 8f6f 	isb	sy
 8002a2e:	f3bf 8f4f 	dsb	sy
 8002a32:	60fb      	str	r3, [r7, #12]
    }
 8002a34:	bf00      	nop
 8002a36:	e7fe      	b.n	8002a36 <vTaskStepTick+0x76>

            /* Prevent the tick interrupt modifying xPendedTicks simultaneously. */
            taskENTER_CRITICAL();
 8002a38:	f001 f9b2 	bl	8003da0 <vPortEnterCritical>
            {
                xPendedTicks++;
 8002a3c:	4b0c      	ldr	r3, [pc, #48]	; (8002a70 <vTaskStepTick+0xb0>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	3301      	adds	r3, #1
 8002a42:	4a0b      	ldr	r2, [pc, #44]	; (8002a70 <vTaskStepTick+0xb0>)
 8002a44:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8002a46:	f001 f9db 	bl	8003e00 <vPortExitCritical>
            xTicksToJump--;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	3b01      	subs	r3, #1
 8002a4e:	607b      	str	r3, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        xTickCount += xTicksToJump;
 8002a50:	4b04      	ldr	r3, [pc, #16]	; (8002a64 <vTaskStepTick+0xa4>)
 8002a52:	681a      	ldr	r2, [r3, #0]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	4413      	add	r3, r2
 8002a58:	4a02      	ldr	r2, [pc, #8]	; (8002a64 <vTaskStepTick+0xa4>)
 8002a5a:	6013      	str	r3, [r2, #0]
        traceINCREASE_TICK_COUNT( xTicksToJump );
    }
 8002a5c:	bf00      	nop
 8002a5e:	3718      	adds	r7, #24
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}
 8002a64:	20000184 	.word	0x20000184
 8002a68:	200001a0 	.word	0x200001a0
 8002a6c:	200001a8 	.word	0x200001a8
 8002a70:	20000190 	.word	0x20000190

08002a74 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b08a      	sub	sp, #40	; 0x28
 8002a78:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002a7e:	4b7e      	ldr	r3, [pc, #504]	; (8002c78 <xTaskIncrementTick+0x204>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	f040 80ed 	bne.w	8002c62 <xTaskIncrementTick+0x1ee>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002a88:	4b7c      	ldr	r3, [pc, #496]	; (8002c7c <xTaskIncrementTick+0x208>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	3301      	adds	r3, #1
 8002a8e:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002a90:	4a7a      	ldr	r2, [pc, #488]	; (8002c7c <xTaskIncrementTick+0x208>)
 8002a92:	6a3b      	ldr	r3, [r7, #32]
 8002a94:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002a96:	6a3b      	ldr	r3, [r7, #32]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d120      	bne.n	8002ade <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8002a9c:	4b78      	ldr	r3, [pc, #480]	; (8002c80 <xTaskIncrementTick+0x20c>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d00a      	beq.n	8002abc <xTaskIncrementTick+0x48>
        __asm volatile
 8002aa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002aaa:	f383 8811 	msr	BASEPRI, r3
 8002aae:	f3bf 8f6f 	isb	sy
 8002ab2:	f3bf 8f4f 	dsb	sy
 8002ab6:	607b      	str	r3, [r7, #4]
    }
 8002ab8:	bf00      	nop
 8002aba:	e7fe      	b.n	8002aba <xTaskIncrementTick+0x46>
 8002abc:	4b70      	ldr	r3, [pc, #448]	; (8002c80 <xTaskIncrementTick+0x20c>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	61fb      	str	r3, [r7, #28]
 8002ac2:	4b70      	ldr	r3, [pc, #448]	; (8002c84 <xTaskIncrementTick+0x210>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a6e      	ldr	r2, [pc, #440]	; (8002c80 <xTaskIncrementTick+0x20c>)
 8002ac8:	6013      	str	r3, [r2, #0]
 8002aca:	4a6e      	ldr	r2, [pc, #440]	; (8002c84 <xTaskIncrementTick+0x210>)
 8002acc:	69fb      	ldr	r3, [r7, #28]
 8002ace:	6013      	str	r3, [r2, #0]
 8002ad0:	4b6d      	ldr	r3, [pc, #436]	; (8002c88 <xTaskIncrementTick+0x214>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	3301      	adds	r3, #1
 8002ad6:	4a6c      	ldr	r2, [pc, #432]	; (8002c88 <xTaskIncrementTick+0x214>)
 8002ad8:	6013      	str	r3, [r2, #0]
 8002ada:	f000 fbfd 	bl	80032d8 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002ade:	4b6b      	ldr	r3, [pc, #428]	; (8002c8c <xTaskIncrementTick+0x218>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	6a3a      	ldr	r2, [r7, #32]
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	f0c0 80a7 	bcc.w	8002c38 <xTaskIncrementTick+0x1c4>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002aea:	4b65      	ldr	r3, [pc, #404]	; (8002c80 <xTaskIncrementTick+0x20c>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d104      	bne.n	8002afe <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002af4:	4b65      	ldr	r3, [pc, #404]	; (8002c8c <xTaskIncrementTick+0x218>)
 8002af6:	f04f 32ff 	mov.w	r2, #4294967295
 8002afa:	601a      	str	r2, [r3, #0]
                    break;
 8002afc:	e09c      	b.n	8002c38 <xTaskIncrementTick+0x1c4>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002afe:	4b60      	ldr	r3, [pc, #384]	; (8002c80 <xTaskIncrementTick+0x20c>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	68db      	ldr	r3, [r3, #12]
 8002b04:	68db      	ldr	r3, [r3, #12]
 8002b06:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002b08:	69bb      	ldr	r3, [r7, #24]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8002b0e:	6a3a      	ldr	r2, [r7, #32]
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	429a      	cmp	r2, r3
 8002b14:	d203      	bcs.n	8002b1e <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002b16:	4a5d      	ldr	r2, [pc, #372]	; (8002c8c <xTaskIncrementTick+0x218>)
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8002b1c:	e08c      	b.n	8002c38 <xTaskIncrementTick+0x1c4>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002b1e:	69bb      	ldr	r3, [r7, #24]
 8002b20:	695b      	ldr	r3, [r3, #20]
 8002b22:	613b      	str	r3, [r7, #16]
 8002b24:	69bb      	ldr	r3, [r7, #24]
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	69ba      	ldr	r2, [r7, #24]
 8002b2a:	68d2      	ldr	r2, [r2, #12]
 8002b2c:	609a      	str	r2, [r3, #8]
 8002b2e:	69bb      	ldr	r3, [r7, #24]
 8002b30:	68db      	ldr	r3, [r3, #12]
 8002b32:	69ba      	ldr	r2, [r7, #24]
 8002b34:	6892      	ldr	r2, [r2, #8]
 8002b36:	605a      	str	r2, [r3, #4]
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	685a      	ldr	r2, [r3, #4]
 8002b3c:	69bb      	ldr	r3, [r7, #24]
 8002b3e:	3304      	adds	r3, #4
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d103      	bne.n	8002b4c <xTaskIncrementTick+0xd8>
 8002b44:	69bb      	ldr	r3, [r7, #24]
 8002b46:	68da      	ldr	r2, [r3, #12]
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	605a      	str	r2, [r3, #4]
 8002b4c:	69bb      	ldr	r3, [r7, #24]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	615a      	str	r2, [r3, #20]
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	1e5a      	subs	r2, r3, #1
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002b5c:	69bb      	ldr	r3, [r7, #24]
 8002b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d01e      	beq.n	8002ba2 <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002b64:	69bb      	ldr	r3, [r7, #24]
 8002b66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b68:	60fb      	str	r3, [r7, #12]
 8002b6a:	69bb      	ldr	r3, [r7, #24]
 8002b6c:	69db      	ldr	r3, [r3, #28]
 8002b6e:	69ba      	ldr	r2, [r7, #24]
 8002b70:	6a12      	ldr	r2, [r2, #32]
 8002b72:	609a      	str	r2, [r3, #8]
 8002b74:	69bb      	ldr	r3, [r7, #24]
 8002b76:	6a1b      	ldr	r3, [r3, #32]
 8002b78:	69ba      	ldr	r2, [r7, #24]
 8002b7a:	69d2      	ldr	r2, [r2, #28]
 8002b7c:	605a      	str	r2, [r3, #4]
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	685a      	ldr	r2, [r3, #4]
 8002b82:	69bb      	ldr	r3, [r7, #24]
 8002b84:	3318      	adds	r3, #24
 8002b86:	429a      	cmp	r2, r3
 8002b88:	d103      	bne.n	8002b92 <xTaskIncrementTick+0x11e>
 8002b8a:	69bb      	ldr	r3, [r7, #24]
 8002b8c:	6a1a      	ldr	r2, [r3, #32]
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	605a      	str	r2, [r3, #4]
 8002b92:	69bb      	ldr	r3, [r7, #24]
 8002b94:	2200      	movs	r2, #0
 8002b96:	629a      	str	r2, [r3, #40]	; 0x28
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	1e5a      	subs	r2, r3, #1
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002ba2:	69bb      	ldr	r3, [r7, #24]
 8002ba4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ba6:	4b3a      	ldr	r3, [pc, #232]	; (8002c90 <xTaskIncrementTick+0x21c>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	429a      	cmp	r2, r3
 8002bac:	d903      	bls.n	8002bb6 <xTaskIncrementTick+0x142>
 8002bae:	69bb      	ldr	r3, [r7, #24]
 8002bb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bb2:	4a37      	ldr	r2, [pc, #220]	; (8002c90 <xTaskIncrementTick+0x21c>)
 8002bb4:	6013      	str	r3, [r2, #0]
 8002bb6:	69bb      	ldr	r3, [r7, #24]
 8002bb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bba:	4936      	ldr	r1, [pc, #216]	; (8002c94 <xTaskIncrementTick+0x220>)
 8002bbc:	4613      	mov	r3, r2
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	4413      	add	r3, r2
 8002bc2:	009b      	lsls	r3, r3, #2
 8002bc4:	440b      	add	r3, r1
 8002bc6:	3304      	adds	r3, #4
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	60bb      	str	r3, [r7, #8]
 8002bcc:	69bb      	ldr	r3, [r7, #24]
 8002bce:	68ba      	ldr	r2, [r7, #8]
 8002bd0:	609a      	str	r2, [r3, #8]
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	689a      	ldr	r2, [r3, #8]
 8002bd6:	69bb      	ldr	r3, [r7, #24]
 8002bd8:	60da      	str	r2, [r3, #12]
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	69ba      	ldr	r2, [r7, #24]
 8002be0:	3204      	adds	r2, #4
 8002be2:	605a      	str	r2, [r3, #4]
 8002be4:	69bb      	ldr	r3, [r7, #24]
 8002be6:	1d1a      	adds	r2, r3, #4
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	609a      	str	r2, [r3, #8]
 8002bec:	69bb      	ldr	r3, [r7, #24]
 8002bee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bf0:	4613      	mov	r3, r2
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	4413      	add	r3, r2
 8002bf6:	009b      	lsls	r3, r3, #2
 8002bf8:	4a26      	ldr	r2, [pc, #152]	; (8002c94 <xTaskIncrementTick+0x220>)
 8002bfa:	441a      	add	r2, r3
 8002bfc:	69bb      	ldr	r3, [r7, #24]
 8002bfe:	615a      	str	r2, [r3, #20]
 8002c00:	69bb      	ldr	r3, [r7, #24]
 8002c02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c04:	4923      	ldr	r1, [pc, #140]	; (8002c94 <xTaskIncrementTick+0x220>)
 8002c06:	4613      	mov	r3, r2
 8002c08:	009b      	lsls	r3, r3, #2
 8002c0a:	4413      	add	r3, r2
 8002c0c:	009b      	lsls	r3, r3, #2
 8002c0e:	440b      	add	r3, r1
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	1c59      	adds	r1, r3, #1
 8002c14:	481f      	ldr	r0, [pc, #124]	; (8002c94 <xTaskIncrementTick+0x220>)
 8002c16:	4613      	mov	r3, r2
 8002c18:	009b      	lsls	r3, r3, #2
 8002c1a:	4413      	add	r3, r2
 8002c1c:	009b      	lsls	r3, r3, #2
 8002c1e:	4403      	add	r3, r0
 8002c20:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002c22:	69bb      	ldr	r3, [r7, #24]
 8002c24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c26:	4b1c      	ldr	r3, [pc, #112]	; (8002c98 <xTaskIncrementTick+0x224>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c2c:	429a      	cmp	r2, r3
 8002c2e:	f67f af5c 	bls.w	8002aea <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 8002c32:	2301      	movs	r3, #1
 8002c34:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002c36:	e758      	b.n	8002aea <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002c38:	4b17      	ldr	r3, [pc, #92]	; (8002c98 <xTaskIncrementTick+0x224>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c3e:	4915      	ldr	r1, [pc, #84]	; (8002c94 <xTaskIncrementTick+0x220>)
 8002c40:	4613      	mov	r3, r2
 8002c42:	009b      	lsls	r3, r3, #2
 8002c44:	4413      	add	r3, r2
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	440b      	add	r3, r1
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d901      	bls.n	8002c54 <xTaskIncrementTick+0x1e0>
            {
                xSwitchRequired = pdTRUE;
 8002c50:	2301      	movs	r3, #1
 8002c52:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8002c54:	4b11      	ldr	r3, [pc, #68]	; (8002c9c <xTaskIncrementTick+0x228>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d007      	beq.n	8002c6c <xTaskIncrementTick+0x1f8>
            {
                xSwitchRequired = pdTRUE;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	627b      	str	r3, [r7, #36]	; 0x24
 8002c60:	e004      	b.n	8002c6c <xTaskIncrementTick+0x1f8>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002c62:	4b0f      	ldr	r3, [pc, #60]	; (8002ca0 <xTaskIncrementTick+0x22c>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	3301      	adds	r3, #1
 8002c68:	4a0d      	ldr	r2, [pc, #52]	; (8002ca0 <xTaskIncrementTick+0x22c>)
 8002c6a:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8002c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	3728      	adds	r7, #40	; 0x28
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	bf00      	nop
 8002c78:	200001a8 	.word	0x200001a8
 8002c7c:	20000184 	.word	0x20000184
 8002c80:	20000138 	.word	0x20000138
 8002c84:	2000013c 	.word	0x2000013c
 8002c88:	20000198 	.word	0x20000198
 8002c8c:	200001a0 	.word	0x200001a0
 8002c90:	20000188 	.word	0x20000188
 8002c94:	200000ac 	.word	0x200000ac
 8002c98:	200000a8 	.word	0x200000a8
 8002c9c:	20000194 	.word	0x20000194
 8002ca0:	20000190 	.word	0x20000190

08002ca4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b085      	sub	sp, #20
 8002ca8:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002caa:	4b27      	ldr	r3, [pc, #156]	; (8002d48 <vTaskSwitchContext+0xa4>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d003      	beq.n	8002cba <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002cb2:	4b26      	ldr	r3, [pc, #152]	; (8002d4c <vTaskSwitchContext+0xa8>)
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8002cb8:	e041      	b.n	8002d3e <vTaskSwitchContext+0x9a>
        xYieldPending = pdFALSE;
 8002cba:	4b24      	ldr	r3, [pc, #144]	; (8002d4c <vTaskSwitchContext+0xa8>)
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002cc0:	4b23      	ldr	r3, [pc, #140]	; (8002d50 <vTaskSwitchContext+0xac>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	60fb      	str	r3, [r7, #12]
 8002cc6:	e010      	b.n	8002cea <vTaskSwitchContext+0x46>
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d10a      	bne.n	8002ce4 <vTaskSwitchContext+0x40>
        __asm volatile
 8002cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cd2:	f383 8811 	msr	BASEPRI, r3
 8002cd6:	f3bf 8f6f 	isb	sy
 8002cda:	f3bf 8f4f 	dsb	sy
 8002cde:	607b      	str	r3, [r7, #4]
    }
 8002ce0:	bf00      	nop
 8002ce2:	e7fe      	b.n	8002ce2 <vTaskSwitchContext+0x3e>
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	3b01      	subs	r3, #1
 8002ce8:	60fb      	str	r3, [r7, #12]
 8002cea:	491a      	ldr	r1, [pc, #104]	; (8002d54 <vTaskSwitchContext+0xb0>)
 8002cec:	68fa      	ldr	r2, [r7, #12]
 8002cee:	4613      	mov	r3, r2
 8002cf0:	009b      	lsls	r3, r3, #2
 8002cf2:	4413      	add	r3, r2
 8002cf4:	009b      	lsls	r3, r3, #2
 8002cf6:	440b      	add	r3, r1
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d0e4      	beq.n	8002cc8 <vTaskSwitchContext+0x24>
 8002cfe:	68fa      	ldr	r2, [r7, #12]
 8002d00:	4613      	mov	r3, r2
 8002d02:	009b      	lsls	r3, r3, #2
 8002d04:	4413      	add	r3, r2
 8002d06:	009b      	lsls	r3, r3, #2
 8002d08:	4a12      	ldr	r2, [pc, #72]	; (8002d54 <vTaskSwitchContext+0xb0>)
 8002d0a:	4413      	add	r3, r2
 8002d0c:	60bb      	str	r3, [r7, #8]
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	685a      	ldr	r2, [r3, #4]
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	605a      	str	r2, [r3, #4]
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	685a      	ldr	r2, [r3, #4]
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	3308      	adds	r3, #8
 8002d20:	429a      	cmp	r2, r3
 8002d22:	d104      	bne.n	8002d2e <vTaskSwitchContext+0x8a>
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	685a      	ldr	r2, [r3, #4]
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	605a      	str	r2, [r3, #4]
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	68db      	ldr	r3, [r3, #12]
 8002d34:	4a08      	ldr	r2, [pc, #32]	; (8002d58 <vTaskSwitchContext+0xb4>)
 8002d36:	6013      	str	r3, [r2, #0]
 8002d38:	4a05      	ldr	r2, [pc, #20]	; (8002d50 <vTaskSwitchContext+0xac>)
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	6013      	str	r3, [r2, #0]
}
 8002d3e:	bf00      	nop
 8002d40:	3714      	adds	r7, #20
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bc80      	pop	{r7}
 8002d46:	4770      	bx	lr
 8002d48:	200001a8 	.word	0x200001a8
 8002d4c:	20000194 	.word	0x20000194
 8002d50:	20000188 	.word	0x20000188
 8002d54:	200000ac 	.word	0x200000ac
 8002d58:	200000a8 	.word	0x200000a8

08002d5c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b084      	sub	sp, #16
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
 8002d64:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d10a      	bne.n	8002d82 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8002d6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d70:	f383 8811 	msr	BASEPRI, r3
 8002d74:	f3bf 8f6f 	isb	sy
 8002d78:	f3bf 8f4f 	dsb	sy
 8002d7c:	60fb      	str	r3, [r7, #12]
    }
 8002d7e:	bf00      	nop
 8002d80:	e7fe      	b.n	8002d80 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002d82:	4b07      	ldr	r3, [pc, #28]	; (8002da0 <vTaskPlaceOnEventList+0x44>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	3318      	adds	r3, #24
 8002d88:	4619      	mov	r1, r3
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f000 feb1 	bl	8003af2 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002d90:	2101      	movs	r1, #1
 8002d92:	6838      	ldr	r0, [r7, #0]
 8002d94:	f000 fb6e 	bl	8003474 <prvAddCurrentTaskToDelayedList>
}
 8002d98:	bf00      	nop
 8002d9a:	3710      	adds	r7, #16
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}
 8002da0:	200000a8 	.word	0x200000a8

08002da4 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b086      	sub	sp, #24
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	60f8      	str	r0, [r7, #12]
 8002dac:	60b9      	str	r1, [r7, #8]
 8002dae:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d10a      	bne.n	8002dcc <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8002db6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dba:	f383 8811 	msr	BASEPRI, r3
 8002dbe:	f3bf 8f6f 	isb	sy
 8002dc2:	f3bf 8f4f 	dsb	sy
 8002dc6:	613b      	str	r3, [r7, #16]
    }
 8002dc8:	bf00      	nop
 8002dca:	e7fe      	b.n	8002dca <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	617b      	str	r3, [r7, #20]
 8002dd2:	4b16      	ldr	r3, [pc, #88]	; (8002e2c <vTaskPlaceOnEventListRestricted+0x88>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	697a      	ldr	r2, [r7, #20]
 8002dd8:	61da      	str	r2, [r3, #28]
 8002dda:	4b14      	ldr	r3, [pc, #80]	; (8002e2c <vTaskPlaceOnEventListRestricted+0x88>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	697a      	ldr	r2, [r7, #20]
 8002de0:	6892      	ldr	r2, [r2, #8]
 8002de2:	621a      	str	r2, [r3, #32]
 8002de4:	4b11      	ldr	r3, [pc, #68]	; (8002e2c <vTaskPlaceOnEventListRestricted+0x88>)
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	3218      	adds	r2, #24
 8002dee:	605a      	str	r2, [r3, #4]
 8002df0:	4b0e      	ldr	r3, [pc, #56]	; (8002e2c <vTaskPlaceOnEventListRestricted+0x88>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f103 0218 	add.w	r2, r3, #24
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	609a      	str	r2, [r3, #8]
 8002dfc:	4b0b      	ldr	r3, [pc, #44]	; (8002e2c <vTaskPlaceOnEventListRestricted+0x88>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	68fa      	ldr	r2, [r7, #12]
 8002e02:	629a      	str	r2, [r3, #40]	; 0x28
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	1c5a      	adds	r2, r3, #1
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d002      	beq.n	8002e1a <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 8002e14:	f04f 33ff 	mov.w	r3, #4294967295
 8002e18:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8002e1a:	6879      	ldr	r1, [r7, #4]
 8002e1c:	68b8      	ldr	r0, [r7, #8]
 8002e1e:	f000 fb29 	bl	8003474 <prvAddCurrentTaskToDelayedList>
    }
 8002e22:	bf00      	nop
 8002e24:	3718      	adds	r7, #24
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}
 8002e2a:	bf00      	nop
 8002e2c:	200000a8 	.word	0x200000a8

08002e30 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b08a      	sub	sp, #40	; 0x28
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	68db      	ldr	r3, [r3, #12]
 8002e3c:	68db      	ldr	r3, [r3, #12]
 8002e3e:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8002e40:	6a3b      	ldr	r3, [r7, #32]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d10a      	bne.n	8002e5c <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8002e46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e4a:	f383 8811 	msr	BASEPRI, r3
 8002e4e:	f3bf 8f6f 	isb	sy
 8002e52:	f3bf 8f4f 	dsb	sy
 8002e56:	60fb      	str	r3, [r7, #12]
    }
 8002e58:	bf00      	nop
 8002e5a:	e7fe      	b.n	8002e5a <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8002e5c:	6a3b      	ldr	r3, [r7, #32]
 8002e5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e60:	61fb      	str	r3, [r7, #28]
 8002e62:	6a3b      	ldr	r3, [r7, #32]
 8002e64:	69db      	ldr	r3, [r3, #28]
 8002e66:	6a3a      	ldr	r2, [r7, #32]
 8002e68:	6a12      	ldr	r2, [r2, #32]
 8002e6a:	609a      	str	r2, [r3, #8]
 8002e6c:	6a3b      	ldr	r3, [r7, #32]
 8002e6e:	6a1b      	ldr	r3, [r3, #32]
 8002e70:	6a3a      	ldr	r2, [r7, #32]
 8002e72:	69d2      	ldr	r2, [r2, #28]
 8002e74:	605a      	str	r2, [r3, #4]
 8002e76:	69fb      	ldr	r3, [r7, #28]
 8002e78:	685a      	ldr	r2, [r3, #4]
 8002e7a:	6a3b      	ldr	r3, [r7, #32]
 8002e7c:	3318      	adds	r3, #24
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	d103      	bne.n	8002e8a <xTaskRemoveFromEventList+0x5a>
 8002e82:	6a3b      	ldr	r3, [r7, #32]
 8002e84:	6a1a      	ldr	r2, [r3, #32]
 8002e86:	69fb      	ldr	r3, [r7, #28]
 8002e88:	605a      	str	r2, [r3, #4]
 8002e8a:	6a3b      	ldr	r3, [r7, #32]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	629a      	str	r2, [r3, #40]	; 0x28
 8002e90:	69fb      	ldr	r3, [r7, #28]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	1e5a      	subs	r2, r3, #1
 8002e96:	69fb      	ldr	r3, [r7, #28]
 8002e98:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002e9a:	4b4b      	ldr	r3, [pc, #300]	; (8002fc8 <xTaskRemoveFromEventList+0x198>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d161      	bne.n	8002f66 <xTaskRemoveFromEventList+0x136>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8002ea2:	6a3b      	ldr	r3, [r7, #32]
 8002ea4:	695b      	ldr	r3, [r3, #20]
 8002ea6:	617b      	str	r3, [r7, #20]
 8002ea8:	6a3b      	ldr	r3, [r7, #32]
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	6a3a      	ldr	r2, [r7, #32]
 8002eae:	68d2      	ldr	r2, [r2, #12]
 8002eb0:	609a      	str	r2, [r3, #8]
 8002eb2:	6a3b      	ldr	r3, [r7, #32]
 8002eb4:	68db      	ldr	r3, [r3, #12]
 8002eb6:	6a3a      	ldr	r2, [r7, #32]
 8002eb8:	6892      	ldr	r2, [r2, #8]
 8002eba:	605a      	str	r2, [r3, #4]
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	685a      	ldr	r2, [r3, #4]
 8002ec0:	6a3b      	ldr	r3, [r7, #32]
 8002ec2:	3304      	adds	r3, #4
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	d103      	bne.n	8002ed0 <xTaskRemoveFromEventList+0xa0>
 8002ec8:	6a3b      	ldr	r3, [r7, #32]
 8002eca:	68da      	ldr	r2, [r3, #12]
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	605a      	str	r2, [r3, #4]
 8002ed0:	6a3b      	ldr	r3, [r7, #32]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	615a      	str	r2, [r3, #20]
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	1e5a      	subs	r2, r3, #1
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8002ee0:	6a3b      	ldr	r3, [r7, #32]
 8002ee2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ee4:	4b39      	ldr	r3, [pc, #228]	; (8002fcc <xTaskRemoveFromEventList+0x19c>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	d903      	bls.n	8002ef4 <xTaskRemoveFromEventList+0xc4>
 8002eec:	6a3b      	ldr	r3, [r7, #32]
 8002eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ef0:	4a36      	ldr	r2, [pc, #216]	; (8002fcc <xTaskRemoveFromEventList+0x19c>)
 8002ef2:	6013      	str	r3, [r2, #0]
 8002ef4:	6a3b      	ldr	r3, [r7, #32]
 8002ef6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ef8:	4935      	ldr	r1, [pc, #212]	; (8002fd0 <xTaskRemoveFromEventList+0x1a0>)
 8002efa:	4613      	mov	r3, r2
 8002efc:	009b      	lsls	r3, r3, #2
 8002efe:	4413      	add	r3, r2
 8002f00:	009b      	lsls	r3, r3, #2
 8002f02:	440b      	add	r3, r1
 8002f04:	3304      	adds	r3, #4
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	613b      	str	r3, [r7, #16]
 8002f0a:	6a3b      	ldr	r3, [r7, #32]
 8002f0c:	693a      	ldr	r2, [r7, #16]
 8002f0e:	609a      	str	r2, [r3, #8]
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	689a      	ldr	r2, [r3, #8]
 8002f14:	6a3b      	ldr	r3, [r7, #32]
 8002f16:	60da      	str	r2, [r3, #12]
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	6a3a      	ldr	r2, [r7, #32]
 8002f1e:	3204      	adds	r2, #4
 8002f20:	605a      	str	r2, [r3, #4]
 8002f22:	6a3b      	ldr	r3, [r7, #32]
 8002f24:	1d1a      	adds	r2, r3, #4
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	609a      	str	r2, [r3, #8]
 8002f2a:	6a3b      	ldr	r3, [r7, #32]
 8002f2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f2e:	4613      	mov	r3, r2
 8002f30:	009b      	lsls	r3, r3, #2
 8002f32:	4413      	add	r3, r2
 8002f34:	009b      	lsls	r3, r3, #2
 8002f36:	4a26      	ldr	r2, [pc, #152]	; (8002fd0 <xTaskRemoveFromEventList+0x1a0>)
 8002f38:	441a      	add	r2, r3
 8002f3a:	6a3b      	ldr	r3, [r7, #32]
 8002f3c:	615a      	str	r2, [r3, #20]
 8002f3e:	6a3b      	ldr	r3, [r7, #32]
 8002f40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f42:	4923      	ldr	r1, [pc, #140]	; (8002fd0 <xTaskRemoveFromEventList+0x1a0>)
 8002f44:	4613      	mov	r3, r2
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	4413      	add	r3, r2
 8002f4a:	009b      	lsls	r3, r3, #2
 8002f4c:	440b      	add	r3, r1
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	1c59      	adds	r1, r3, #1
 8002f52:	481f      	ldr	r0, [pc, #124]	; (8002fd0 <xTaskRemoveFromEventList+0x1a0>)
 8002f54:	4613      	mov	r3, r2
 8002f56:	009b      	lsls	r3, r3, #2
 8002f58:	4413      	add	r3, r2
 8002f5a:	009b      	lsls	r3, r3, #2
 8002f5c:	4403      	add	r3, r0
 8002f5e:	6019      	str	r1, [r3, #0]
             * normally left unchanged, because it is automatically reset to a new
             * value when the tick count equals xNextTaskUnblockTime.  However if
             * tickless idling is used it might be more important to enter sleep mode
             * at the earliest possible time - so reset xNextTaskUnblockTime here to
             * ensure it is updated at the earliest possible time. */
            prvResetNextTaskUnblockTime();
 8002f60:	f000 f9ba 	bl	80032d8 <prvResetNextTaskUnblockTime>
 8002f64:	e01b      	b.n	8002f9e <xTaskRemoveFromEventList+0x16e>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002f66:	4b1b      	ldr	r3, [pc, #108]	; (8002fd4 <xTaskRemoveFromEventList+0x1a4>)
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	61bb      	str	r3, [r7, #24]
 8002f6c:	6a3b      	ldr	r3, [r7, #32]
 8002f6e:	69ba      	ldr	r2, [r7, #24]
 8002f70:	61da      	str	r2, [r3, #28]
 8002f72:	69bb      	ldr	r3, [r7, #24]
 8002f74:	689a      	ldr	r2, [r3, #8]
 8002f76:	6a3b      	ldr	r3, [r7, #32]
 8002f78:	621a      	str	r2, [r3, #32]
 8002f7a:	69bb      	ldr	r3, [r7, #24]
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	6a3a      	ldr	r2, [r7, #32]
 8002f80:	3218      	adds	r2, #24
 8002f82:	605a      	str	r2, [r3, #4]
 8002f84:	6a3b      	ldr	r3, [r7, #32]
 8002f86:	f103 0218 	add.w	r2, r3, #24
 8002f8a:	69bb      	ldr	r3, [r7, #24]
 8002f8c:	609a      	str	r2, [r3, #8]
 8002f8e:	6a3b      	ldr	r3, [r7, #32]
 8002f90:	4a10      	ldr	r2, [pc, #64]	; (8002fd4 <xTaskRemoveFromEventList+0x1a4>)
 8002f92:	629a      	str	r2, [r3, #40]	; 0x28
 8002f94:	4b0f      	ldr	r3, [pc, #60]	; (8002fd4 <xTaskRemoveFromEventList+0x1a4>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	3301      	adds	r3, #1
 8002f9a:	4a0e      	ldr	r2, [pc, #56]	; (8002fd4 <xTaskRemoveFromEventList+0x1a4>)
 8002f9c:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002f9e:	6a3b      	ldr	r3, [r7, #32]
 8002fa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fa2:	4b0d      	ldr	r3, [pc, #52]	; (8002fd8 <xTaskRemoveFromEventList+0x1a8>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	d905      	bls.n	8002fb8 <xTaskRemoveFromEventList+0x188>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8002fac:	2301      	movs	r3, #1
 8002fae:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8002fb0:	4b0a      	ldr	r3, [pc, #40]	; (8002fdc <xTaskRemoveFromEventList+0x1ac>)
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	601a      	str	r2, [r3, #0]
 8002fb6:	e001      	b.n	8002fbc <xTaskRemoveFromEventList+0x18c>
    }
    else
    {
        xReturn = pdFALSE;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 8002fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3728      	adds	r7, #40	; 0x28
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	bf00      	nop
 8002fc8:	200001a8 	.word	0x200001a8
 8002fcc:	20000188 	.word	0x20000188
 8002fd0:	200000ac 	.word	0x200000ac
 8002fd4:	20000140 	.word	0x20000140
 8002fd8:	200000a8 	.word	0x200000a8
 8002fdc:	20000194 	.word	0x20000194

08002fe0 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b083      	sub	sp, #12
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002fe8:	4b06      	ldr	r3, [pc, #24]	; (8003004 <vTaskInternalSetTimeOutState+0x24>)
 8002fea:	681a      	ldr	r2, [r3, #0]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8002ff0:	4b05      	ldr	r3, [pc, #20]	; (8003008 <vTaskInternalSetTimeOutState+0x28>)
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	605a      	str	r2, [r3, #4]
}
 8002ff8:	bf00      	nop
 8002ffa:	370c      	adds	r7, #12
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bc80      	pop	{r7}
 8003000:	4770      	bx	lr
 8003002:	bf00      	nop
 8003004:	20000198 	.word	0x20000198
 8003008:	20000184 	.word	0x20000184

0800300c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b088      	sub	sp, #32
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
 8003014:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d10a      	bne.n	8003032 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 800301c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003020:	f383 8811 	msr	BASEPRI, r3
 8003024:	f3bf 8f6f 	isb	sy
 8003028:	f3bf 8f4f 	dsb	sy
 800302c:	613b      	str	r3, [r7, #16]
    }
 800302e:	bf00      	nop
 8003030:	e7fe      	b.n	8003030 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d10a      	bne.n	800304e <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8003038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800303c:	f383 8811 	msr	BASEPRI, r3
 8003040:	f3bf 8f6f 	isb	sy
 8003044:	f3bf 8f4f 	dsb	sy
 8003048:	60fb      	str	r3, [r7, #12]
    }
 800304a:	bf00      	nop
 800304c:	e7fe      	b.n	800304c <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 800304e:	f000 fea7 	bl	8003da0 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003052:	4b1f      	ldr	r3, [pc, #124]	; (80030d0 <xTaskCheckForTimeOut+0xc4>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	69ba      	ldr	r2, [r7, #24]
 800305e:	1ad3      	subs	r3, r2, r3
 8003060:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f1b3 3fff 	cmp.w	r3, #4294967295
 800306a:	d102      	bne.n	8003072 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 800306c:	2300      	movs	r3, #0
 800306e:	61fb      	str	r3, [r7, #28]
 8003070:	e026      	b.n	80030c0 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	4b17      	ldr	r3, [pc, #92]	; (80030d4 <xTaskCheckForTimeOut+0xc8>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	429a      	cmp	r2, r3
 800307c:	d00a      	beq.n	8003094 <xTaskCheckForTimeOut+0x88>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	69ba      	ldr	r2, [r7, #24]
 8003084:	429a      	cmp	r2, r3
 8003086:	d305      	bcc.n	8003094 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003088:	2301      	movs	r3, #1
 800308a:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	2200      	movs	r2, #0
 8003090:	601a      	str	r2, [r3, #0]
 8003092:	e015      	b.n	80030c0 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	697a      	ldr	r2, [r7, #20]
 800309a:	429a      	cmp	r2, r3
 800309c:	d20b      	bcs.n	80030b6 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	1ad2      	subs	r2, r2, r3
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	f7ff ff98 	bl	8002fe0 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80030b0:	2300      	movs	r3, #0
 80030b2:	61fb      	str	r3, [r7, #28]
 80030b4:	e004      	b.n	80030c0 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	2200      	movs	r2, #0
 80030ba:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80030bc:	2301      	movs	r3, #1
 80030be:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80030c0:	f000 fe9e 	bl	8003e00 <vPortExitCritical>

    return xReturn;
 80030c4:	69fb      	ldr	r3, [r7, #28]
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3720      	adds	r7, #32
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}
 80030ce:	bf00      	nop
 80030d0:	20000184 	.word	0x20000184
 80030d4:	20000198 	.word	0x20000198

080030d8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80030d8:	b480      	push	{r7}
 80030da:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80030dc:	4b03      	ldr	r3, [pc, #12]	; (80030ec <vTaskMissedYield+0x14>)
 80030de:	2201      	movs	r2, #1
 80030e0:	601a      	str	r2, [r3, #0]
}
 80030e2:	bf00      	nop
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bc80      	pop	{r7}
 80030e8:	4770      	bx	lr
 80030ea:	bf00      	nop
 80030ec:	20000194 	.word	0x20000194

080030f0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b084      	sub	sp, #16
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80030f8:	f000 f8b0 	bl	800325c <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80030fc:	4b18      	ldr	r3, [pc, #96]	; (8003160 <prvIdleTask+0x70>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	2b01      	cmp	r3, #1
 8003102:	d907      	bls.n	8003114 <prvIdleTask+0x24>
            {
                taskYIELD();
 8003104:	4b17      	ldr	r3, [pc, #92]	; (8003164 <prvIdleTask+0x74>)
 8003106:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800310a:	601a      	str	r2, [r3, #0]
 800310c:	f3bf 8f4f 	dsb	sy
 8003110:	f3bf 8f6f 	isb	sy
            /* It is not desirable to suspend then resume the scheduler on
             * each iteration of the idle task.  Therefore, a preliminary
             * test of the expected idle time is performed without the
             * scheduler suspended.  The result here is not necessarily
             * valid. */
            xExpectedIdleTime = prvGetExpectedIdleTime();
 8003114:	f7ff fb14 	bl	8002740 <prvGetExpectedIdleTime>
 8003118:	60f8      	str	r0, [r7, #12]

            if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	2b01      	cmp	r3, #1
 800311e:	d9eb      	bls.n	80030f8 <prvIdleTask+0x8>
            {
                vTaskSuspendAll();
 8003120:	f7ff fb00 	bl	8002724 <vTaskSuspendAll>
                {
                    /* Now the scheduler is suspended, the expected idle
                     * time can be sampled again, and this time its value can
                     * be used. */
                    configASSERT( xNextTaskUnblockTime >= xTickCount );
 8003124:	4b10      	ldr	r3, [pc, #64]	; (8003168 <prvIdleTask+0x78>)
 8003126:	681a      	ldr	r2, [r3, #0]
 8003128:	4b10      	ldr	r3, [pc, #64]	; (800316c <prvIdleTask+0x7c>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	429a      	cmp	r2, r3
 800312e:	d20a      	bcs.n	8003146 <prvIdleTask+0x56>
        __asm volatile
 8003130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003134:	f383 8811 	msr	BASEPRI, r3
 8003138:	f3bf 8f6f 	isb	sy
 800313c:	f3bf 8f4f 	dsb	sy
 8003140:	60bb      	str	r3, [r7, #8]
    }
 8003142:	bf00      	nop
 8003144:	e7fe      	b.n	8003144 <prvIdleTask+0x54>
                    xExpectedIdleTime = prvGetExpectedIdleTime();
 8003146:	f7ff fafb 	bl	8002740 <prvGetExpectedIdleTime>
 800314a:	60f8      	str	r0, [r7, #12]
                    /* Define the following macro to set xExpectedIdleTime to 0
                     * if the application does not want
                     * portSUPPRESS_TICKS_AND_SLEEP() to be called. */
                    configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );

                    if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	2b01      	cmp	r3, #1
 8003150:	d902      	bls.n	8003158 <prvIdleTask+0x68>
                    {
                        traceLOW_POWER_IDLE_BEGIN();
                        portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
 8003152:	68f8      	ldr	r0, [r7, #12]
 8003154:	f000 fec2 	bl	8003edc <vPortSuppressTicksAndSleep>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                ( void ) xTaskResumeAll();
 8003158:	f7ff fb28 	bl	80027ac <xTaskResumeAll>
        prvCheckTasksWaitingTermination();
 800315c:	e7cc      	b.n	80030f8 <prvIdleTask+0x8>
 800315e:	bf00      	nop
 8003160:	200000ac 	.word	0x200000ac
 8003164:	e000ed04 	.word	0xe000ed04
 8003168:	200001a0 	.word	0x200001a0
 800316c:	20000184 	.word	0x20000184

08003170 <eTaskConfirmSleepModeStatus>:
/*-----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE != 0 )

    eSleepModeStatus eTaskConfirmSleepModeStatus( void )
    {
 8003170:	b480      	push	{r7}
 8003172:	b083      	sub	sp, #12
 8003174:	af00      	add	r7, sp, #0
        #if ( INCLUDE_vTaskSuspend == 1 )
            /* The idle task exists in addition to the application tasks. */
            const UBaseType_t uxNonApplicationTasks = 1;
 8003176:	2301      	movs	r3, #1
 8003178:	603b      	str	r3, [r7, #0]
        #endif /* INCLUDE_vTaskSuspend */

        eSleepModeStatus eReturn = eStandardSleep;
 800317a:	2301      	movs	r3, #1
 800317c:	71fb      	strb	r3, [r7, #7]

        /* This function must be called from a critical section. */

        if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
 800317e:	4b12      	ldr	r3, [pc, #72]	; (80031c8 <eTaskConfirmSleepModeStatus+0x58>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d002      	beq.n	800318c <eTaskConfirmSleepModeStatus+0x1c>
        {
            /* A task was made ready while the scheduler was suspended. */
            eReturn = eAbortSleep;
 8003186:	2300      	movs	r3, #0
 8003188:	71fb      	strb	r3, [r7, #7]
 800318a:	e017      	b.n	80031bc <eTaskConfirmSleepModeStatus+0x4c>
        }
        else if( xYieldPending != pdFALSE )
 800318c:	4b0f      	ldr	r3, [pc, #60]	; (80031cc <eTaskConfirmSleepModeStatus+0x5c>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d002      	beq.n	800319a <eTaskConfirmSleepModeStatus+0x2a>
        {
            /* A yield was pended while the scheduler was suspended. */
            eReturn = eAbortSleep;
 8003194:	2300      	movs	r3, #0
 8003196:	71fb      	strb	r3, [r7, #7]
 8003198:	e010      	b.n	80031bc <eTaskConfirmSleepModeStatus+0x4c>
        }
        else if( xPendedTicks != 0 )
 800319a:	4b0d      	ldr	r3, [pc, #52]	; (80031d0 <eTaskConfirmSleepModeStatus+0x60>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d002      	beq.n	80031a8 <eTaskConfirmSleepModeStatus+0x38>
        {
            /* A tick interrupt has already occurred but was held pending
             * because the scheduler is suspended. */
            eReturn = eAbortSleep;
 80031a2:	2300      	movs	r3, #0
 80031a4:	71fb      	strb	r3, [r7, #7]
 80031a6:	e009      	b.n	80031bc <eTaskConfirmSleepModeStatus+0x4c>
        }

        #if ( INCLUDE_vTaskSuspend == 1 )
            else if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicationTasks ) )
 80031a8:	4b0a      	ldr	r3, [pc, #40]	; (80031d4 <eTaskConfirmSleepModeStatus+0x64>)
 80031aa:	681a      	ldr	r2, [r3, #0]
 80031ac:	4b0a      	ldr	r3, [pc, #40]	; (80031d8 <eTaskConfirmSleepModeStatus+0x68>)
 80031ae:	6819      	ldr	r1, [r3, #0]
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	1acb      	subs	r3, r1, r3
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d101      	bne.n	80031bc <eTaskConfirmSleepModeStatus+0x4c>
            {
                /* If all the tasks are in the suspended list (which might mean they
                 * have an infinite block time rather than actually being suspended)
                 * then it is safe to turn all clocks off and just wait for external
                 * interrupts. */
                eReturn = eNoTasksWaitingTimeout;
 80031b8:	2302      	movs	r3, #2
 80031ba:	71fb      	strb	r3, [r7, #7]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return eReturn;
 80031bc:	79fb      	ldrb	r3, [r7, #7]
    }
 80031be:	4618      	mov	r0, r3
 80031c0:	370c      	adds	r7, #12
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bc80      	pop	{r7}
 80031c6:	4770      	bx	lr
 80031c8:	20000140 	.word	0x20000140
 80031cc:	20000194 	.word	0x20000194
 80031d0:	20000190 	.word	0x20000190
 80031d4:	2000016c 	.word	0x2000016c
 80031d8:	20000180 	.word	0x20000180

080031dc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b082      	sub	sp, #8
 80031e0:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80031e2:	2300      	movs	r3, #0
 80031e4:	607b      	str	r3, [r7, #4]
 80031e6:	e00c      	b.n	8003202 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80031e8:	687a      	ldr	r2, [r7, #4]
 80031ea:	4613      	mov	r3, r2
 80031ec:	009b      	lsls	r3, r3, #2
 80031ee:	4413      	add	r3, r2
 80031f0:	009b      	lsls	r3, r3, #2
 80031f2:	4a12      	ldr	r2, [pc, #72]	; (800323c <prvInitialiseTaskLists+0x60>)
 80031f4:	4413      	add	r3, r2
 80031f6:	4618      	mov	r0, r3
 80031f8:	f000 fc50 	bl	8003a9c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	3301      	adds	r3, #1
 8003200:	607b      	str	r3, [r7, #4]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2b04      	cmp	r3, #4
 8003206:	d9ef      	bls.n	80031e8 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003208:	480d      	ldr	r0, [pc, #52]	; (8003240 <prvInitialiseTaskLists+0x64>)
 800320a:	f000 fc47 	bl	8003a9c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800320e:	480d      	ldr	r0, [pc, #52]	; (8003244 <prvInitialiseTaskLists+0x68>)
 8003210:	f000 fc44 	bl	8003a9c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003214:	480c      	ldr	r0, [pc, #48]	; (8003248 <prvInitialiseTaskLists+0x6c>)
 8003216:	f000 fc41 	bl	8003a9c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 800321a:	480c      	ldr	r0, [pc, #48]	; (800324c <prvInitialiseTaskLists+0x70>)
 800321c:	f000 fc3e 	bl	8003a9c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8003220:	480b      	ldr	r0, [pc, #44]	; (8003250 <prvInitialiseTaskLists+0x74>)
 8003222:	f000 fc3b 	bl	8003a9c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003226:	4b0b      	ldr	r3, [pc, #44]	; (8003254 <prvInitialiseTaskLists+0x78>)
 8003228:	4a05      	ldr	r2, [pc, #20]	; (8003240 <prvInitialiseTaskLists+0x64>)
 800322a:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800322c:	4b0a      	ldr	r3, [pc, #40]	; (8003258 <prvInitialiseTaskLists+0x7c>)
 800322e:	4a05      	ldr	r2, [pc, #20]	; (8003244 <prvInitialiseTaskLists+0x68>)
 8003230:	601a      	str	r2, [r3, #0]
}
 8003232:	bf00      	nop
 8003234:	3708      	adds	r7, #8
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}
 800323a:	bf00      	nop
 800323c:	200000ac 	.word	0x200000ac
 8003240:	20000110 	.word	0x20000110
 8003244:	20000124 	.word	0x20000124
 8003248:	20000140 	.word	0x20000140
 800324c:	20000154 	.word	0x20000154
 8003250:	2000016c 	.word	0x2000016c
 8003254:	20000138 	.word	0x20000138
 8003258:	2000013c 	.word	0x2000013c

0800325c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b082      	sub	sp, #8
 8003260:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003262:	e019      	b.n	8003298 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8003264:	f000 fd9c 	bl	8003da0 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003268:	4b10      	ldr	r3, [pc, #64]	; (80032ac <prvCheckTasksWaitingTermination+0x50>)
 800326a:	68db      	ldr	r3, [r3, #12]
 800326c:	68db      	ldr	r3, [r3, #12]
 800326e:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	3304      	adds	r3, #4
 8003274:	4618      	mov	r0, r3
 8003276:	f000 fc74 	bl	8003b62 <uxListRemove>
                --uxCurrentNumberOfTasks;
 800327a:	4b0d      	ldr	r3, [pc, #52]	; (80032b0 <prvCheckTasksWaitingTermination+0x54>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	3b01      	subs	r3, #1
 8003280:	4a0b      	ldr	r2, [pc, #44]	; (80032b0 <prvCheckTasksWaitingTermination+0x54>)
 8003282:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8003284:	4b0b      	ldr	r3, [pc, #44]	; (80032b4 <prvCheckTasksWaitingTermination+0x58>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	3b01      	subs	r3, #1
 800328a:	4a0a      	ldr	r2, [pc, #40]	; (80032b4 <prvCheckTasksWaitingTermination+0x58>)
 800328c:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 800328e:	f000 fdb7 	bl	8003e00 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8003292:	6878      	ldr	r0, [r7, #4]
 8003294:	f000 f810 	bl	80032b8 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003298:	4b06      	ldr	r3, [pc, #24]	; (80032b4 <prvCheckTasksWaitingTermination+0x58>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d1e1      	bne.n	8003264 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 80032a0:	bf00      	nop
 80032a2:	bf00      	nop
 80032a4:	3708      	adds	r7, #8
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}
 80032aa:	bf00      	nop
 80032ac:	20000154 	.word	0x20000154
 80032b0:	20000180 	.word	0x20000180
 80032b4:	20000168 	.word	0x20000168

080032b8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b082      	sub	sp, #8
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c4:	4618      	mov	r0, r3
 80032c6:	f000 fbd7 	bl	8003a78 <vPortFree>
            vPortFree( pxTCB );
 80032ca:	6878      	ldr	r0, [r7, #4]
 80032cc:	f000 fbd4 	bl	8003a78 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80032d0:	bf00      	nop
 80032d2:	3708      	adds	r7, #8
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}

080032d8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80032d8:	b480      	push	{r7}
 80032da:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80032dc:	4b09      	ldr	r3, [pc, #36]	; (8003304 <prvResetNextTaskUnblockTime+0x2c>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d104      	bne.n	80032f0 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80032e6:	4b08      	ldr	r3, [pc, #32]	; (8003308 <prvResetNextTaskUnblockTime+0x30>)
 80032e8:	f04f 32ff 	mov.w	r2, #4294967295
 80032ec:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80032ee:	e005      	b.n	80032fc <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80032f0:	4b04      	ldr	r3, [pc, #16]	; (8003304 <prvResetNextTaskUnblockTime+0x2c>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	68db      	ldr	r3, [r3, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a03      	ldr	r2, [pc, #12]	; (8003308 <prvResetNextTaskUnblockTime+0x30>)
 80032fa:	6013      	str	r3, [r2, #0]
}
 80032fc:	bf00      	nop
 80032fe:	46bd      	mov	sp, r7
 8003300:	bc80      	pop	{r7}
 8003302:	4770      	bx	lr
 8003304:	20000138 	.word	0x20000138
 8003308:	200001a0 	.word	0x200001a0

0800330c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 800330c:	b480      	push	{r7}
 800330e:	b083      	sub	sp, #12
 8003310:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8003312:	4b0b      	ldr	r3, [pc, #44]	; (8003340 <xTaskGetSchedulerState+0x34>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d102      	bne.n	8003320 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800331a:	2301      	movs	r3, #1
 800331c:	607b      	str	r3, [r7, #4]
 800331e:	e008      	b.n	8003332 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003320:	4b08      	ldr	r3, [pc, #32]	; (8003344 <xTaskGetSchedulerState+0x38>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d102      	bne.n	800332e <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003328:	2302      	movs	r3, #2
 800332a:	607b      	str	r3, [r7, #4]
 800332c:	e001      	b.n	8003332 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800332e:	2300      	movs	r3, #0
 8003330:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8003332:	687b      	ldr	r3, [r7, #4]
    }
 8003334:	4618      	mov	r0, r3
 8003336:	370c      	adds	r7, #12
 8003338:	46bd      	mov	sp, r7
 800333a:	bc80      	pop	{r7}
 800333c:	4770      	bx	lr
 800333e:	bf00      	nop
 8003340:	2000018c 	.word	0x2000018c
 8003344:	200001a8 	.word	0x200001a8

08003348 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8003348:	b580      	push	{r7, lr}
 800334a:	b088      	sub	sp, #32
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	61bb      	str	r3, [r7, #24]
        BaseType_t xReturn = pdFALSE;
 8003354:	2300      	movs	r3, #0
 8003356:	61fb      	str	r3, [r7, #28]

        if( pxMutexHolder != NULL )
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d07e      	beq.n	800345c <xTaskPriorityDisinherit+0x114>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 800335e:	4b42      	ldr	r3, [pc, #264]	; (8003468 <xTaskPriorityDisinherit+0x120>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	69ba      	ldr	r2, [r7, #24]
 8003364:	429a      	cmp	r2, r3
 8003366:	d00a      	beq.n	800337e <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8003368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800336c:	f383 8811 	msr	BASEPRI, r3
 8003370:	f3bf 8f6f 	isb	sy
 8003374:	f3bf 8f4f 	dsb	sy
 8003378:	613b      	str	r3, [r7, #16]
    }
 800337a:	bf00      	nop
 800337c:	e7fe      	b.n	800337c <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 800337e:	69bb      	ldr	r3, [r7, #24]
 8003380:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003382:	2b00      	cmp	r3, #0
 8003384:	d10a      	bne.n	800339c <xTaskPriorityDisinherit+0x54>
        __asm volatile
 8003386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800338a:	f383 8811 	msr	BASEPRI, r3
 800338e:	f3bf 8f6f 	isb	sy
 8003392:	f3bf 8f4f 	dsb	sy
 8003396:	60fb      	str	r3, [r7, #12]
    }
 8003398:	bf00      	nop
 800339a:	e7fe      	b.n	800339a <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 800339c:	69bb      	ldr	r3, [r7, #24]
 800339e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033a0:	1e5a      	subs	r2, r3, #1
 80033a2:	69bb      	ldr	r3, [r7, #24]
 80033a4:	655a      	str	r2, [r3, #84]	; 0x54

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80033a6:	69bb      	ldr	r3, [r7, #24]
 80033a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033aa:	69bb      	ldr	r3, [r7, #24]
 80033ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033ae:	429a      	cmp	r2, r3
 80033b0:	d054      	beq.n	800345c <xTaskPriorityDisinherit+0x114>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80033b2:	69bb      	ldr	r3, [r7, #24]
 80033b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d150      	bne.n	800345c <xTaskPriorityDisinherit+0x114>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80033ba:	69bb      	ldr	r3, [r7, #24]
 80033bc:	3304      	adds	r3, #4
 80033be:	4618      	mov	r0, r3
 80033c0:	f000 fbcf 	bl	8003b62 <uxListRemove>
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 80033c4:	69bb      	ldr	r3, [r7, #24]
 80033c6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80033c8:	69bb      	ldr	r3, [r7, #24]
 80033ca:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80033cc:	69bb      	ldr	r3, [r7, #24]
 80033ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033d0:	f1c3 0205 	rsb	r2, r3, #5
 80033d4:	69bb      	ldr	r3, [r7, #24]
 80033d6:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 80033d8:	69bb      	ldr	r3, [r7, #24]
 80033da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033dc:	4b23      	ldr	r3, [pc, #140]	; (800346c <xTaskPriorityDisinherit+0x124>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d903      	bls.n	80033ec <xTaskPriorityDisinherit+0xa4>
 80033e4:	69bb      	ldr	r3, [r7, #24]
 80033e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033e8:	4a20      	ldr	r2, [pc, #128]	; (800346c <xTaskPriorityDisinherit+0x124>)
 80033ea:	6013      	str	r3, [r2, #0]
 80033ec:	69bb      	ldr	r3, [r7, #24]
 80033ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033f0:	491f      	ldr	r1, [pc, #124]	; (8003470 <xTaskPriorityDisinherit+0x128>)
 80033f2:	4613      	mov	r3, r2
 80033f4:	009b      	lsls	r3, r3, #2
 80033f6:	4413      	add	r3, r2
 80033f8:	009b      	lsls	r3, r3, #2
 80033fa:	440b      	add	r3, r1
 80033fc:	3304      	adds	r3, #4
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	617b      	str	r3, [r7, #20]
 8003402:	69bb      	ldr	r3, [r7, #24]
 8003404:	697a      	ldr	r2, [r7, #20]
 8003406:	609a      	str	r2, [r3, #8]
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	689a      	ldr	r2, [r3, #8]
 800340c:	69bb      	ldr	r3, [r7, #24]
 800340e:	60da      	str	r2, [r3, #12]
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	69ba      	ldr	r2, [r7, #24]
 8003416:	3204      	adds	r2, #4
 8003418:	605a      	str	r2, [r3, #4]
 800341a:	69bb      	ldr	r3, [r7, #24]
 800341c:	1d1a      	adds	r2, r3, #4
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	609a      	str	r2, [r3, #8]
 8003422:	69bb      	ldr	r3, [r7, #24]
 8003424:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003426:	4613      	mov	r3, r2
 8003428:	009b      	lsls	r3, r3, #2
 800342a:	4413      	add	r3, r2
 800342c:	009b      	lsls	r3, r3, #2
 800342e:	4a10      	ldr	r2, [pc, #64]	; (8003470 <xTaskPriorityDisinherit+0x128>)
 8003430:	441a      	add	r2, r3
 8003432:	69bb      	ldr	r3, [r7, #24]
 8003434:	615a      	str	r2, [r3, #20]
 8003436:	69bb      	ldr	r3, [r7, #24]
 8003438:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800343a:	490d      	ldr	r1, [pc, #52]	; (8003470 <xTaskPriorityDisinherit+0x128>)
 800343c:	4613      	mov	r3, r2
 800343e:	009b      	lsls	r3, r3, #2
 8003440:	4413      	add	r3, r2
 8003442:	009b      	lsls	r3, r3, #2
 8003444:	440b      	add	r3, r1
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	1c59      	adds	r1, r3, #1
 800344a:	4809      	ldr	r0, [pc, #36]	; (8003470 <xTaskPriorityDisinherit+0x128>)
 800344c:	4613      	mov	r3, r2
 800344e:	009b      	lsls	r3, r3, #2
 8003450:	4413      	add	r3, r2
 8003452:	009b      	lsls	r3, r3, #2
 8003454:	4403      	add	r3, r0
 8003456:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8003458:	2301      	movs	r3, #1
 800345a:	61fb      	str	r3, [r7, #28]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800345c:	69fb      	ldr	r3, [r7, #28]
    }
 800345e:	4618      	mov	r0, r3
 8003460:	3720      	adds	r7, #32
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}
 8003466:	bf00      	nop
 8003468:	200000a8 	.word	0x200000a8
 800346c:	20000188 	.word	0x20000188
 8003470:	200000ac 	.word	0x200000ac

08003474 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b086      	sub	sp, #24
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
 800347c:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800347e:	4b2e      	ldr	r3, [pc, #184]	; (8003538 <prvAddCurrentTaskToDelayedList+0xc4>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003484:	4b2d      	ldr	r3, [pc, #180]	; (800353c <prvAddCurrentTaskToDelayedList+0xc8>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	3304      	adds	r3, #4
 800348a:	4618      	mov	r0, r3
 800348c:	f000 fb69 	bl	8003b62 <uxListRemove>
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003496:	d124      	bne.n	80034e2 <prvAddCurrentTaskToDelayedList+0x6e>
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d021      	beq.n	80034e2 <prvAddCurrentTaskToDelayedList+0x6e>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800349e:	4b28      	ldr	r3, [pc, #160]	; (8003540 <prvAddCurrentTaskToDelayedList+0xcc>)
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	613b      	str	r3, [r7, #16]
 80034a4:	4b25      	ldr	r3, [pc, #148]	; (800353c <prvAddCurrentTaskToDelayedList+0xc8>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	693a      	ldr	r2, [r7, #16]
 80034aa:	609a      	str	r2, [r3, #8]
 80034ac:	4b23      	ldr	r3, [pc, #140]	; (800353c <prvAddCurrentTaskToDelayedList+0xc8>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	693a      	ldr	r2, [r7, #16]
 80034b2:	6892      	ldr	r2, [r2, #8]
 80034b4:	60da      	str	r2, [r3, #12]
 80034b6:	4b21      	ldr	r3, [pc, #132]	; (800353c <prvAddCurrentTaskToDelayedList+0xc8>)
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	689b      	ldr	r3, [r3, #8]
 80034be:	3204      	adds	r2, #4
 80034c0:	605a      	str	r2, [r3, #4]
 80034c2:	4b1e      	ldr	r3, [pc, #120]	; (800353c <prvAddCurrentTaskToDelayedList+0xc8>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	1d1a      	adds	r2, r3, #4
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	609a      	str	r2, [r3, #8]
 80034cc:	4b1b      	ldr	r3, [pc, #108]	; (800353c <prvAddCurrentTaskToDelayedList+0xc8>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a1b      	ldr	r2, [pc, #108]	; (8003540 <prvAddCurrentTaskToDelayedList+0xcc>)
 80034d2:	615a      	str	r2, [r3, #20]
 80034d4:	4b1a      	ldr	r3, [pc, #104]	; (8003540 <prvAddCurrentTaskToDelayedList+0xcc>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	3301      	adds	r3, #1
 80034da:	4a19      	ldr	r2, [pc, #100]	; (8003540 <prvAddCurrentTaskToDelayedList+0xcc>)
 80034dc:	6013      	str	r3, [r2, #0]
 80034de:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 80034e0:	e026      	b.n	8003530 <prvAddCurrentTaskToDelayedList+0xbc>
            xTimeToWake = xConstTickCount + xTicksToWait;
 80034e2:	697a      	ldr	r2, [r7, #20]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	4413      	add	r3, r2
 80034e8:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80034ea:	4b14      	ldr	r3, [pc, #80]	; (800353c <prvAddCurrentTaskToDelayedList+0xc8>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	68fa      	ldr	r2, [r7, #12]
 80034f0:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 80034f2:	68fa      	ldr	r2, [r7, #12]
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	429a      	cmp	r2, r3
 80034f8:	d209      	bcs.n	800350e <prvAddCurrentTaskToDelayedList+0x9a>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80034fa:	4b12      	ldr	r3, [pc, #72]	; (8003544 <prvAddCurrentTaskToDelayedList+0xd0>)
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	4b0f      	ldr	r3, [pc, #60]	; (800353c <prvAddCurrentTaskToDelayedList+0xc8>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	3304      	adds	r3, #4
 8003504:	4619      	mov	r1, r3
 8003506:	4610      	mov	r0, r2
 8003508:	f000 faf3 	bl	8003af2 <vListInsert>
}
 800350c:	e010      	b.n	8003530 <prvAddCurrentTaskToDelayedList+0xbc>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800350e:	4b0e      	ldr	r3, [pc, #56]	; (8003548 <prvAddCurrentTaskToDelayedList+0xd4>)
 8003510:	681a      	ldr	r2, [r3, #0]
 8003512:	4b0a      	ldr	r3, [pc, #40]	; (800353c <prvAddCurrentTaskToDelayedList+0xc8>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	3304      	adds	r3, #4
 8003518:	4619      	mov	r1, r3
 800351a:	4610      	mov	r0, r2
 800351c:	f000 fae9 	bl	8003af2 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8003520:	4b0a      	ldr	r3, [pc, #40]	; (800354c <prvAddCurrentTaskToDelayedList+0xd8>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	68fa      	ldr	r2, [r7, #12]
 8003526:	429a      	cmp	r2, r3
 8003528:	d202      	bcs.n	8003530 <prvAddCurrentTaskToDelayedList+0xbc>
                    xNextTaskUnblockTime = xTimeToWake;
 800352a:	4a08      	ldr	r2, [pc, #32]	; (800354c <prvAddCurrentTaskToDelayedList+0xd8>)
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	6013      	str	r3, [r2, #0]
}
 8003530:	bf00      	nop
 8003532:	3718      	adds	r7, #24
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}
 8003538:	20000184 	.word	0x20000184
 800353c:	200000a8 	.word	0x200000a8
 8003540:	2000016c 	.word	0x2000016c
 8003544:	2000013c 	.word	0x2000013c
 8003548:	20000138 	.word	0x20000138
 800354c:	200001a0 	.word	0x200001a0

08003550 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003550:	b580      	push	{r7, lr}
 8003552:	b084      	sub	sp, #16
 8003554:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8003556:	2300      	movs	r3, #0
 8003558:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800355a:	f000 fa45 	bl	80039e8 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800355e:	4b11      	ldr	r3, [pc, #68]	; (80035a4 <xTimerCreateTimerTask+0x54>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d00a      	beq.n	800357c <xTimerCreateTimerTask+0x2c>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 8003566:	4b10      	ldr	r3, [pc, #64]	; (80035a8 <xTimerCreateTimerTask+0x58>)
 8003568:	9301      	str	r3, [sp, #4]
 800356a:	2303      	movs	r3, #3
 800356c:	9300      	str	r3, [sp, #0]
 800356e:	2300      	movs	r3, #0
 8003570:	2280      	movs	r2, #128	; 0x80
 8003572:	490e      	ldr	r1, [pc, #56]	; (80035ac <xTimerCreateTimerTask+0x5c>)
 8003574:	480e      	ldr	r0, [pc, #56]	; (80035b0 <xTimerCreateTimerTask+0x60>)
 8003576:	f7fe fee3 	bl	8002340 <xTaskCreate>
 800357a:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d10a      	bne.n	8003598 <xTimerCreateTimerTask+0x48>
        __asm volatile
 8003582:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003586:	f383 8811 	msr	BASEPRI, r3
 800358a:	f3bf 8f6f 	isb	sy
 800358e:	f3bf 8f4f 	dsb	sy
 8003592:	603b      	str	r3, [r7, #0]
    }
 8003594:	bf00      	nop
 8003596:	e7fe      	b.n	8003596 <xTimerCreateTimerTask+0x46>
        return xReturn;
 8003598:	687b      	ldr	r3, [r7, #4]
    }
 800359a:	4618      	mov	r0, r3
 800359c:	3708      	adds	r7, #8
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}
 80035a2:	bf00      	nop
 80035a4:	200001dc 	.word	0x200001dc
 80035a8:	200001e0 	.word	0x200001e0
 80035ac:	08004334 	.word	0x08004334
 80035b0:	08003659 	.word	0x08003659

080035b4 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b084      	sub	sp, #16
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	60f8      	str	r0, [r7, #12]
 80035bc:	60b9      	str	r1, [r7, #8]
 80035be:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80035c0:	e008      	b.n	80035d4 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	699b      	ldr	r3, [r3, #24]
 80035c6:	68ba      	ldr	r2, [r7, #8]
 80035c8:	4413      	add	r3, r2
 80035ca:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	6a1b      	ldr	r3, [r3, #32]
 80035d0:	68f8      	ldr	r0, [r7, #12]
 80035d2:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	699a      	ldr	r2, [r3, #24]
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	18d1      	adds	r1, r2, r3
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	687a      	ldr	r2, [r7, #4]
 80035e0:	68f8      	ldr	r0, [r7, #12]
 80035e2:	f000 f8db 	bl	800379c <prvInsertTimerInActiveList>
 80035e6:	4603      	mov	r3, r0
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d1ea      	bne.n	80035c2 <prvReloadTimer+0xe>
        }
    }
 80035ec:	bf00      	nop
 80035ee:	bf00      	nop
 80035f0:	3710      	adds	r7, #16
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}
	...

080035f8 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b084      	sub	sp, #16
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
 8003600:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003602:	4b14      	ldr	r3, [pc, #80]	; (8003654 <prvProcessExpiredTimer+0x5c>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	68db      	ldr	r3, [r3, #12]
 800360a:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	3304      	adds	r3, #4
 8003610:	4618      	mov	r0, r3
 8003612:	f000 faa6 	bl	8003b62 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800361c:	f003 0304 	and.w	r3, r3, #4
 8003620:	2b00      	cmp	r3, #0
 8003622:	d005      	beq.n	8003630 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8003624:	683a      	ldr	r2, [r7, #0]
 8003626:	6879      	ldr	r1, [r7, #4]
 8003628:	68f8      	ldr	r0, [r7, #12]
 800362a:	f7ff ffc3 	bl	80035b4 <prvReloadTimer>
 800362e:	e008      	b.n	8003642 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003636:	f023 0301 	bic.w	r3, r3, #1
 800363a:	b2da      	uxtb	r2, r3
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	6a1b      	ldr	r3, [r3, #32]
 8003646:	68f8      	ldr	r0, [r7, #12]
 8003648:	4798      	blx	r3
    }
 800364a:	bf00      	nop
 800364c:	3710      	adds	r7, #16
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}
 8003652:	bf00      	nop
 8003654:	200001d4 	.word	0x200001d4

08003658 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003658:	b580      	push	{r7, lr}
 800365a:	b084      	sub	sp, #16
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003660:	f107 0308 	add.w	r3, r7, #8
 8003664:	4618      	mov	r0, r3
 8003666:	f000 f857 	bl	8003718 <prvGetNextExpireTime>
 800366a:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	4619      	mov	r1, r3
 8003670:	68f8      	ldr	r0, [r7, #12]
 8003672:	f000 f803 	bl	800367c <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8003676:	f000 f8d3 	bl	8003820 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800367a:	e7f1      	b.n	8003660 <prvTimerTask+0x8>

0800367c <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 800367c:	b580      	push	{r7, lr}
 800367e:	b084      	sub	sp, #16
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
 8003684:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8003686:	f7ff f84d 	bl	8002724 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800368a:	f107 0308 	add.w	r3, r7, #8
 800368e:	4618      	mov	r0, r3
 8003690:	f000 f864 	bl	800375c <prvSampleTimeNow>
 8003694:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d130      	bne.n	80036fe <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d10a      	bne.n	80036b8 <prvProcessTimerOrBlockTask+0x3c>
 80036a2:	687a      	ldr	r2, [r7, #4]
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	429a      	cmp	r2, r3
 80036a8:	d806      	bhi.n	80036b8 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 80036aa:	f7ff f87f 	bl	80027ac <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80036ae:	68f9      	ldr	r1, [r7, #12]
 80036b0:	6878      	ldr	r0, [r7, #4]
 80036b2:	f7ff ffa1 	bl	80035f8 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80036b6:	e024      	b.n	8003702 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d008      	beq.n	80036d0 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80036be:	4b13      	ldr	r3, [pc, #76]	; (800370c <prvProcessTimerOrBlockTask+0x90>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d101      	bne.n	80036cc <prvProcessTimerOrBlockTask+0x50>
 80036c8:	2301      	movs	r3, #1
 80036ca:	e000      	b.n	80036ce <prvProcessTimerOrBlockTask+0x52>
 80036cc:	2300      	movs	r3, #0
 80036ce:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80036d0:	4b0f      	ldr	r3, [pc, #60]	; (8003710 <prvProcessTimerOrBlockTask+0x94>)
 80036d2:	6818      	ldr	r0, [r3, #0]
 80036d4:	687a      	ldr	r2, [r7, #4]
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	1ad3      	subs	r3, r2, r3
 80036da:	683a      	ldr	r2, [r7, #0]
 80036dc:	4619      	mov	r1, r3
 80036de:	f7fe fdfb 	bl	80022d8 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80036e2:	f7ff f863 	bl	80027ac <xTaskResumeAll>
 80036e6:	4603      	mov	r3, r0
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d10a      	bne.n	8003702 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 80036ec:	4b09      	ldr	r3, [pc, #36]	; (8003714 <prvProcessTimerOrBlockTask+0x98>)
 80036ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036f2:	601a      	str	r2, [r3, #0]
 80036f4:	f3bf 8f4f 	dsb	sy
 80036f8:	f3bf 8f6f 	isb	sy
    }
 80036fc:	e001      	b.n	8003702 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 80036fe:	f7ff f855 	bl	80027ac <xTaskResumeAll>
    }
 8003702:	bf00      	nop
 8003704:	3710      	adds	r7, #16
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}
 800370a:	bf00      	nop
 800370c:	200001d8 	.word	0x200001d8
 8003710:	200001dc 	.word	0x200001dc
 8003714:	e000ed04 	.word	0xe000ed04

08003718 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003718:	b480      	push	{r7}
 800371a:	b085      	sub	sp, #20
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003720:	4b0d      	ldr	r3, [pc, #52]	; (8003758 <prvGetNextExpireTime+0x40>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d101      	bne.n	800372e <prvGetNextExpireTime+0x16>
 800372a:	2201      	movs	r2, #1
 800372c:	e000      	b.n	8003730 <prvGetNextExpireTime+0x18>
 800372e:	2200      	movs	r2, #0
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d105      	bne.n	8003748 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800373c:	4b06      	ldr	r3, [pc, #24]	; (8003758 <prvGetNextExpireTime+0x40>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	68db      	ldr	r3, [r3, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	60fb      	str	r3, [r7, #12]
 8003746:	e001      	b.n	800374c <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003748:	2300      	movs	r3, #0
 800374a:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 800374c:	68fb      	ldr	r3, [r7, #12]
    }
 800374e:	4618      	mov	r0, r3
 8003750:	3714      	adds	r7, #20
 8003752:	46bd      	mov	sp, r7
 8003754:	bc80      	pop	{r7}
 8003756:	4770      	bx	lr
 8003758:	200001d4 	.word	0x200001d4

0800375c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 800375c:	b580      	push	{r7, lr}
 800375e:	b084      	sub	sp, #16
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8003764:	f7ff f91e 	bl	80029a4 <xTaskGetTickCount>
 8003768:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800376a:	4b0b      	ldr	r3, [pc, #44]	; (8003798 <prvSampleTimeNow+0x3c>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	68fa      	ldr	r2, [r7, #12]
 8003770:	429a      	cmp	r2, r3
 8003772:	d205      	bcs.n	8003780 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8003774:	f000 f912 	bl	800399c <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2201      	movs	r2, #1
 800377c:	601a      	str	r2, [r3, #0]
 800377e:	e002      	b.n	8003786 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2200      	movs	r2, #0
 8003784:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8003786:	4a04      	ldr	r2, [pc, #16]	; (8003798 <prvSampleTimeNow+0x3c>)
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 800378c:	68fb      	ldr	r3, [r7, #12]
    }
 800378e:	4618      	mov	r0, r3
 8003790:	3710      	adds	r7, #16
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}
 8003796:	bf00      	nop
 8003798:	200001e4 	.word	0x200001e4

0800379c <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 800379c:	b580      	push	{r7, lr}
 800379e:	b086      	sub	sp, #24
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	60f8      	str	r0, [r7, #12]
 80037a4:	60b9      	str	r1, [r7, #8]
 80037a6:	607a      	str	r2, [r7, #4]
 80037a8:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80037aa:	2300      	movs	r3, #0
 80037ac:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	68ba      	ldr	r2, [r7, #8]
 80037b2:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	68fa      	ldr	r2, [r7, #12]
 80037b8:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80037ba:	68ba      	ldr	r2, [r7, #8]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	429a      	cmp	r2, r3
 80037c0:	d812      	bhi.n	80037e8 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80037c2:	687a      	ldr	r2, [r7, #4]
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	1ad2      	subs	r2, r2, r3
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	699b      	ldr	r3, [r3, #24]
 80037cc:	429a      	cmp	r2, r3
 80037ce:	d302      	bcc.n	80037d6 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80037d0:	2301      	movs	r3, #1
 80037d2:	617b      	str	r3, [r7, #20]
 80037d4:	e01b      	b.n	800380e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80037d6:	4b10      	ldr	r3, [pc, #64]	; (8003818 <prvInsertTimerInActiveList+0x7c>)
 80037d8:	681a      	ldr	r2, [r3, #0]
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	3304      	adds	r3, #4
 80037de:	4619      	mov	r1, r3
 80037e0:	4610      	mov	r0, r2
 80037e2:	f000 f986 	bl	8003af2 <vListInsert>
 80037e6:	e012      	b.n	800380e <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80037e8:	687a      	ldr	r2, [r7, #4]
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	429a      	cmp	r2, r3
 80037ee:	d206      	bcs.n	80037fe <prvInsertTimerInActiveList+0x62>
 80037f0:	68ba      	ldr	r2, [r7, #8]
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	429a      	cmp	r2, r3
 80037f6:	d302      	bcc.n	80037fe <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 80037f8:	2301      	movs	r3, #1
 80037fa:	617b      	str	r3, [r7, #20]
 80037fc:	e007      	b.n	800380e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80037fe:	4b07      	ldr	r3, [pc, #28]	; (800381c <prvInsertTimerInActiveList+0x80>)
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	3304      	adds	r3, #4
 8003806:	4619      	mov	r1, r3
 8003808:	4610      	mov	r0, r2
 800380a:	f000 f972 	bl	8003af2 <vListInsert>
            }
        }

        return xProcessTimerNow;
 800380e:	697b      	ldr	r3, [r7, #20]
    }
 8003810:	4618      	mov	r0, r3
 8003812:	3718      	adds	r7, #24
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}
 8003818:	200001d8 	.word	0x200001d8
 800381c:	200001d4 	.word	0x200001d4

08003820 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8003820:	b580      	push	{r7, lr}
 8003822:	b088      	sub	sp, #32
 8003824:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003826:	e0a6      	b.n	8003976 <prvProcessReceivedCommands+0x156>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	2b00      	cmp	r3, #0
 800382c:	f2c0 80a2 	blt.w	8003974 <prvProcessReceivedCommands+0x154>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003830:	693b      	ldr	r3, [r7, #16]
 8003832:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003834:	69fb      	ldr	r3, [r7, #28]
 8003836:	695b      	ldr	r3, [r3, #20]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d004      	beq.n	8003846 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800383c:	69fb      	ldr	r3, [r7, #28]
 800383e:	3304      	adds	r3, #4
 8003840:	4618      	mov	r0, r3
 8003842:	f000 f98e 	bl	8003b62 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003846:	1d3b      	adds	r3, r7, #4
 8003848:	4618      	mov	r0, r3
 800384a:	f7ff ff87 	bl	800375c <prvSampleTimeNow>
 800384e:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	3b01      	subs	r3, #1
 8003854:	2b08      	cmp	r3, #8
 8003856:	f200 808e 	bhi.w	8003976 <prvProcessReceivedCommands+0x156>
 800385a:	a201      	add	r2, pc, #4	; (adr r2, 8003860 <prvProcessReceivedCommands+0x40>)
 800385c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003860:	08003885 	.word	0x08003885
 8003864:	08003885 	.word	0x08003885
 8003868:	080038ed 	.word	0x080038ed
 800386c:	08003901 	.word	0x08003901
 8003870:	0800394b 	.word	0x0800394b
 8003874:	08003885 	.word	0x08003885
 8003878:	08003885 	.word	0x08003885
 800387c:	080038ed 	.word	0x080038ed
 8003880:	08003901 	.word	0x08003901
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003884:	69fb      	ldr	r3, [r7, #28]
 8003886:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800388a:	f043 0301 	orr.w	r3, r3, #1
 800388e:	b2da      	uxtb	r2, r3
 8003890:	69fb      	ldr	r3, [r7, #28]
 8003892:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003896:	68fa      	ldr	r2, [r7, #12]
 8003898:	69fb      	ldr	r3, [r7, #28]
 800389a:	699b      	ldr	r3, [r3, #24]
 800389c:	18d1      	adds	r1, r2, r3
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	69ba      	ldr	r2, [r7, #24]
 80038a2:	69f8      	ldr	r0, [r7, #28]
 80038a4:	f7ff ff7a 	bl	800379c <prvInsertTimerInActiveList>
 80038a8:	4603      	mov	r3, r0
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d063      	beq.n	8003976 <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80038ae:	69fb      	ldr	r3, [r7, #28]
 80038b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80038b4:	f003 0304 	and.w	r3, r3, #4
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d009      	beq.n	80038d0 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 80038bc:	68fa      	ldr	r2, [r7, #12]
 80038be:	69fb      	ldr	r3, [r7, #28]
 80038c0:	699b      	ldr	r3, [r3, #24]
 80038c2:	4413      	add	r3, r2
 80038c4:	69ba      	ldr	r2, [r7, #24]
 80038c6:	4619      	mov	r1, r3
 80038c8:	69f8      	ldr	r0, [r7, #28]
 80038ca:	f7ff fe73 	bl	80035b4 <prvReloadTimer>
 80038ce:	e008      	b.n	80038e2 <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80038d0:	69fb      	ldr	r3, [r7, #28]
 80038d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80038d6:	f023 0301 	bic.w	r3, r3, #1
 80038da:	b2da      	uxtb	r2, r3
 80038dc:	69fb      	ldr	r3, [r7, #28]
 80038de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80038e2:	69fb      	ldr	r3, [r7, #28]
 80038e4:	6a1b      	ldr	r3, [r3, #32]
 80038e6:	69f8      	ldr	r0, [r7, #28]
 80038e8:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 80038ea:	e044      	b.n	8003976 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80038ec:	69fb      	ldr	r3, [r7, #28]
 80038ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80038f2:	f023 0301 	bic.w	r3, r3, #1
 80038f6:	b2da      	uxtb	r2, r3
 80038f8:	69fb      	ldr	r3, [r7, #28]
 80038fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 80038fe:	e03a      	b.n	8003976 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003900:	69fb      	ldr	r3, [r7, #28]
 8003902:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003906:	f043 0301 	orr.w	r3, r3, #1
 800390a:	b2da      	uxtb	r2, r3
 800390c:	69fb      	ldr	r3, [r7, #28]
 800390e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003912:	68fa      	ldr	r2, [r7, #12]
 8003914:	69fb      	ldr	r3, [r7, #28]
 8003916:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003918:	69fb      	ldr	r3, [r7, #28]
 800391a:	699b      	ldr	r3, [r3, #24]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d10a      	bne.n	8003936 <prvProcessReceivedCommands+0x116>
        __asm volatile
 8003920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003924:	f383 8811 	msr	BASEPRI, r3
 8003928:	f3bf 8f6f 	isb	sy
 800392c:	f3bf 8f4f 	dsb	sy
 8003930:	617b      	str	r3, [r7, #20]
    }
 8003932:	bf00      	nop
 8003934:	e7fe      	b.n	8003934 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003936:	69fb      	ldr	r3, [r7, #28]
 8003938:	699a      	ldr	r2, [r3, #24]
 800393a:	69bb      	ldr	r3, [r7, #24]
 800393c:	18d1      	adds	r1, r2, r3
 800393e:	69bb      	ldr	r3, [r7, #24]
 8003940:	69ba      	ldr	r2, [r7, #24]
 8003942:	69f8      	ldr	r0, [r7, #28]
 8003944:	f7ff ff2a 	bl	800379c <prvInsertTimerInActiveList>
                        break;
 8003948:	e015      	b.n	8003976 <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800394a:	69fb      	ldr	r3, [r7, #28]
 800394c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003950:	f003 0302 	and.w	r3, r3, #2
 8003954:	2b00      	cmp	r3, #0
 8003956:	d103      	bne.n	8003960 <prvProcessReceivedCommands+0x140>
                            {
                                vPortFree( pxTimer );
 8003958:	69f8      	ldr	r0, [r7, #28]
 800395a:	f000 f88d 	bl	8003a78 <vPortFree>
 800395e:	e00a      	b.n	8003976 <prvProcessReceivedCommands+0x156>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003960:	69fb      	ldr	r3, [r7, #28]
 8003962:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003966:	f023 0301 	bic.w	r3, r3, #1
 800396a:	b2da      	uxtb	r2, r3
 800396c:	69fb      	ldr	r3, [r7, #28]
 800396e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8003972:	e000      	b.n	8003976 <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8003974:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003976:	4b08      	ldr	r3, [pc, #32]	; (8003998 <prvProcessReceivedCommands+0x178>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f107 0108 	add.w	r1, r7, #8
 800397e:	2200      	movs	r2, #0
 8003980:	4618      	mov	r0, r3
 8003982:	f7fe fa6b 	bl	8001e5c <xQueueReceive>
 8003986:	4603      	mov	r3, r0
 8003988:	2b00      	cmp	r3, #0
 800398a:	f47f af4d 	bne.w	8003828 <prvProcessReceivedCommands+0x8>
        }
    }
 800398e:	bf00      	nop
 8003990:	bf00      	nop
 8003992:	3720      	adds	r7, #32
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}
 8003998:	200001dc 	.word	0x200001dc

0800399c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 800399c:	b580      	push	{r7, lr}
 800399e:	b082      	sub	sp, #8
 80039a0:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80039a2:	e009      	b.n	80039b8 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80039a4:	4b0e      	ldr	r3, [pc, #56]	; (80039e0 <prvSwitchTimerLists+0x44>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	68db      	ldr	r3, [r3, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 80039ae:	f04f 31ff 	mov.w	r1, #4294967295
 80039b2:	6838      	ldr	r0, [r7, #0]
 80039b4:	f7ff fe20 	bl	80035f8 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80039b8:	4b09      	ldr	r3, [pc, #36]	; (80039e0 <prvSwitchTimerLists+0x44>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d1f0      	bne.n	80039a4 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 80039c2:	4b07      	ldr	r3, [pc, #28]	; (80039e0 <prvSwitchTimerLists+0x44>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 80039c8:	4b06      	ldr	r3, [pc, #24]	; (80039e4 <prvSwitchTimerLists+0x48>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a04      	ldr	r2, [pc, #16]	; (80039e0 <prvSwitchTimerLists+0x44>)
 80039ce:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80039d0:	4a04      	ldr	r2, [pc, #16]	; (80039e4 <prvSwitchTimerLists+0x48>)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6013      	str	r3, [r2, #0]
    }
 80039d6:	bf00      	nop
 80039d8:	3708      	adds	r7, #8
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}
 80039de:	bf00      	nop
 80039e0:	200001d4 	.word	0x200001d4
 80039e4:	200001d8 	.word	0x200001d8

080039e8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80039e8:	b580      	push	{r7, lr}
 80039ea:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80039ec:	f000 f9d8 	bl	8003da0 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80039f0:	4b12      	ldr	r3, [pc, #72]	; (8003a3c <prvCheckForValidListAndQueue+0x54>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d11d      	bne.n	8003a34 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 80039f8:	4811      	ldr	r0, [pc, #68]	; (8003a40 <prvCheckForValidListAndQueue+0x58>)
 80039fa:	f000 f84f 	bl	8003a9c <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80039fe:	4811      	ldr	r0, [pc, #68]	; (8003a44 <prvCheckForValidListAndQueue+0x5c>)
 8003a00:	f000 f84c 	bl	8003a9c <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8003a04:	4b10      	ldr	r3, [pc, #64]	; (8003a48 <prvCheckForValidListAndQueue+0x60>)
 8003a06:	4a0e      	ldr	r2, [pc, #56]	; (8003a40 <prvCheckForValidListAndQueue+0x58>)
 8003a08:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8003a0a:	4b10      	ldr	r3, [pc, #64]	; (8003a4c <prvCheckForValidListAndQueue+0x64>)
 8003a0c:	4a0d      	ldr	r2, [pc, #52]	; (8003a44 <prvCheckForValidListAndQueue+0x5c>)
 8003a0e:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8003a10:	2200      	movs	r2, #0
 8003a12:	210c      	movs	r1, #12
 8003a14:	200a      	movs	r0, #10
 8003a16:	f7fe f8b1 	bl	8001b7c <xQueueGenericCreate>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	4a07      	ldr	r2, [pc, #28]	; (8003a3c <prvCheckForValidListAndQueue+0x54>)
 8003a1e:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8003a20:	4b06      	ldr	r3, [pc, #24]	; (8003a3c <prvCheckForValidListAndQueue+0x54>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d005      	beq.n	8003a34 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003a28:	4b04      	ldr	r3, [pc, #16]	; (8003a3c <prvCheckForValidListAndQueue+0x54>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4908      	ldr	r1, [pc, #32]	; (8003a50 <prvCheckForValidListAndQueue+0x68>)
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f7fe fc04 	bl	800223c <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003a34:	f000 f9e4 	bl	8003e00 <vPortExitCritical>
    }
 8003a38:	bf00      	nop
 8003a3a:	bd80      	pop	{r7, pc}
 8003a3c:	200001dc 	.word	0x200001dc
 8003a40:	200001ac 	.word	0x200001ac
 8003a44:	200001c0 	.word	0x200001c0
 8003a48:	200001d4 	.word	0x200001d4
 8003a4c:	200001d8 	.word	0x200001d8
 8003a50:	0800433c 	.word	0x0800433c

08003a54 <pvPortMalloc>:
#endif

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b084      	sub	sp, #16
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
    void * pvReturn;

    vTaskSuspendAll();
 8003a5c:	f7fe fe62 	bl	8002724 <vTaskSuspendAll>
    {
        pvReturn = malloc( xWantedSize );
 8003a60:	6878      	ldr	r0, [r7, #4]
 8003a62:	f000 fb6b 	bl	800413c <malloc>
 8003a66:	4603      	mov	r3, r0
 8003a68:	60fb      	str	r3, [r7, #12]
        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8003a6a:	f7fe fe9f 	bl	80027ac <xTaskResumeAll>
            vApplicationMallocFailedHook();
        }
    }
    #endif

    return pvReturn;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	3710      	adds	r7, #16
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}

08003a78 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b082      	sub	sp, #8
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
    if( pv != NULL )
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d006      	beq.n	8003a94 <vPortFree+0x1c>
    {
        vTaskSuspendAll();
 8003a86:	f7fe fe4d 	bl	8002724 <vTaskSuspendAll>
        {
            free( pv );
 8003a8a:	6878      	ldr	r0, [r7, #4]
 8003a8c:	f000 fb5e 	bl	800414c <free>
            traceFREE( pv, 0 );
        }
        ( void ) xTaskResumeAll();
 8003a90:	f7fe fe8c 	bl	80027ac <xTaskResumeAll>
    }
}
 8003a94:	bf00      	nop
 8003a96:	3708      	adds	r7, #8
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}

08003a9c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b083      	sub	sp, #12
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	f103 0208 	add.w	r2, r3, #8
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	f04f 32ff 	mov.w	r2, #4294967295
 8003ab4:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	f103 0208 	add.w	r2, r3, #8
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	f103 0208 	add.w	r2, r3, #8
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2200      	movs	r2, #0
 8003ace:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003ad0:	bf00      	nop
 8003ad2:	370c      	adds	r7, #12
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bc80      	pop	{r7}
 8003ad8:	4770      	bx	lr

08003ada <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003ada:	b480      	push	{r7}
 8003adc:	b083      	sub	sp, #12
 8003ade:	af00      	add	r7, sp, #0
 8003ae0:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003ae8:	bf00      	nop
 8003aea:	370c      	adds	r7, #12
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bc80      	pop	{r7}
 8003af0:	4770      	bx	lr

08003af2 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8003af2:	b480      	push	{r7}
 8003af4:	b085      	sub	sp, #20
 8003af6:	af00      	add	r7, sp, #0
 8003af8:	6078      	str	r0, [r7, #4]
 8003afa:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b08:	d103      	bne.n	8003b12 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	691b      	ldr	r3, [r3, #16]
 8003b0e:	60fb      	str	r3, [r7, #12]
 8003b10:	e00c      	b.n	8003b2c <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	3308      	adds	r3, #8
 8003b16:	60fb      	str	r3, [r7, #12]
 8003b18:	e002      	b.n	8003b20 <vListInsert+0x2e>
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	60fb      	str	r3, [r7, #12]
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	68ba      	ldr	r2, [r7, #8]
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d2f6      	bcs.n	8003b1a <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	685a      	ldr	r2, [r3, #4]
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	683a      	ldr	r2, [r7, #0]
 8003b3a:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	68fa      	ldr	r2, [r7, #12]
 8003b40:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	683a      	ldr	r2, [r7, #0]
 8003b46:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	687a      	ldr	r2, [r7, #4]
 8003b4c:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	1c5a      	adds	r2, r3, #1
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	601a      	str	r2, [r3, #0]
}
 8003b58:	bf00      	nop
 8003b5a:	3714      	adds	r7, #20
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bc80      	pop	{r7}
 8003b60:	4770      	bx	lr

08003b62 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003b62:	b480      	push	{r7}
 8003b64:	b085      	sub	sp, #20
 8003b66:	af00      	add	r7, sp, #0
 8003b68:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	691b      	ldr	r3, [r3, #16]
 8003b6e:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	687a      	ldr	r2, [r7, #4]
 8003b76:	6892      	ldr	r2, [r2, #8]
 8003b78:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	689b      	ldr	r3, [r3, #8]
 8003b7e:	687a      	ldr	r2, [r7, #4]
 8003b80:	6852      	ldr	r2, [r2, #4]
 8003b82:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	687a      	ldr	r2, [r7, #4]
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	d103      	bne.n	8003b96 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	689a      	ldr	r2, [r3, #8]
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	1e5a      	subs	r2, r3, #1
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	3714      	adds	r7, #20
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bc80      	pop	{r7}
 8003bb2:	4770      	bx	lr

08003bb4 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b085      	sub	sp, #20
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	60f8      	str	r0, [r7, #12]
 8003bbc:	60b9      	str	r1, [r7, #8]
 8003bbe:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */
    pxTopOfStack--;                                                      /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	3b04      	subs	r3, #4
 8003bc4:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003bcc:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	3b04      	subs	r3, #4
 8003bd2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	f023 0201 	bic.w	r2, r3, #1
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	3b04      	subs	r3, #4
 8003be2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8003be4:	4a08      	ldr	r2, [pc, #32]	; (8003c08 <pxPortInitialiseStack+0x54>)
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 5;                                                   /* R12, R3, R2 and R1. */
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	3b14      	subs	r3, #20
 8003bee:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters;                        /* R0 */
 8003bf0:	687a      	ldr	r2, [r7, #4]
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 8;                                                   /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	3b20      	subs	r3, #32
 8003bfa:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
}
 8003bfe:	4618      	mov	r0, r3
 8003c00:	3714      	adds	r7, #20
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bc80      	pop	{r7}
 8003c06:	4770      	bx	lr
 8003c08:	08003c0d 	.word	0x08003c0d

08003c0c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b085      	sub	sp, #20
 8003c10:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 8003c12:	2300      	movs	r3, #0
 8003c14:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8003c16:	4b12      	ldr	r3, [pc, #72]	; (8003c60 <prvTaskExitError+0x54>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c1e:	d00a      	beq.n	8003c36 <prvTaskExitError+0x2a>
        __asm volatile
 8003c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c24:	f383 8811 	msr	BASEPRI, r3
 8003c28:	f3bf 8f6f 	isb	sy
 8003c2c:	f3bf 8f4f 	dsb	sy
 8003c30:	60fb      	str	r3, [r7, #12]
    }
 8003c32:	bf00      	nop
 8003c34:	e7fe      	b.n	8003c34 <prvTaskExitError+0x28>
        __asm volatile
 8003c36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c3a:	f383 8811 	msr	BASEPRI, r3
 8003c3e:	f3bf 8f6f 	isb	sy
 8003c42:	f3bf 8f4f 	dsb	sy
 8003c46:	60bb      	str	r3, [r7, #8]
    }
 8003c48:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8003c4a:	bf00      	nop
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d0fc      	beq.n	8003c4c <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8003c52:	bf00      	nop
 8003c54:	bf00      	nop
 8003c56:	3714      	adds	r7, #20
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bc80      	pop	{r7}
 8003c5c:	4770      	bx	lr
 8003c5e:	bf00      	nop
 8003c60:	20000010 	.word	0x20000010
	...

08003c70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8003c70:	4b07      	ldr	r3, [pc, #28]	; (8003c90 <pxCurrentTCBConst2>)
 8003c72:	6819      	ldr	r1, [r3, #0]
 8003c74:	6808      	ldr	r0, [r1, #0]
 8003c76:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003c7a:	f380 8809 	msr	PSP, r0
 8003c7e:	f3bf 8f6f 	isb	sy
 8003c82:	f04f 0000 	mov.w	r0, #0
 8003c86:	f380 8811 	msr	BASEPRI, r0
 8003c8a:	f04e 0e0d 	orr.w	lr, lr, #13
 8003c8e:	4770      	bx	lr

08003c90 <pxCurrentTCBConst2>:
 8003c90:	200000a8 	.word	0x200000a8
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8003c94:	bf00      	nop
 8003c96:	bf00      	nop

08003c98 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
    __asm volatile (
 8003c98:	4806      	ldr	r0, [pc, #24]	; (8003cb4 <prvPortStartFirstTask+0x1c>)
 8003c9a:	6800      	ldr	r0, [r0, #0]
 8003c9c:	6800      	ldr	r0, [r0, #0]
 8003c9e:	f380 8808 	msr	MSP, r0
 8003ca2:	b662      	cpsie	i
 8003ca4:	b661      	cpsie	f
 8003ca6:	f3bf 8f4f 	dsb	sy
 8003caa:	f3bf 8f6f 	isb	sy
 8003cae:	df00      	svc	0
 8003cb0:	bf00      	nop
 8003cb2:	0000      	.short	0x0000
 8003cb4:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8003cb8:	bf00      	nop
 8003cba:	bf00      	nop

08003cbc <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b084      	sub	sp, #16
 8003cc0:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003cc2:	4b32      	ldr	r3, [pc, #200]	; (8003d8c <xPortStartScheduler+0xd0>)
 8003cc4:	60fb      	str	r3, [r7, #12]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	781b      	ldrb	r3, [r3, #0]
 8003cca:	b2db      	uxtb	r3, r3
 8003ccc:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	22ff      	movs	r2, #255	; 0xff
 8003cd2:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	781b      	ldrb	r3, [r3, #0]
 8003cd8:	b2db      	uxtb	r3, r3
 8003cda:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003cdc:	78fb      	ldrb	r3, [r7, #3]
 8003cde:	b2db      	uxtb	r3, r3
 8003ce0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003ce4:	b2da      	uxtb	r2, r3
 8003ce6:	4b2a      	ldr	r3, [pc, #168]	; (8003d90 <xPortStartScheduler+0xd4>)
 8003ce8:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003cea:	4b2a      	ldr	r3, [pc, #168]	; (8003d94 <xPortStartScheduler+0xd8>)
 8003cec:	2207      	movs	r2, #7
 8003cee:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003cf0:	e009      	b.n	8003d06 <xPortStartScheduler+0x4a>
        {
            ulMaxPRIGROUPValue--;
 8003cf2:	4b28      	ldr	r3, [pc, #160]	; (8003d94 <xPortStartScheduler+0xd8>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	3b01      	subs	r3, #1
 8003cf8:	4a26      	ldr	r2, [pc, #152]	; (8003d94 <xPortStartScheduler+0xd8>)
 8003cfa:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003cfc:	78fb      	ldrb	r3, [r7, #3]
 8003cfe:	b2db      	uxtb	r3, r3
 8003d00:	005b      	lsls	r3, r3, #1
 8003d02:	b2db      	uxtb	r3, r3
 8003d04:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003d06:	78fb      	ldrb	r3, [r7, #3]
 8003d08:	b2db      	uxtb	r3, r3
 8003d0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d0e:	2b80      	cmp	r3, #128	; 0x80
 8003d10:	d0ef      	beq.n	8003cf2 <xPortStartScheduler+0x36>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003d12:	4b20      	ldr	r3, [pc, #128]	; (8003d94 <xPortStartScheduler+0xd8>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f1c3 0307 	rsb	r3, r3, #7
 8003d1a:	2b04      	cmp	r3, #4
 8003d1c:	d00a      	beq.n	8003d34 <xPortStartScheduler+0x78>
        __asm volatile
 8003d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d22:	f383 8811 	msr	BASEPRI, r3
 8003d26:	f3bf 8f6f 	isb	sy
 8003d2a:	f3bf 8f4f 	dsb	sy
 8003d2e:	60bb      	str	r3, [r7, #8]
    }
 8003d30:	bf00      	nop
 8003d32:	e7fe      	b.n	8003d32 <xPortStartScheduler+0x76>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003d34:	4b17      	ldr	r3, [pc, #92]	; (8003d94 <xPortStartScheduler+0xd8>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	021b      	lsls	r3, r3, #8
 8003d3a:	4a16      	ldr	r2, [pc, #88]	; (8003d94 <xPortStartScheduler+0xd8>)
 8003d3c:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003d3e:	4b15      	ldr	r3, [pc, #84]	; (8003d94 <xPortStartScheduler+0xd8>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003d46:	4a13      	ldr	r2, [pc, #76]	; (8003d94 <xPortStartScheduler+0xd8>)
 8003d48:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	b2da      	uxtb	r2, r3
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8003d52:	4b11      	ldr	r3, [pc, #68]	; (8003d98 <xPortStartScheduler+0xdc>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a10      	ldr	r2, [pc, #64]	; (8003d98 <xPortStartScheduler+0xdc>)
 8003d58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003d5c:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8003d5e:	4b0e      	ldr	r3, [pc, #56]	; (8003d98 <xPortStartScheduler+0xdc>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a0d      	ldr	r2, [pc, #52]	; (8003d98 <xPortStartScheduler+0xdc>)
 8003d64:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003d68:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8003d6a:	f000 f981 	bl	8004070 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8003d6e:	4b0b      	ldr	r3, [pc, #44]	; (8003d9c <xPortStartScheduler+0xe0>)
 8003d70:	2200      	movs	r2, #0
 8003d72:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8003d74:	f7ff ff90 	bl	8003c98 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8003d78:	f7fe ff94 	bl	8002ca4 <vTaskSwitchContext>
    prvTaskExitError();
 8003d7c:	f7ff ff46 	bl	8003c0c <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8003d80:	2300      	movs	r3, #0
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	3710      	adds	r7, #16
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}
 8003d8a:	bf00      	nop
 8003d8c:	e000e400 	.word	0xe000e400
 8003d90:	200001f4 	.word	0x200001f4
 8003d94:	200001f8 	.word	0x200001f8
 8003d98:	e000ed20 	.word	0xe000ed20
 8003d9c:	20000010 	.word	0x20000010

08003da0 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003da0:	b480      	push	{r7}
 8003da2:	b083      	sub	sp, #12
 8003da4:	af00      	add	r7, sp, #0
        __asm volatile
 8003da6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003daa:	f383 8811 	msr	BASEPRI, r3
 8003dae:	f3bf 8f6f 	isb	sy
 8003db2:	f3bf 8f4f 	dsb	sy
 8003db6:	607b      	str	r3, [r7, #4]
    }
 8003db8:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8003dba:	4b0f      	ldr	r3, [pc, #60]	; (8003df8 <vPortEnterCritical+0x58>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	3301      	adds	r3, #1
 8003dc0:	4a0d      	ldr	r2, [pc, #52]	; (8003df8 <vPortEnterCritical+0x58>)
 8003dc2:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8003dc4:	4b0c      	ldr	r3, [pc, #48]	; (8003df8 <vPortEnterCritical+0x58>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	2b01      	cmp	r3, #1
 8003dca:	d10f      	bne.n	8003dec <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003dcc:	4b0b      	ldr	r3, [pc, #44]	; (8003dfc <vPortEnterCritical+0x5c>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	b2db      	uxtb	r3, r3
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d00a      	beq.n	8003dec <vPortEnterCritical+0x4c>
        __asm volatile
 8003dd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dda:	f383 8811 	msr	BASEPRI, r3
 8003dde:	f3bf 8f6f 	isb	sy
 8003de2:	f3bf 8f4f 	dsb	sy
 8003de6:	603b      	str	r3, [r7, #0]
    }
 8003de8:	bf00      	nop
 8003dea:	e7fe      	b.n	8003dea <vPortEnterCritical+0x4a>
    }
}
 8003dec:	bf00      	nop
 8003dee:	370c      	adds	r7, #12
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bc80      	pop	{r7}
 8003df4:	4770      	bx	lr
 8003df6:	bf00      	nop
 8003df8:	20000010 	.word	0x20000010
 8003dfc:	e000ed04 	.word	0xe000ed04

08003e00 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003e00:	b480      	push	{r7}
 8003e02:	b083      	sub	sp, #12
 8003e04:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8003e06:	4b11      	ldr	r3, [pc, #68]	; (8003e4c <vPortExitCritical+0x4c>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d10a      	bne.n	8003e24 <vPortExitCritical+0x24>
        __asm volatile
 8003e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e12:	f383 8811 	msr	BASEPRI, r3
 8003e16:	f3bf 8f6f 	isb	sy
 8003e1a:	f3bf 8f4f 	dsb	sy
 8003e1e:	607b      	str	r3, [r7, #4]
    }
 8003e20:	bf00      	nop
 8003e22:	e7fe      	b.n	8003e22 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8003e24:	4b09      	ldr	r3, [pc, #36]	; (8003e4c <vPortExitCritical+0x4c>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	3b01      	subs	r3, #1
 8003e2a:	4a08      	ldr	r2, [pc, #32]	; (8003e4c <vPortExitCritical+0x4c>)
 8003e2c:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8003e2e:	4b07      	ldr	r3, [pc, #28]	; (8003e4c <vPortExitCritical+0x4c>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d105      	bne.n	8003e42 <vPortExitCritical+0x42>
 8003e36:	2300      	movs	r3, #0
 8003e38:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8003e40:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8003e42:	bf00      	nop
 8003e44:	370c      	adds	r7, #12
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bc80      	pop	{r7}
 8003e4a:	4770      	bx	lr
 8003e4c:	20000010 	.word	0x20000010

08003e50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003e50:	f3ef 8009 	mrs	r0, PSP
 8003e54:	f3bf 8f6f 	isb	sy
 8003e58:	4b0d      	ldr	r3, [pc, #52]	; (8003e90 <pxCurrentTCBConst>)
 8003e5a:	681a      	ldr	r2, [r3, #0]
 8003e5c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003e60:	6010      	str	r0, [r2, #0]
 8003e62:	e92d 4008 	stmdb	sp!, {r3, lr}
 8003e66:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003e6a:	f380 8811 	msr	BASEPRI, r0
 8003e6e:	f7fe ff19 	bl	8002ca4 <vTaskSwitchContext>
 8003e72:	f04f 0000 	mov.w	r0, #0
 8003e76:	f380 8811 	msr	BASEPRI, r0
 8003e7a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8003e7e:	6819      	ldr	r1, [r3, #0]
 8003e80:	6808      	ldr	r0, [r1, #0]
 8003e82:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003e86:	f380 8809 	msr	PSP, r0
 8003e8a:	f3bf 8f6f 	isb	sy
 8003e8e:	4770      	bx	lr

08003e90 <pxCurrentTCBConst>:
 8003e90:	200000a8 	.word	0x200000a8
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8003e94:	bf00      	nop
 8003e96:	bf00      	nop

08003e98 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b082      	sub	sp, #8
 8003e9c:	af00      	add	r7, sp, #0
        __asm volatile
 8003e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ea2:	f383 8811 	msr	BASEPRI, r3
 8003ea6:	f3bf 8f6f 	isb	sy
 8003eaa:	f3bf 8f4f 	dsb	sy
 8003eae:	607b      	str	r3, [r7, #4]
    }
 8003eb0:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8003eb2:	f7fe fddf 	bl	8002a74 <xTaskIncrementTick>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d003      	beq.n	8003ec4 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003ebc:	4b06      	ldr	r3, [pc, #24]	; (8003ed8 <SysTick_Handler+0x40>)
 8003ebe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ec2:	601a      	str	r2, [r3, #0]
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	f383 8811 	msr	BASEPRI, r3
    }
 8003ece:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8003ed0:	bf00      	nop
 8003ed2:	3708      	adds	r7, #8
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bd80      	pop	{r7, pc}
 8003ed8:	e000ed04 	.word	0xe000ed04

08003edc <vPortSuppressTicksAndSleep>:
/*-----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE == 1 )

    __attribute__( ( weak ) ) void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
    {
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b088      	sub	sp, #32
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
        uint32_t ulReloadValue, ulCompleteTickPeriods, ulCompletedSysTickDecrements, ulSysTickDecrementsLeft;
        TickType_t xModifiableIdleTime;

        /* Make sure the SysTick reload value does not overflow the counter. */
        if( xExpectedIdleTime > xMaximumPossibleSuppressedTicks )
 8003ee4:	4b5b      	ldr	r3, [pc, #364]	; (8004054 <vPortSuppressTicksAndSleep+0x178>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	687a      	ldr	r2, [r7, #4]
 8003eea:	429a      	cmp	r2, r3
 8003eec:	d902      	bls.n	8003ef4 <vPortSuppressTicksAndSleep+0x18>
        {
            xExpectedIdleTime = xMaximumPossibleSuppressedTicks;
 8003eee:	4b59      	ldr	r3, [pc, #356]	; (8004054 <vPortSuppressTicksAndSleep+0x178>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	607b      	str	r3, [r7, #4]
        }

        /* Enter a critical section but don't use the taskENTER_CRITICAL()
         * method as that will mask interrupts that should exit sleep mode. */
        __asm volatile ( "cpsid i" ::: "memory" );
 8003ef4:	b672      	cpsid	i
        __asm volatile ( "dsb" );
 8003ef6:	f3bf 8f4f 	dsb	sy
        __asm volatile ( "isb" );
 8003efa:	f3bf 8f6f 	isb	sy

        /* If a context switch is pending or a task is waiting for the scheduler
         * to be unsuspended then abandon the low power entry. */
        if( eTaskConfirmSleepModeStatus() == eAbortSleep )
 8003efe:	f7ff f937 	bl	8003170 <eTaskConfirmSleepModeStatus>
 8003f02:	4603      	mov	r3, r0
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d101      	bne.n	8003f0c <vPortSuppressTicksAndSleep+0x30>
        {
            /* Re-enable interrupts - see comments above the cpsid instruction
             * above. */
            __asm volatile ( "cpsie i" ::: "memory" );
 8003f08:	b662      	cpsie	i
            vTaskStepTick( ulCompleteTickPeriods );

            /* Exit with interrupts enabled. */
            __asm volatile ( "cpsie i" ::: "memory" );
        }
    }
 8003f0a:	e09e      	b.n	800404a <vPortSuppressTicksAndSleep+0x16e>
            portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT );
 8003f0c:	4b52      	ldr	r3, [pc, #328]	; (8004058 <vPortSuppressTicksAndSleep+0x17c>)
 8003f0e:	2206      	movs	r2, #6
 8003f10:	601a      	str	r2, [r3, #0]
            ulSysTickDecrementsLeft = portNVIC_SYSTICK_CURRENT_VALUE_REG;
 8003f12:	4b52      	ldr	r3, [pc, #328]	; (800405c <vPortSuppressTicksAndSleep+0x180>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	617b      	str	r3, [r7, #20]
            if( ulSysTickDecrementsLeft == 0 )
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d102      	bne.n	8003f24 <vPortSuppressTicksAndSleep+0x48>
                ulSysTickDecrementsLeft = ulTimerCountsForOneTick;
 8003f1e:	4b50      	ldr	r3, [pc, #320]	; (8004060 <vPortSuppressTicksAndSleep+0x184>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	617b      	str	r3, [r7, #20]
            ulReloadValue = ulSysTickDecrementsLeft + ( ulTimerCountsForOneTick * ( xExpectedIdleTime - 1UL ) );
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	3b01      	subs	r3, #1
 8003f28:	4a4d      	ldr	r2, [pc, #308]	; (8004060 <vPortSuppressTicksAndSleep+0x184>)
 8003f2a:	6812      	ldr	r2, [r2, #0]
 8003f2c:	fb02 f303 	mul.w	r3, r2, r3
 8003f30:	697a      	ldr	r2, [r7, #20]
 8003f32:	4413      	add	r3, r2
 8003f34:	61fb      	str	r3, [r7, #28]
            if( ( portNVIC_INT_CTRL_REG & portNVIC_PEND_SYSTICK_SET_BIT ) != 0 )
 8003f36:	4b4b      	ldr	r3, [pc, #300]	; (8004064 <vPortSuppressTicksAndSleep+0x188>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d008      	beq.n	8003f54 <vPortSuppressTicksAndSleep+0x78>
                portNVIC_INT_CTRL_REG = portNVIC_PEND_SYSTICK_CLEAR_BIT;
 8003f42:	4b48      	ldr	r3, [pc, #288]	; (8004064 <vPortSuppressTicksAndSleep+0x188>)
 8003f44:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f48:	601a      	str	r2, [r3, #0]
                ulReloadValue -= ulTimerCountsForOneTick;
 8003f4a:	4b45      	ldr	r3, [pc, #276]	; (8004060 <vPortSuppressTicksAndSleep+0x184>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	69fa      	ldr	r2, [r7, #28]
 8003f50:	1ad3      	subs	r3, r2, r3
 8003f52:	61fb      	str	r3, [r7, #28]
            if( ulReloadValue > ulStoppedTimerCompensation )
 8003f54:	4b44      	ldr	r3, [pc, #272]	; (8004068 <vPortSuppressTicksAndSleep+0x18c>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	69fa      	ldr	r2, [r7, #28]
 8003f5a:	429a      	cmp	r2, r3
 8003f5c:	d904      	bls.n	8003f68 <vPortSuppressTicksAndSleep+0x8c>
                ulReloadValue -= ulStoppedTimerCompensation;
 8003f5e:	4b42      	ldr	r3, [pc, #264]	; (8004068 <vPortSuppressTicksAndSleep+0x18c>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	69fa      	ldr	r2, [r7, #28]
 8003f64:	1ad3      	subs	r3, r2, r3
 8003f66:	61fb      	str	r3, [r7, #28]
            portNVIC_SYSTICK_LOAD_REG = ulReloadValue;
 8003f68:	4a40      	ldr	r2, [pc, #256]	; (800406c <vPortSuppressTicksAndSleep+0x190>)
 8003f6a:	69fb      	ldr	r3, [r7, #28]
 8003f6c:	6013      	str	r3, [r2, #0]
            portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003f6e:	4b3b      	ldr	r3, [pc, #236]	; (800405c <vPortSuppressTicksAndSleep+0x180>)
 8003f70:	2200      	movs	r2, #0
 8003f72:	601a      	str	r2, [r3, #0]
            portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 8003f74:	4b38      	ldr	r3, [pc, #224]	; (8004058 <vPortSuppressTicksAndSleep+0x17c>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a37      	ldr	r2, [pc, #220]	; (8004058 <vPortSuppressTicksAndSleep+0x17c>)
 8003f7a:	f043 0301 	orr.w	r3, r3, #1
 8003f7e:	6013      	str	r3, [r2, #0]
            xModifiableIdleTime = xExpectedIdleTime;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	60fb      	str	r3, [r7, #12]
            if( xModifiableIdleTime > 0 )
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d004      	beq.n	8003f94 <vPortSuppressTicksAndSleep+0xb8>
                __asm volatile ( "dsb" ::: "memory" );
 8003f8a:	f3bf 8f4f 	dsb	sy
                __asm volatile ( "wfi" );
 8003f8e:	bf30      	wfi
                __asm volatile ( "isb" );
 8003f90:	f3bf 8f6f 	isb	sy
            __asm volatile ( "cpsie i" ::: "memory" );
 8003f94:	b662      	cpsie	i
            __asm volatile ( "dsb" );
 8003f96:	f3bf 8f4f 	dsb	sy
            __asm volatile ( "isb" );
 8003f9a:	f3bf 8f6f 	isb	sy
            __asm volatile ( "cpsid i" ::: "memory" );
 8003f9e:	b672      	cpsid	i
            __asm volatile ( "dsb" );
 8003fa0:	f3bf 8f4f 	dsb	sy
            __asm volatile ( "isb" );
 8003fa4:	f3bf 8f6f 	isb	sy
            portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT );
 8003fa8:	4b2b      	ldr	r3, [pc, #172]	; (8004058 <vPortSuppressTicksAndSleep+0x17c>)
 8003faa:	2206      	movs	r2, #6
 8003fac:	601a      	str	r2, [r3, #0]
            if( ( portNVIC_SYSTICK_CTRL_REG & portNVIC_SYSTICK_COUNT_FLAG_BIT ) != 0 )
 8003fae:	4b2a      	ldr	r3, [pc, #168]	; (8004058 <vPortSuppressTicksAndSleep+0x17c>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d01d      	beq.n	8003ff6 <vPortSuppressTicksAndSleep+0x11a>
                ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL ) - ( ulReloadValue - portNVIC_SYSTICK_CURRENT_VALUE_REG );
 8003fba:	4b29      	ldr	r3, [pc, #164]	; (8004060 <vPortSuppressTicksAndSleep+0x184>)
 8003fbc:	681a      	ldr	r2, [r3, #0]
 8003fbe:	4b27      	ldr	r3, [pc, #156]	; (800405c <vPortSuppressTicksAndSleep+0x180>)
 8003fc0:	6819      	ldr	r1, [r3, #0]
 8003fc2:	69fb      	ldr	r3, [r7, #28]
 8003fc4:	1acb      	subs	r3, r1, r3
 8003fc6:	4413      	add	r3, r2
 8003fc8:	3b01      	subs	r3, #1
 8003fca:	613b      	str	r3, [r7, #16]
                if( ( ulCalculatedLoadValue <= ulStoppedTimerCompensation ) || ( ulCalculatedLoadValue > ulTimerCountsForOneTick ) )
 8003fcc:	4b26      	ldr	r3, [pc, #152]	; (8004068 <vPortSuppressTicksAndSleep+0x18c>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	693a      	ldr	r2, [r7, #16]
 8003fd2:	429a      	cmp	r2, r3
 8003fd4:	d904      	bls.n	8003fe0 <vPortSuppressTicksAndSleep+0x104>
 8003fd6:	4b22      	ldr	r3, [pc, #136]	; (8004060 <vPortSuppressTicksAndSleep+0x184>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	693a      	ldr	r2, [r7, #16]
 8003fdc:	429a      	cmp	r2, r3
 8003fde:	d903      	bls.n	8003fe8 <vPortSuppressTicksAndSleep+0x10c>
                    ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL );
 8003fe0:	4b1f      	ldr	r3, [pc, #124]	; (8004060 <vPortSuppressTicksAndSleep+0x184>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	3b01      	subs	r3, #1
 8003fe6:	613b      	str	r3, [r7, #16]
                portNVIC_SYSTICK_LOAD_REG = ulCalculatedLoadValue;
 8003fe8:	4a20      	ldr	r2, [pc, #128]	; (800406c <vPortSuppressTicksAndSleep+0x190>)
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	6013      	str	r3, [r2, #0]
                ulCompleteTickPeriods = xExpectedIdleTime - 1UL;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	3b01      	subs	r3, #1
 8003ff2:	61bb      	str	r3, [r7, #24]
 8003ff4:	e01a      	b.n	800402c <vPortSuppressTicksAndSleep+0x150>
                ulSysTickDecrementsLeft = portNVIC_SYSTICK_CURRENT_VALUE_REG;
 8003ff6:	4b19      	ldr	r3, [pc, #100]	; (800405c <vPortSuppressTicksAndSleep+0x180>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	617b      	str	r3, [r7, #20]
                ulCompletedSysTickDecrements = ( xExpectedIdleTime * ulTimerCountsForOneTick ) - ulSysTickDecrementsLeft;
 8003ffc:	4b18      	ldr	r3, [pc, #96]	; (8004060 <vPortSuppressTicksAndSleep+0x184>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	687a      	ldr	r2, [r7, #4]
 8004002:	fb02 f203 	mul.w	r2, r2, r3
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	1ad3      	subs	r3, r2, r3
 800400a:	60bb      	str	r3, [r7, #8]
                ulCompleteTickPeriods = ulCompletedSysTickDecrements / ulTimerCountsForOneTick;
 800400c:	4b14      	ldr	r3, [pc, #80]	; (8004060 <vPortSuppressTicksAndSleep+0x184>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	68ba      	ldr	r2, [r7, #8]
 8004012:	fbb2 f3f3 	udiv	r3, r2, r3
 8004016:	61bb      	str	r3, [r7, #24]
                portNVIC_SYSTICK_LOAD_REG = ( ( ulCompleteTickPeriods + 1UL ) * ulTimerCountsForOneTick ) - ulCompletedSysTickDecrements;
 8004018:	69bb      	ldr	r3, [r7, #24]
 800401a:	3301      	adds	r3, #1
 800401c:	4a10      	ldr	r2, [pc, #64]	; (8004060 <vPortSuppressTicksAndSleep+0x184>)
 800401e:	6812      	ldr	r2, [r2, #0]
 8004020:	fb02 f203 	mul.w	r2, r2, r3
 8004024:	4911      	ldr	r1, [pc, #68]	; (800406c <vPortSuppressTicksAndSleep+0x190>)
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	1ad3      	subs	r3, r2, r3
 800402a:	600b      	str	r3, [r1, #0]
            portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800402c:	4b0b      	ldr	r3, [pc, #44]	; (800405c <vPortSuppressTicksAndSleep+0x180>)
 800402e:	2200      	movs	r2, #0
 8004030:	601a      	str	r2, [r3, #0]
            portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 8004032:	4b09      	ldr	r3, [pc, #36]	; (8004058 <vPortSuppressTicksAndSleep+0x17c>)
 8004034:	2207      	movs	r2, #7
 8004036:	601a      	str	r2, [r3, #0]
                portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 8004038:	4b09      	ldr	r3, [pc, #36]	; (8004060 <vPortSuppressTicksAndSleep+0x184>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a0b      	ldr	r2, [pc, #44]	; (800406c <vPortSuppressTicksAndSleep+0x190>)
 800403e:	3b01      	subs	r3, #1
 8004040:	6013      	str	r3, [r2, #0]
            vTaskStepTick( ulCompleteTickPeriods );
 8004042:	69b8      	ldr	r0, [r7, #24]
 8004044:	f7fe fcbc 	bl	80029c0 <vTaskStepTick>
            __asm volatile ( "cpsie i" ::: "memory" );
 8004048:	b662      	cpsie	i
    }
 800404a:	bf00      	nop
 800404c:	3720      	adds	r7, #32
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}
 8004052:	bf00      	nop
 8004054:	200001ec 	.word	0x200001ec
 8004058:	e000e010 	.word	0xe000e010
 800405c:	e000e018 	.word	0xe000e018
 8004060:	200001e8 	.word	0x200001e8
 8004064:	e000ed04 	.word	0xe000ed04
 8004068:	200001f0 	.word	0x200001f0
 800406c:	e000e014 	.word	0xe000e014

08004070 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8004070:	b480      	push	{r7}
 8004072:	af00      	add	r7, sp, #0
    /* Calculate the constants required to configure the tick interrupt. */
    #if ( configUSE_TICKLESS_IDLE == 1 )
    {
        ulTimerCountsForOneTick = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
 8004074:	4b14      	ldr	r3, [pc, #80]	; (80040c8 <vPortSetupTimerInterrupt+0x58>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a14      	ldr	r2, [pc, #80]	; (80040cc <vPortSetupTimerInterrupt+0x5c>)
 800407a:	fba2 2303 	umull	r2, r3, r2, r3
 800407e:	099b      	lsrs	r3, r3, #6
 8004080:	4a13      	ldr	r2, [pc, #76]	; (80040d0 <vPortSetupTimerInterrupt+0x60>)
 8004082:	6013      	str	r3, [r2, #0]
        xMaximumPossibleSuppressedTicks = portMAX_24_BIT_NUMBER / ulTimerCountsForOneTick;
 8004084:	4b12      	ldr	r3, [pc, #72]	; (80040d0 <vPortSetupTimerInterrupt+0x60>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800408c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004090:	4a10      	ldr	r2, [pc, #64]	; (80040d4 <vPortSetupTimerInterrupt+0x64>)
 8004092:	6013      	str	r3, [r2, #0]
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 8004094:	4b10      	ldr	r3, [pc, #64]	; (80040d8 <vPortSetupTimerInterrupt+0x68>)
 8004096:	225e      	movs	r2, #94	; 0x5e
 8004098:	601a      	str	r2, [r3, #0]
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 800409a:	4b10      	ldr	r3, [pc, #64]	; (80040dc <vPortSetupTimerInterrupt+0x6c>)
 800409c:	2200      	movs	r2, #0
 800409e:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80040a0:	4b0f      	ldr	r3, [pc, #60]	; (80040e0 <vPortSetupTimerInterrupt+0x70>)
 80040a2:	2200      	movs	r2, #0
 80040a4:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80040a6:	4b08      	ldr	r3, [pc, #32]	; (80040c8 <vPortSetupTimerInterrupt+0x58>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a08      	ldr	r2, [pc, #32]	; (80040cc <vPortSetupTimerInterrupt+0x5c>)
 80040ac:	fba2 2303 	umull	r2, r3, r2, r3
 80040b0:	099b      	lsrs	r3, r3, #6
 80040b2:	4a0c      	ldr	r2, [pc, #48]	; (80040e4 <vPortSetupTimerInterrupt+0x74>)
 80040b4:	3b01      	subs	r3, #1
 80040b6:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80040b8:	4b08      	ldr	r3, [pc, #32]	; (80040dc <vPortSetupTimerInterrupt+0x6c>)
 80040ba:	2207      	movs	r2, #7
 80040bc:	601a      	str	r2, [r3, #0]
}
 80040be:	bf00      	nop
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bc80      	pop	{r7}
 80040c4:	4770      	bx	lr
 80040c6:	bf00      	nop
 80040c8:	20000000 	.word	0x20000000
 80040cc:	10624dd3 	.word	0x10624dd3
 80040d0:	200001e8 	.word	0x200001e8
 80040d4:	200001ec 	.word	0x200001ec
 80040d8:	200001f0 	.word	0x200001f0
 80040dc:	e000e010 	.word	0xe000e010
 80040e0:	e000e018 	.word	0xe000e018
 80040e4:	e000e014 	.word	0xe000e014

080040e8 <__errno>:
 80040e8:	4b01      	ldr	r3, [pc, #4]	; (80040f0 <__errno+0x8>)
 80040ea:	6818      	ldr	r0, [r3, #0]
 80040ec:	4770      	bx	lr
 80040ee:	bf00      	nop
 80040f0:	20000014 	.word	0x20000014

080040f4 <__libc_init_array>:
 80040f4:	b570      	push	{r4, r5, r6, lr}
 80040f6:	2600      	movs	r6, #0
 80040f8:	4d0c      	ldr	r5, [pc, #48]	; (800412c <__libc_init_array+0x38>)
 80040fa:	4c0d      	ldr	r4, [pc, #52]	; (8004130 <__libc_init_array+0x3c>)
 80040fc:	1b64      	subs	r4, r4, r5
 80040fe:	10a4      	asrs	r4, r4, #2
 8004100:	42a6      	cmp	r6, r4
 8004102:	d109      	bne.n	8004118 <__libc_init_array+0x24>
 8004104:	f000 f904 	bl	8004310 <_init>
 8004108:	2600      	movs	r6, #0
 800410a:	4d0a      	ldr	r5, [pc, #40]	; (8004134 <__libc_init_array+0x40>)
 800410c:	4c0a      	ldr	r4, [pc, #40]	; (8004138 <__libc_init_array+0x44>)
 800410e:	1b64      	subs	r4, r4, r5
 8004110:	10a4      	asrs	r4, r4, #2
 8004112:	42a6      	cmp	r6, r4
 8004114:	d105      	bne.n	8004122 <__libc_init_array+0x2e>
 8004116:	bd70      	pop	{r4, r5, r6, pc}
 8004118:	f855 3b04 	ldr.w	r3, [r5], #4
 800411c:	4798      	blx	r3
 800411e:	3601      	adds	r6, #1
 8004120:	e7ee      	b.n	8004100 <__libc_init_array+0xc>
 8004122:	f855 3b04 	ldr.w	r3, [r5], #4
 8004126:	4798      	blx	r3
 8004128:	3601      	adds	r6, #1
 800412a:	e7f2      	b.n	8004112 <__libc_init_array+0x1e>
 800412c:	08004370 	.word	0x08004370
 8004130:	08004370 	.word	0x08004370
 8004134:	08004370 	.word	0x08004370
 8004138:	08004374 	.word	0x08004374

0800413c <malloc>:
 800413c:	4b02      	ldr	r3, [pc, #8]	; (8004148 <malloc+0xc>)
 800413e:	4601      	mov	r1, r0
 8004140:	6818      	ldr	r0, [r3, #0]
 8004142:	f000 b86d 	b.w	8004220 <_malloc_r>
 8004146:	bf00      	nop
 8004148:	20000014 	.word	0x20000014

0800414c <free>:
 800414c:	4b02      	ldr	r3, [pc, #8]	; (8004158 <free+0xc>)
 800414e:	4601      	mov	r1, r0
 8004150:	6818      	ldr	r0, [r3, #0]
 8004152:	f000 b819 	b.w	8004188 <_free_r>
 8004156:	bf00      	nop
 8004158:	20000014 	.word	0x20000014

0800415c <memcpy>:
 800415c:	440a      	add	r2, r1
 800415e:	4291      	cmp	r1, r2
 8004160:	f100 33ff 	add.w	r3, r0, #4294967295
 8004164:	d100      	bne.n	8004168 <memcpy+0xc>
 8004166:	4770      	bx	lr
 8004168:	b510      	push	{r4, lr}
 800416a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800416e:	4291      	cmp	r1, r2
 8004170:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004174:	d1f9      	bne.n	800416a <memcpy+0xe>
 8004176:	bd10      	pop	{r4, pc}

08004178 <memset>:
 8004178:	4603      	mov	r3, r0
 800417a:	4402      	add	r2, r0
 800417c:	4293      	cmp	r3, r2
 800417e:	d100      	bne.n	8004182 <memset+0xa>
 8004180:	4770      	bx	lr
 8004182:	f803 1b01 	strb.w	r1, [r3], #1
 8004186:	e7f9      	b.n	800417c <memset+0x4>

08004188 <_free_r>:
 8004188:	b538      	push	{r3, r4, r5, lr}
 800418a:	4605      	mov	r5, r0
 800418c:	2900      	cmp	r1, #0
 800418e:	d043      	beq.n	8004218 <_free_r+0x90>
 8004190:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004194:	1f0c      	subs	r4, r1, #4
 8004196:	2b00      	cmp	r3, #0
 8004198:	bfb8      	it	lt
 800419a:	18e4      	addlt	r4, r4, r3
 800419c:	f000 f8aa 	bl	80042f4 <__malloc_lock>
 80041a0:	4a1e      	ldr	r2, [pc, #120]	; (800421c <_free_r+0x94>)
 80041a2:	6813      	ldr	r3, [r2, #0]
 80041a4:	4610      	mov	r0, r2
 80041a6:	b933      	cbnz	r3, 80041b6 <_free_r+0x2e>
 80041a8:	6063      	str	r3, [r4, #4]
 80041aa:	6014      	str	r4, [r2, #0]
 80041ac:	4628      	mov	r0, r5
 80041ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80041b2:	f000 b8a5 	b.w	8004300 <__malloc_unlock>
 80041b6:	42a3      	cmp	r3, r4
 80041b8:	d90a      	bls.n	80041d0 <_free_r+0x48>
 80041ba:	6821      	ldr	r1, [r4, #0]
 80041bc:	1862      	adds	r2, r4, r1
 80041be:	4293      	cmp	r3, r2
 80041c0:	bf01      	itttt	eq
 80041c2:	681a      	ldreq	r2, [r3, #0]
 80041c4:	685b      	ldreq	r3, [r3, #4]
 80041c6:	1852      	addeq	r2, r2, r1
 80041c8:	6022      	streq	r2, [r4, #0]
 80041ca:	6063      	str	r3, [r4, #4]
 80041cc:	6004      	str	r4, [r0, #0]
 80041ce:	e7ed      	b.n	80041ac <_free_r+0x24>
 80041d0:	461a      	mov	r2, r3
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	b10b      	cbz	r3, 80041da <_free_r+0x52>
 80041d6:	42a3      	cmp	r3, r4
 80041d8:	d9fa      	bls.n	80041d0 <_free_r+0x48>
 80041da:	6811      	ldr	r1, [r2, #0]
 80041dc:	1850      	adds	r0, r2, r1
 80041de:	42a0      	cmp	r0, r4
 80041e0:	d10b      	bne.n	80041fa <_free_r+0x72>
 80041e2:	6820      	ldr	r0, [r4, #0]
 80041e4:	4401      	add	r1, r0
 80041e6:	1850      	adds	r0, r2, r1
 80041e8:	4283      	cmp	r3, r0
 80041ea:	6011      	str	r1, [r2, #0]
 80041ec:	d1de      	bne.n	80041ac <_free_r+0x24>
 80041ee:	6818      	ldr	r0, [r3, #0]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	4401      	add	r1, r0
 80041f4:	6011      	str	r1, [r2, #0]
 80041f6:	6053      	str	r3, [r2, #4]
 80041f8:	e7d8      	b.n	80041ac <_free_r+0x24>
 80041fa:	d902      	bls.n	8004202 <_free_r+0x7a>
 80041fc:	230c      	movs	r3, #12
 80041fe:	602b      	str	r3, [r5, #0]
 8004200:	e7d4      	b.n	80041ac <_free_r+0x24>
 8004202:	6820      	ldr	r0, [r4, #0]
 8004204:	1821      	adds	r1, r4, r0
 8004206:	428b      	cmp	r3, r1
 8004208:	bf01      	itttt	eq
 800420a:	6819      	ldreq	r1, [r3, #0]
 800420c:	685b      	ldreq	r3, [r3, #4]
 800420e:	1809      	addeq	r1, r1, r0
 8004210:	6021      	streq	r1, [r4, #0]
 8004212:	6063      	str	r3, [r4, #4]
 8004214:	6054      	str	r4, [r2, #4]
 8004216:	e7c9      	b.n	80041ac <_free_r+0x24>
 8004218:	bd38      	pop	{r3, r4, r5, pc}
 800421a:	bf00      	nop
 800421c:	200001fc 	.word	0x200001fc

08004220 <_malloc_r>:
 8004220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004222:	1ccd      	adds	r5, r1, #3
 8004224:	f025 0503 	bic.w	r5, r5, #3
 8004228:	3508      	adds	r5, #8
 800422a:	2d0c      	cmp	r5, #12
 800422c:	bf38      	it	cc
 800422e:	250c      	movcc	r5, #12
 8004230:	2d00      	cmp	r5, #0
 8004232:	4606      	mov	r6, r0
 8004234:	db01      	blt.n	800423a <_malloc_r+0x1a>
 8004236:	42a9      	cmp	r1, r5
 8004238:	d903      	bls.n	8004242 <_malloc_r+0x22>
 800423a:	230c      	movs	r3, #12
 800423c:	6033      	str	r3, [r6, #0]
 800423e:	2000      	movs	r0, #0
 8004240:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004242:	f000 f857 	bl	80042f4 <__malloc_lock>
 8004246:	4921      	ldr	r1, [pc, #132]	; (80042cc <_malloc_r+0xac>)
 8004248:	680a      	ldr	r2, [r1, #0]
 800424a:	4614      	mov	r4, r2
 800424c:	b99c      	cbnz	r4, 8004276 <_malloc_r+0x56>
 800424e:	4f20      	ldr	r7, [pc, #128]	; (80042d0 <_malloc_r+0xb0>)
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	b923      	cbnz	r3, 800425e <_malloc_r+0x3e>
 8004254:	4621      	mov	r1, r4
 8004256:	4630      	mov	r0, r6
 8004258:	f000 f83c 	bl	80042d4 <_sbrk_r>
 800425c:	6038      	str	r0, [r7, #0]
 800425e:	4629      	mov	r1, r5
 8004260:	4630      	mov	r0, r6
 8004262:	f000 f837 	bl	80042d4 <_sbrk_r>
 8004266:	1c43      	adds	r3, r0, #1
 8004268:	d123      	bne.n	80042b2 <_malloc_r+0x92>
 800426a:	230c      	movs	r3, #12
 800426c:	4630      	mov	r0, r6
 800426e:	6033      	str	r3, [r6, #0]
 8004270:	f000 f846 	bl	8004300 <__malloc_unlock>
 8004274:	e7e3      	b.n	800423e <_malloc_r+0x1e>
 8004276:	6823      	ldr	r3, [r4, #0]
 8004278:	1b5b      	subs	r3, r3, r5
 800427a:	d417      	bmi.n	80042ac <_malloc_r+0x8c>
 800427c:	2b0b      	cmp	r3, #11
 800427e:	d903      	bls.n	8004288 <_malloc_r+0x68>
 8004280:	6023      	str	r3, [r4, #0]
 8004282:	441c      	add	r4, r3
 8004284:	6025      	str	r5, [r4, #0]
 8004286:	e004      	b.n	8004292 <_malloc_r+0x72>
 8004288:	6863      	ldr	r3, [r4, #4]
 800428a:	42a2      	cmp	r2, r4
 800428c:	bf0c      	ite	eq
 800428e:	600b      	streq	r3, [r1, #0]
 8004290:	6053      	strne	r3, [r2, #4]
 8004292:	4630      	mov	r0, r6
 8004294:	f000 f834 	bl	8004300 <__malloc_unlock>
 8004298:	f104 000b 	add.w	r0, r4, #11
 800429c:	1d23      	adds	r3, r4, #4
 800429e:	f020 0007 	bic.w	r0, r0, #7
 80042a2:	1ac2      	subs	r2, r0, r3
 80042a4:	d0cc      	beq.n	8004240 <_malloc_r+0x20>
 80042a6:	1a1b      	subs	r3, r3, r0
 80042a8:	50a3      	str	r3, [r4, r2]
 80042aa:	e7c9      	b.n	8004240 <_malloc_r+0x20>
 80042ac:	4622      	mov	r2, r4
 80042ae:	6864      	ldr	r4, [r4, #4]
 80042b0:	e7cc      	b.n	800424c <_malloc_r+0x2c>
 80042b2:	1cc4      	adds	r4, r0, #3
 80042b4:	f024 0403 	bic.w	r4, r4, #3
 80042b8:	42a0      	cmp	r0, r4
 80042ba:	d0e3      	beq.n	8004284 <_malloc_r+0x64>
 80042bc:	1a21      	subs	r1, r4, r0
 80042be:	4630      	mov	r0, r6
 80042c0:	f000 f808 	bl	80042d4 <_sbrk_r>
 80042c4:	3001      	adds	r0, #1
 80042c6:	d1dd      	bne.n	8004284 <_malloc_r+0x64>
 80042c8:	e7cf      	b.n	800426a <_malloc_r+0x4a>
 80042ca:	bf00      	nop
 80042cc:	200001fc 	.word	0x200001fc
 80042d0:	20000200 	.word	0x20000200

080042d4 <_sbrk_r>:
 80042d4:	b538      	push	{r3, r4, r5, lr}
 80042d6:	2300      	movs	r3, #0
 80042d8:	4d05      	ldr	r5, [pc, #20]	; (80042f0 <_sbrk_r+0x1c>)
 80042da:	4604      	mov	r4, r0
 80042dc:	4608      	mov	r0, r1
 80042de:	602b      	str	r3, [r5, #0]
 80042e0:	f7fc f9ca 	bl	8000678 <_sbrk>
 80042e4:	1c43      	adds	r3, r0, #1
 80042e6:	d102      	bne.n	80042ee <_sbrk_r+0x1a>
 80042e8:	682b      	ldr	r3, [r5, #0]
 80042ea:	b103      	cbz	r3, 80042ee <_sbrk_r+0x1a>
 80042ec:	6023      	str	r3, [r4, #0]
 80042ee:	bd38      	pop	{r3, r4, r5, pc}
 80042f0:	200003c8 	.word	0x200003c8

080042f4 <__malloc_lock>:
 80042f4:	4801      	ldr	r0, [pc, #4]	; (80042fc <__malloc_lock+0x8>)
 80042f6:	f000 b809 	b.w	800430c <__retarget_lock_acquire_recursive>
 80042fa:	bf00      	nop
 80042fc:	200003d0 	.word	0x200003d0

08004300 <__malloc_unlock>:
 8004300:	4801      	ldr	r0, [pc, #4]	; (8004308 <__malloc_unlock+0x8>)
 8004302:	f000 b804 	b.w	800430e <__retarget_lock_release_recursive>
 8004306:	bf00      	nop
 8004308:	200003d0 	.word	0x200003d0

0800430c <__retarget_lock_acquire_recursive>:
 800430c:	4770      	bx	lr

0800430e <__retarget_lock_release_recursive>:
 800430e:	4770      	bx	lr

08004310 <_init>:
 8004310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004312:	bf00      	nop
 8004314:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004316:	bc08      	pop	{r3}
 8004318:	469e      	mov	lr, r3
 800431a:	4770      	bx	lr

0800431c <_fini>:
 800431c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800431e:	bf00      	nop
 8004320:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004322:	bc08      	pop	{r3}
 8004324:	469e      	mov	lr, r3
 8004326:	4770      	bx	lr
